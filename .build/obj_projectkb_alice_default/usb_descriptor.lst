   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 2
  11              		.file	"usb_descriptor.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.get_usb_descriptor,"ax",%progbits
  16              		.align	1
  17              		.global	get_usb_descriptor
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	get_usb_descriptor:
  25              	.LVL0:
  26              	.LFB188:
  27              		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****                          LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****          Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****     dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****                      www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****     Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****     Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****     Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****     software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****     without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****     all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****     permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****     documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****     advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****     software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****     The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****     software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****     and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****     special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****     whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****     in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****     arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****     this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** 
  43:tmk_core/protocol/usb_descriptor.c **** // clang-format off
  44:tmk_core/protocol/usb_descriptor.c **** 
  45:tmk_core/protocol/usb_descriptor.c **** /*
  46:tmk_core/protocol/usb_descriptor.c ****  * HID report descriptors
  47:tmk_core/protocol/usb_descriptor.c ****  */
  48:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  49:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
  50:tmk_core/protocol/usb_descriptor.c **** #    define SHARED_REPORT_STARTED
  51:tmk_core/protocol/usb_descriptor.c **** #else
  52:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] = {
  53:tmk_core/protocol/usb_descriptor.c **** #endif
  54:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
  55:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
  56:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
  57:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  58:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_KEYBOARD),
  59:tmk_core/protocol/usb_descriptor.c **** #endif
  60:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
  61:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  62:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
  63:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
  64:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  65:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  66:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  67:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  68:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  69:tmk_core/protocol/usb_descriptor.c ****         // Reserved (1 byte)
  70:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  71:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  72:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),
  73:tmk_core/protocol/usb_descriptor.c ****         // Keycodes (6 bytes)
  74:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  75:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
  76:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF),
  77:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  78:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  79:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  80:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  81:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  82:tmk_core/protocol/usb_descriptor.c **** 
  83:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
  84:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
  85:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
  86:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
  87:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  88:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  89:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  90:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
  91:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  92:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  93:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  94:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
  95:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
  96:tmk_core/protocol/usb_descriptor.c **** };
  97:tmk_core/protocol/usb_descriptor.c **** #endif
  98:tmk_core/protocol/usb_descriptor.c **** 
  99:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 100:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 101:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] = {
 102:tmk_core/protocol/usb_descriptor.c **** #    elif !defined(SHARED_REPORT_STARTED)
 103:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 104:tmk_core/protocol/usb_descriptor.c **** #        define SHARED_REPORT_STARTED
 105:tmk_core/protocol/usb_descriptor.c **** #    endif
 106:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),            // Generic Desktop
 107:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02),                 // Mouse
 108:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),            // Application
 109:tmk_core/protocol/usb_descriptor.c **** #    ifdef MOUSE_SHARED_EP
 110:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_MOUSE),
 111:tmk_core/protocol/usb_descriptor.c **** #    endif
 112:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x01),             // Pointer
 113:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00),        // Physical
 114:tmk_core/protocol/usb_descriptor.c ****             // Buttons (5 bits)
 115:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09),    // Button
 116:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01), // Button 1
 117:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05), // Button 5
 118:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 119:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 120:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 121:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 122:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 123:tmk_core/protocol/usb_descriptor.c ****             // Button padding (3 bits)
 124:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 125:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 126:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 127:tmk_core/protocol/usb_descriptor.c **** 
 128:tmk_core/protocol/usb_descriptor.c ****             // X/Y position (2 bytes)
 129:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01),    // Generic Desktop
 130:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30),         // X
 131:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31),         // Y
 132:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 133:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 134:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 135:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 136:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 137:tmk_core/protocol/usb_descriptor.c **** 
 138:tmk_core/protocol/usb_descriptor.c ****             // Vertical wheel (1 byte)
 139:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x38),         // Wheel
 140:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 141:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 142:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 143:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 144:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 145:tmk_core/protocol/usb_descriptor.c ****             // Horizontal wheel (1 byte)
 146:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C),    // Consumer
 147:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(16, 0x0238),      // AC Pan
 148:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 149:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 150:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 151:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 152:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 153:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 154:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 155:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 156:tmk_core/protocol/usb_descriptor.c **** };
 157:tmk_core/protocol/usb_descriptor.c **** #    endif
 158:tmk_core/protocol/usb_descriptor.c **** #endif
 159:tmk_core/protocol/usb_descriptor.c **** 
 160:tmk_core/protocol/usb_descriptor.c **** #if defined(SHARED_EP_ENABLE) && !defined(SHARED_REPORT_STARTED)
 161:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 162:tmk_core/protocol/usb_descriptor.c **** #endif
 163:tmk_core/protocol/usb_descriptor.c **** 
 164:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 165:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),           // Generic Desktop
 166:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80),                // System Control
 167:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 168:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 169:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01),    // Pointer
 170:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x00B7), // System Display LCD Autoscale
 171:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x01),
 172:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00B7),
 173:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 174:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 175:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 176:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 177:tmk_core/protocol/usb_descriptor.c **** 
 178:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),           // Consumer
 179:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),                // Consumer Control
 180:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 181:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 182:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01),    // Consumer Control
 183:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x02A0), // AC Desktop Show All Applications
 184:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x01),
 185:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x02A0),
 186:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 187:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 188:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 189:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 190:tmk_core/protocol/usb_descriptor.c **** #endif
 191:tmk_core/protocol/usb_descriptor.c **** 
 192:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 193:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
 194:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
 195:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
 196:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_NKRO),
 197:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
 198:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 199:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
 200:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
 201:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 202:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 203:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 204:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 205:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 206:tmk_core/protocol/usb_descriptor.c ****         // Keycodes
 207:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 208:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
 209:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, KEYBOARD_REPORT_BITS * 8 - 1),
 210:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 211:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 212:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, KEYBOARD_REPORT_BITS * 8),
 213:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 214:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 215:tmk_core/protocol/usb_descriptor.c **** 
 216:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
 217:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
 218:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
 219:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
 220:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 221:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 222:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 223:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
 224:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 225:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 226:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 227:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 228:tmk_core/protocol/usb_descriptor.c **** #endif
 229:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 230:tmk_core/protocol/usb_descriptor.c **** };
 231:tmk_core/protocol/usb_descriptor.c **** #endif
 232:tmk_core/protocol/usb_descriptor.c **** 
 233:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 234:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] = {
 235:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF60), // Vendor Defined
 236:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x61),         // Vendor Defined
 237:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 238:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 239:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x62),     // Vendor Defined
 240:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 241:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 242:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 243:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 244:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 245:tmk_core/protocol/usb_descriptor.c **** 
 246:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 247:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x63),     // Vendor Defined
 248:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 249:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 250:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 251:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 252:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 253:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 254:tmk_core/protocol/usb_descriptor.c **** };
 255:tmk_core/protocol/usb_descriptor.c **** #endif
 256:tmk_core/protocol/usb_descriptor.c **** 
 257:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 258:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] = {
 259:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), // Vendor Defined (PJRC Teensy compatible)
 260:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74),         // Vendor Defined (PJRC Teensy compatible)
 261:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 262:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 263:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x75),     // Vendor Defined
 264:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 265:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 266:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 267:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 268:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 269:tmk_core/protocol/usb_descriptor.c **** 
 270:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 271:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x76),     // Vendor Defined
 272:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 273:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 274:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 275:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 276:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 277:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 278:tmk_core/protocol/usb_descriptor.c **** };
 279:tmk_core/protocol/usb_descriptor.c **** #endif
 280:tmk_core/protocol/usb_descriptor.c **** 
 281:tmk_core/protocol/usb_descriptor.c **** /*
 282:tmk_core/protocol/usb_descriptor.c ****  * Device descriptor
 283:tmk_core/protocol/usb_descriptor.c ****  */
 284:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor = {
 285:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 286:tmk_core/protocol/usb_descriptor.c ****         .Size                   = sizeof(USB_Descriptor_Device_t),
 287:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_Device
 288:tmk_core/protocol/usb_descriptor.c ****     },
 289:tmk_core/protocol/usb_descriptor.c ****     .USBSpecification           = VERSION_BCD(1, 1, 0),
 290:tmk_core/protocol/usb_descriptor.c **** 
 291:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 292:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_IADDeviceClass,
 293:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_IADDeviceSubclass,
 294:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_IADDeviceProtocol,
 295:tmk_core/protocol/usb_descriptor.c **** #else
 296:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_NoDeviceClass,
 297:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_NoDeviceSubclass,
 298:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_NoDeviceProtocol,
 299:tmk_core/protocol/usb_descriptor.c **** #endif
 300:tmk_core/protocol/usb_descriptor.c **** 
 301:tmk_core/protocol/usb_descriptor.c ****     .Endpoint0Size              = FIXED_CONTROL_ENDPOINT_SIZE,
 302:tmk_core/protocol/usb_descriptor.c ****     // Specified in config.h
 303:tmk_core/protocol/usb_descriptor.c ****     .VendorID                   = VENDOR_ID,
 304:tmk_core/protocol/usb_descriptor.c ****     .ProductID                  = PRODUCT_ID,
 305:tmk_core/protocol/usb_descriptor.c ****     .ReleaseNumber              = DEVICE_VER,
 306:tmk_core/protocol/usb_descriptor.c ****     .ManufacturerStrIndex       = 0x01,
 307:tmk_core/protocol/usb_descriptor.c ****     .ProductStrIndex            = 0x02,
 308:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex          = 0x03,
 309:tmk_core/protocol/usb_descriptor.c ****     .NumberOfConfigurations     = FIXED_NUM_CONFIGURATIONS
 310:tmk_core/protocol/usb_descriptor.c **** };
 311:tmk_core/protocol/usb_descriptor.c **** 
 312:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
 313:tmk_core/protocol/usb_descriptor.c **** #    define USB_MAX_POWER_CONSUMPTION 500
 314:tmk_core/protocol/usb_descriptor.c **** #endif
 315:tmk_core/protocol/usb_descriptor.c **** 
 316:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_POLLING_INTERVAL_MS
 317:tmk_core/protocol/usb_descriptor.c **** #    define USB_POLLING_INTERVAL_MS 10
 318:tmk_core/protocol/usb_descriptor.c **** #endif
 319:tmk_core/protocol/usb_descriptor.c **** 
 320:tmk_core/protocol/usb_descriptor.c **** /*
 321:tmk_core/protocol/usb_descriptor.c ****  * Configuration descriptors
 322:tmk_core/protocol/usb_descriptor.c ****  */
 323:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor = {
 324:tmk_core/protocol/usb_descriptor.c ****     .Config = {
 325:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 326:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Configuration_Header_t),
 327:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Configuration
 328:tmk_core/protocol/usb_descriptor.c ****         },
 329:tmk_core/protocol/usb_descriptor.c ****         .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 330:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = TOTAL_INTERFACES,
 331:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationNumber    = 1,
 332:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationStrIndex  = NO_DESCRIPTOR,
 333:tmk_core/protocol/usb_descriptor.c ****         .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 334:tmk_core/protocol/usb_descriptor.c ****         .MaxPowerConsumption    = USB_CONFIG_POWER_MA(USB_MAX_POWER_CONSUMPTION)
 335:tmk_core/protocol/usb_descriptor.c ****     },
 336:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 337:tmk_core/protocol/usb_descriptor.c ****     /*
 338:tmk_core/protocol/usb_descriptor.c ****      * Keyboard
 339:tmk_core/protocol/usb_descriptor.c ****      */
 340:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_Interface = {
 341:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 342:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 343:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 344:tmk_core/protocol/usb_descriptor.c ****         },
 345:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = KEYBOARD_INTERFACE,
 346:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 347:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 348:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 349:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 350:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 351:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 352:tmk_core/protocol/usb_descriptor.c ****     },
 353:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_HID = {
 354:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 355:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 356:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 357:tmk_core/protocol/usb_descriptor.c ****         },
 358:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 359:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 360:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 361:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 362:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(KeyboardReport)
 363:tmk_core/protocol/usb_descriptor.c ****     },
 364:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_INEndpoint = {
 365:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 366:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 367:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 368:tmk_core/protocol/usb_descriptor.c ****         },
 369:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 370:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 371:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = KEYBOARD_EPSIZE,
 372:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 373:tmk_core/protocol/usb_descriptor.c ****     },
 374:tmk_core/protocol/usb_descriptor.c **** #endif
 375:tmk_core/protocol/usb_descriptor.c **** 
 376:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 377:tmk_core/protocol/usb_descriptor.c ****     /*
 378:tmk_core/protocol/usb_descriptor.c ****      * Raw HID
 379:tmk_core/protocol/usb_descriptor.c ****      */
 380:tmk_core/protocol/usb_descriptor.c ****     .Raw_Interface = {
 381:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 382:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 383:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 384:tmk_core/protocol/usb_descriptor.c ****         },
 385:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = RAW_INTERFACE,
 386:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 387:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 388:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 389:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 390:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 391:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 392:tmk_core/protocol/usb_descriptor.c ****     },
 393:tmk_core/protocol/usb_descriptor.c ****     .Raw_HID = {
 394:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 395:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 396:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 397:tmk_core/protocol/usb_descriptor.c ****         },
 398:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 399:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 400:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 401:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 402:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(RawReport)
 403:tmk_core/protocol/usb_descriptor.c ****     },
 404:tmk_core/protocol/usb_descriptor.c ****     .Raw_INEndpoint = {
 405:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 406:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 407:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 408:tmk_core/protocol/usb_descriptor.c ****         },
 409:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | RAW_IN_EPNUM),
 410:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 411:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 412:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 413:tmk_core/protocol/usb_descriptor.c ****     },
 414:tmk_core/protocol/usb_descriptor.c ****     .Raw_OUTEndpoint = {
 415:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 416:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 417:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 418:tmk_core/protocol/usb_descriptor.c ****         },
 419:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | RAW_OUT_EPNUM),
 420:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 421:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 422:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 423:tmk_core/protocol/usb_descriptor.c ****     },
 424:tmk_core/protocol/usb_descriptor.c **** #endif
 425:tmk_core/protocol/usb_descriptor.c **** 
 426:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 427:tmk_core/protocol/usb_descriptor.c ****     /*
 428:tmk_core/protocol/usb_descriptor.c ****      * Mouse
 429:tmk_core/protocol/usb_descriptor.c ****      */
 430:tmk_core/protocol/usb_descriptor.c ****     .Mouse_Interface  = {
 431:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 432:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 433:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 434:tmk_core/protocol/usb_descriptor.c ****         },
 435:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = MOUSE_INTERFACE,
 436:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 437:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 438:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 439:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 440:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_MouseBootProtocol,
 441:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 442:tmk_core/protocol/usb_descriptor.c ****     },
 443:tmk_core/protocol/usb_descriptor.c ****     .Mouse_HID = {
 444:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 445:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 446:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 447:tmk_core/protocol/usb_descriptor.c ****         },
 448:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 449:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 450:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 451:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 452:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(MouseReport)
 453:tmk_core/protocol/usb_descriptor.c ****     },
 454:tmk_core/protocol/usb_descriptor.c ****     .Mouse_INEndpoint = {
 455:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 456:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 457:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 458:tmk_core/protocol/usb_descriptor.c ****         },
 459:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 460:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 461:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = MOUSE_EPSIZE,
 462:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 463:tmk_core/protocol/usb_descriptor.c ****     },
 464:tmk_core/protocol/usb_descriptor.c **** #endif
 465:tmk_core/protocol/usb_descriptor.c **** 
 466:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 467:tmk_core/protocol/usb_descriptor.c ****     /*
 468:tmk_core/protocol/usb_descriptor.c ****      * Shared
 469:tmk_core/protocol/usb_descriptor.c ****      */
 470:tmk_core/protocol/usb_descriptor.c ****     .Shared_Interface = {
 471:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 472:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 473:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 474:tmk_core/protocol/usb_descriptor.c ****         },
 475:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = SHARED_INTERFACE,
 476:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 477:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 478:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 479:tmk_core/protocol/usb_descriptor.c **** #    ifdef KEYBOARD_SHARED_EP
 480:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 481:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 482:tmk_core/protocol/usb_descriptor.c **** #    else
 483:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 484:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 485:tmk_core/protocol/usb_descriptor.c **** #    endif
 486:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 487:tmk_core/protocol/usb_descriptor.c ****     },
 488:tmk_core/protocol/usb_descriptor.c ****     .Shared_HID = {
 489:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 490:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 491:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 492:tmk_core/protocol/usb_descriptor.c ****         },
 493:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 494:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 495:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 496:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 497:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(SharedReport)
 498:tmk_core/protocol/usb_descriptor.c ****     },
 499:tmk_core/protocol/usb_descriptor.c ****     .Shared_INEndpoint = {
 500:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 501:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 502:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 503:tmk_core/protocol/usb_descriptor.c ****         },
 504:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | SHARED_IN_EPNUM),
 505:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 506:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = SHARED_EPSIZE,
 507:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 508:tmk_core/protocol/usb_descriptor.c ****     },
 509:tmk_core/protocol/usb_descriptor.c **** #endif
 510:tmk_core/protocol/usb_descriptor.c **** 
 511:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 512:tmk_core/protocol/usb_descriptor.c ****     /*
 513:tmk_core/protocol/usb_descriptor.c ****      * Console
 514:tmk_core/protocol/usb_descriptor.c ****      */
 515:tmk_core/protocol/usb_descriptor.c ****     .Console_Interface = {
 516:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 517:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 518:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 519:tmk_core/protocol/usb_descriptor.c ****         },
 520:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CONSOLE_INTERFACE,
 521:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 522:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 523:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 524:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 525:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 526:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 527:tmk_core/protocol/usb_descriptor.c ****     },
 528:tmk_core/protocol/usb_descriptor.c ****     .Console_HID = {
 529:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 530:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 531:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 532:tmk_core/protocol/usb_descriptor.c ****         },
 533:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 534:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 535:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 536:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 537:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(ConsoleReport)
 538:tmk_core/protocol/usb_descriptor.c ****     },
 539:tmk_core/protocol/usb_descriptor.c ****     .Console_INEndpoint = {
 540:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 541:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 542:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 543:tmk_core/protocol/usb_descriptor.c ****         },
 544:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 545:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 546:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 547:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 548:tmk_core/protocol/usb_descriptor.c ****     },
 549:tmk_core/protocol/usb_descriptor.c ****     .Console_OUTEndpoint = {
 550:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 551:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 552:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 553:tmk_core/protocol/usb_descriptor.c ****         },
 554:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 555:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 556:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 557:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 558:tmk_core/protocol/usb_descriptor.c ****     },
 559:tmk_core/protocol/usb_descriptor.c **** #endif
 560:tmk_core/protocol/usb_descriptor.c **** 
 561:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 562:tmk_core/protocol/usb_descriptor.c ****     /*
 563:tmk_core/protocol/usb_descriptor.c ****      * MIDI
 564:tmk_core/protocol/usb_descriptor.c ****      */
 565:tmk_core/protocol/usb_descriptor.c ****     .Audio_Interface_Association = {
 566:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 567:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 568:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 569:tmk_core/protocol/usb_descriptor.c ****         },
 570:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = AC_INTERFACE,
 571:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 572:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 573:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 574:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 575:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 576:tmk_core/protocol/usb_descriptor.c ****     },
 577:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface = {
 578:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 579:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 580:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 581:tmk_core/protocol/usb_descriptor.c ****         },
 582:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AC_INTERFACE,
 583:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 584:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 0,
 585:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 586:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 587:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 588:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 589:tmk_core/protocol/usb_descriptor.c ****     },
 590:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface_SPC = {
 591:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 592:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 593:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 594:tmk_core/protocol/usb_descriptor.c ****         },
 595:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_Header,
 596:tmk_core/protocol/usb_descriptor.c ****         .ACSpecification        = VERSION_BCD(1, 0, 0),
 597:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 598:tmk_core/protocol/usb_descriptor.c ****         .InCollection           = 1,
 599:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 600:tmk_core/protocol/usb_descriptor.c ****     },
 601:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface = {
 602:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 603:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 604:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 605:tmk_core/protocol/usb_descriptor.c ****         },
 606:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 607:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 608:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 609:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 610:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_MIDIStreamingSubclass,
 611:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_StreamingProtocol,
 612:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 613:tmk_core/protocol/usb_descriptor.c ****     },
 614:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface_SPC = {
 615:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 616:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_AudioInterface_AS_t),
 617:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 618:tmk_core/protocol/usb_descriptor.c ****         },
 619:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_General,
 620:tmk_core/protocol/usb_descriptor.c ****         .AudioSpecification     = VERSION_BCD(1, 0, 0),
 621:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = offsetof(USB_Descriptor_Configuration_t, MIDI_Out_Jack_Endpoint_S
 622:tmk_core/protocol/usb_descriptor.c ****     },
 623:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Emb = {
 624:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 625:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 626:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 627:tmk_core/protocol/usb_descriptor.c ****         },
 628:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 629:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 630:tmk_core/protocol/usb_descriptor.c ****         .JackID = 0x01,
 631:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 632:tmk_core/protocol/usb_descriptor.c ****     },
 633:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Ext = {
 634:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 635:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 636:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 637:tmk_core/protocol/usb_descriptor.c ****         },
 638:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 639:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 640:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x02,
 641:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 642:tmk_core/protocol/usb_descriptor.c ****     },
 643:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Emb = {
 644:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 645:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 646:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 647:tmk_core/protocol/usb_descriptor.c ****         },
 648:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 649:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 650:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x03,
 651:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 652:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x02},
 653:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 654:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 655:tmk_core/protocol/usb_descriptor.c ****     },
 656:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Ext = {
 657:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 658:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 659:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 660:tmk_core/protocol/usb_descriptor.c ****         },
 661:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 662:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 663:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x04,
 664:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 665:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x01},
 666:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 667:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 668:tmk_core/protocol/usb_descriptor.c ****     },
 669:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint = {
 670:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 671:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 672:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 673:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 674:tmk_core/protocol/usb_descriptor.c ****             },
 675:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = MIDI_STREAM_OUT_EPADDR,
 676:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 677:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 678:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 679:tmk_core/protocol/usb_descriptor.c ****         },
 680:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 681:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 682:tmk_core/protocol/usb_descriptor.c ****     },
 683:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint_SPC = {
 684:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 685:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 686:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 687:tmk_core/protocol/usb_descriptor.c ****         },
 688:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 689:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 690:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x01}
 691:tmk_core/protocol/usb_descriptor.c ****     },
 692:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint = {
 693:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 694:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 695:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 696:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 697:tmk_core/protocol/usb_descriptor.c ****             },
 698:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = MIDI_STREAM_IN_EPADDR,
 699:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 700:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 701:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 702:tmk_core/protocol/usb_descriptor.c ****         },
 703:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 704:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 705:tmk_core/protocol/usb_descriptor.c ****     },
 706:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint_SPC = {
 707:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 708:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 709:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 710:tmk_core/protocol/usb_descriptor.c ****         },
 711:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 712:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 713:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x03}
 714:tmk_core/protocol/usb_descriptor.c ****     },
 715:tmk_core/protocol/usb_descriptor.c **** #endif
 716:tmk_core/protocol/usb_descriptor.c **** 
 717:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 718:tmk_core/protocol/usb_descriptor.c ****     /*
 719:tmk_core/protocol/usb_descriptor.c ****      * Virtual Serial
 720:tmk_core/protocol/usb_descriptor.c ****      */
 721:tmk_core/protocol/usb_descriptor.c ****     .CDC_Interface_Association = {
 722:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 723:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 724:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 725:tmk_core/protocol/usb_descriptor.c ****         },
 726:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = CCI_INTERFACE,
 727:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 728:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 729:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 730:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 731:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 732:tmk_core/protocol/usb_descriptor.c ****     },
 733:tmk_core/protocol/usb_descriptor.c ****     .CDC_CCI_Interface = {
 734:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 735:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 736:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 737:tmk_core/protocol/usb_descriptor.c ****         },
 738:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CCI_INTERFACE,
 739:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 740:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 741:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 742:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 743:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 744:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 745:tmk_core/protocol/usb_descriptor.c ****     },
 746:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Header = {
 747:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 748:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalHeader_t),
 749:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 750:tmk_core/protocol/usb_descriptor.c ****         },
 751:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x00,
 752:tmk_core/protocol/usb_descriptor.c ****         .CDCSpecification       = VERSION_BCD(1, 1, 0),
 753:tmk_core/protocol/usb_descriptor.c ****     },
 754:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_ACM = {
 755:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 756:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalACM_t),
 757:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 758:tmk_core/protocol/usb_descriptor.c ****         },
 759:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x02,
 760:tmk_core/protocol/usb_descriptor.c ****         .Capabilities           = 0x02,
 761:tmk_core/protocol/usb_descriptor.c ****     },
 762:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Union = {
 763:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 764:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalUnion_t),
 765:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 766:tmk_core/protocol/usb_descriptor.c ****         },
 767:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x06,
 768:tmk_core/protocol/usb_descriptor.c ****         .MasterInterfaceNumber  = CCI_INTERFACE,
 769:tmk_core/protocol/usb_descriptor.c ****         .SlaveInterfaceNumber   = CDI_INTERFACE,
 770:tmk_core/protocol/usb_descriptor.c ****     },
 771:tmk_core/protocol/usb_descriptor.c ****     .CDC_NotificationEndpoint = {
 772:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 773:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 774:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 775:tmk_core/protocol/usb_descriptor.c ****         },
 776:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = CDC_NOTIFICATION_EPADDR,
 777:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 778:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 779:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0xFF
 780:tmk_core/protocol/usb_descriptor.c ****     },
 781:tmk_core/protocol/usb_descriptor.c ****     .CDC_DCI_Interface = {
 782:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 783:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 784:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 785:tmk_core/protocol/usb_descriptor.c ****         },
 786:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CDI_INTERFACE,
 787:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 788:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 789:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCDataClass,
 790:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_NoDataSubclass,
 791:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_NoDataProtocol,
 792:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 793:tmk_core/protocol/usb_descriptor.c ****     },
 794:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataOutEndpoint = {
 795:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 796:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 797:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 798:tmk_core/protocol/usb_descriptor.c ****         },
 799:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = CDC_OUT_EPADDR,
 800:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 801:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 802:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 803:tmk_core/protocol/usb_descriptor.c ****     },
 804:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataInEndpoint = {
 805:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 806:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 807:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 808:tmk_core/protocol/usb_descriptor.c ****         },
 809:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = CDC_IN_EPADDR,
 810:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 811:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 812:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 813:tmk_core/protocol/usb_descriptor.c ****     },
 814:tmk_core/protocol/usb_descriptor.c **** #endif
 815:tmk_core/protocol/usb_descriptor.c **** };
 816:tmk_core/protocol/usb_descriptor.c **** 
 817:tmk_core/protocol/usb_descriptor.c **** /*
 818:tmk_core/protocol/usb_descriptor.c ****  * String descriptors
 819:tmk_core/protocol/usb_descriptor.c ****  */
 820:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString = {
 821:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 822:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(1),
 823:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 824:tmk_core/protocol/usb_descriptor.c ****     },
 825:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = {LANGUAGE_ID_ENG}
 826:tmk_core/protocol/usb_descriptor.c **** };
 827:tmk_core/protocol/usb_descriptor.c **** 
 828:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString = {
 829:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 830:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(MANUFACTURER)) - 1), // Subtract 1 for 
 831:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 832:tmk_core/protocol/usb_descriptor.c ****     },
 833:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(MANUFACTURER)
 834:tmk_core/protocol/usb_descriptor.c **** };
 835:tmk_core/protocol/usb_descriptor.c **** 
 836:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString = {
 837:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 838:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(PRODUCT)) - 1), // Subtract 1 for null 
 839:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 840:tmk_core/protocol/usb_descriptor.c ****     },
 841:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(PRODUCT)
 842:tmk_core/protocol/usb_descriptor.c **** };
 843:tmk_core/protocol/usb_descriptor.c **** 
 844:tmk_core/protocol/usb_descriptor.c **** #ifndef SERIAL_NUMBER
 845:tmk_core/protocol/usb_descriptor.c **** #    define SERIAL_NUMBER 0
 846:tmk_core/protocol/usb_descriptor.c **** #endif
 847:tmk_core/protocol/usb_descriptor.c **** 
 848:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString = {
 849:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 850:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(SERIAL_NUMBER)) - 1), // Subtract 1 for
 851:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 852:tmk_core/protocol/usb_descriptor.c ****     },
 853:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(SERIAL_NUMBER)
 854:tmk_core/protocol/usb_descriptor.c **** };
 855:tmk_core/protocol/usb_descriptor.c **** 
 856:tmk_core/protocol/usb_descriptor.c **** // clang-format on
 857:tmk_core/protocol/usb_descriptor.c **** 
 858:tmk_core/protocol/usb_descriptor.c **** /**
 859:tmk_core/protocol/usb_descriptor.c ****  * This function is called by the library when in device mode, and must be overridden (see library 
 860:tmk_core/protocol/usb_descriptor.c ****  * documentation) by the application code so that the address and size of a requested descriptor ca
 861:tmk_core/protocol/usb_descriptor.c ****  * to the USB library. When the device receives a Get Descriptor request on the control endpoint, t
 862:tmk_core/protocol/usb_descriptor.c ****  * is called so that the descriptor details can be passed back and the appropriate descriptor sent 
 863:tmk_core/protocol/usb_descriptor.c ****  * USB host.
 864:tmk_core/protocol/usb_descriptor.c ****  */
 865:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const void** const Descri
  28              		.loc 1 865 113 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 866:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorType  = (wValue >> 8);
  33              		.loc 1 866 5 view .LVU1
  34              		.loc 1 866 19 is_stmt 0 view .LVU2
  35 0000 030A     		lsrs	r3, r0, #8
  36              	.LVL1:
 867:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorIndex = (wValue & 0xFF);
  37              		.loc 1 867 5 is_stmt 1 view .LVU3
 868:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
  38              		.loc 1 868 5 view .LVU4
 869:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  39              		.loc 1 869 5 view .LVU5
 870:tmk_core/protocol/usb_descriptor.c **** 
 871:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType) {
  40              		.loc 1 871 5 view .LVU6
  41 0002 032B     		cmp	r3, #3
  42 0004 12D0     		beq	.L2
  43 0006 06D8     		bhi	.L3
  44 0008 012B     		cmp	r3, #1
  45 000a 20D0     		beq	.L7
  46 000c 022B     		cmp	r3, #2
  47 000e 21D0     		beq	.L8
  48              	.LVL2:
  49              	.L11:
  50              		.loc 1 871 5 is_stmt 0 view .LVU7
  51 0010 0020     		movs	r0, #0
  52 0012 0300     		movs	r3, r0
  53              	.LVL3:
  54              		.loc 1 871 5 view .LVU8
  55 0014 19E0     		b	.L4
  56              	.LVL4:
  57              	.L3:
  58              		.loc 1 871 5 view .LVU9
  59 0016 212B     		cmp	r3, #33
  60 0018 11D0     		beq	.L5
  61 001a 222B     		cmp	r3, #34
  62 001c F8D1     		bne	.L11
 872:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 873:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 874:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 875:tmk_core/protocol/usb_descriptor.c **** 
 876:tmk_core/protocol/usb_descriptor.c ****             break;
 877:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 878:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 879:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 880:tmk_core/protocol/usb_descriptor.c **** 
 881:tmk_core/protocol/usb_descriptor.c ****             break;
 882:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 883:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex) {
 884:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 885:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 886:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 887:tmk_core/protocol/usb_descriptor.c **** 
 888:tmk_core/protocol/usb_descriptor.c ****                     break;
 889:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
 890:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
 891:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 892:tmk_core/protocol/usb_descriptor.c **** 
 893:tmk_core/protocol/usb_descriptor.c ****                     break;
 894:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
 895:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
 896:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 897:tmk_core/protocol/usb_descriptor.c **** 
 898:tmk_core/protocol/usb_descriptor.c ****                     break;
 899:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
 900:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
 901:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 902:tmk_core/protocol/usb_descriptor.c **** 
 903:tmk_core/protocol/usb_descriptor.c ****                     break;
 904:tmk_core/protocol/usb_descriptor.c ****             }
 905:tmk_core/protocol/usb_descriptor.c **** 
 906:tmk_core/protocol/usb_descriptor.c ****             break;
 907:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
 908:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 909:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 910:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 911:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Keyboard_HID;
 912:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 913:tmk_core/protocol/usb_descriptor.c ****                     break;
 914:tmk_core/protocol/usb_descriptor.c **** #endif
 915:tmk_core/protocol/usb_descriptor.c **** 
 916:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 917:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 918:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Mouse_HID;
 919:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 920:tmk_core/protocol/usb_descriptor.c **** 
 921:tmk_core/protocol/usb_descriptor.c ****                     break;
 922:tmk_core/protocol/usb_descriptor.c **** #endif
 923:tmk_core/protocol/usb_descriptor.c **** 
 924:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 925:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 926:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Shared_HID;
 927:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 928:tmk_core/protocol/usb_descriptor.c **** 
 929:tmk_core/protocol/usb_descriptor.c ****                     break;
 930:tmk_core/protocol/usb_descriptor.c **** #endif
 931:tmk_core/protocol/usb_descriptor.c **** 
 932:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 933:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 934:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Raw_HID;
 935:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 936:tmk_core/protocol/usb_descriptor.c **** 
 937:tmk_core/protocol/usb_descriptor.c ****                     break;
 938:tmk_core/protocol/usb_descriptor.c **** #endif
 939:tmk_core/protocol/usb_descriptor.c **** 
 940:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 941:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 942:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Console_HID;
 943:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 944:tmk_core/protocol/usb_descriptor.c **** 
 945:tmk_core/protocol/usb_descriptor.c ****                     break;
 946:tmk_core/protocol/usb_descriptor.c **** #endif
 947:tmk_core/protocol/usb_descriptor.c ****             }
 948:tmk_core/protocol/usb_descriptor.c **** 
 949:tmk_core/protocol/usb_descriptor.c ****             break;
 950:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
 951:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
  63              		.loc 1 951 13 is_stmt 1 view .LVU10
  64 001e 0229     		cmp	r1, #2
  65 0020 F6D8     		bhi	.L11
  66 0022 0E4B     		ldr	r3, .L13
  67              	.LVL5:
  68              		.loc 1 951 13 is_stmt 0 view .LVU11
  69 0024 8800     		lsls	r0, r1, #2
  70              	.LVL6:
  71              		.loc 1 951 13 view .LVU12
  72 0026 C358     		ldr	r3, [r0, r3]
  73 0028 0D48     		ldr	r0, .L13+4
  74 002a 06E0     		b	.L12
  75              	.LVL7:
  76              	.L2:
 867:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
  77              		.loc 1 867 19 view .LVU13
  78 002c C0B2     		uxtb	r0, r0
  79              	.LVL8:
 883:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  80              		.loc 1 883 13 is_stmt 1 view .LVU14
  81 002e 0328     		cmp	r0, #3
  82 0030 EED8     		bhi	.L11
  83 0032 0C4B     		ldr	r3, .L13+8
  84              	.LVL9:
 883:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  85              		.loc 1 883 13 is_stmt 0 view .LVU15
  86 0034 8100     		lsls	r1, r0, #2
  87              	.LVL10:
 883:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  88              		.loc 1 883 13 view .LVU16
  89 0036 CB58     		ldr	r3, [r1, r3]
  90 0038 0B49     		ldr	r1, .L13+12
  91              	.LVL11:
  92              	.L12:
 883:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  93              		.loc 1 883 13 view .LVU17
  94 003a 405C     		ldrb	r0, [r0, r1]
  95 003c 05E0     		b	.L4
  96              	.LVL12:
  97              	.L5:
 908:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
  98              		.loc 1 908 13 is_stmt 1 view .LVU18
  99 003e 0229     		cmp	r1, #2
 100 0040 E6D8     		bhi	.L11
 871:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 101              		.loc 1 871 5 is_stmt 0 view .LVU19
 102 0042 0920     		movs	r0, #9
 103              	.LVL13:
 871:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 104              		.loc 1 871 5 view .LVU20
 105 0044 094B     		ldr	r3, .L13+16
 106              	.LVL14:
 871:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 107              		.loc 1 871 5 view .LVU21
 108 0046 8900     		lsls	r1, r1, #2
 109              	.LVL15:
 871:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 110              		.loc 1 871 5 view .LVU22
 111 0048 CB58     		ldr	r3, [r1, r3]
 112              	.L4:
 113              	.LVL16:
 952:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 953:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 954:tmk_core/protocol/usb_descriptor.c ****                     Address = &KeyboardReport;
 955:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
 956:tmk_core/protocol/usb_descriptor.c **** 
 957:tmk_core/protocol/usb_descriptor.c ****                     break;
 958:tmk_core/protocol/usb_descriptor.c **** #endif
 959:tmk_core/protocol/usb_descriptor.c **** 
 960:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 961:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 962:tmk_core/protocol/usb_descriptor.c ****                     Address = &MouseReport;
 963:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(MouseReport);
 964:tmk_core/protocol/usb_descriptor.c **** 
 965:tmk_core/protocol/usb_descriptor.c ****                     break;
 966:tmk_core/protocol/usb_descriptor.c **** #endif
 967:tmk_core/protocol/usb_descriptor.c **** 
 968:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 969:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 970:tmk_core/protocol/usb_descriptor.c ****                     Address = &SharedReport;
 971:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
 972:tmk_core/protocol/usb_descriptor.c **** 
 973:tmk_core/protocol/usb_descriptor.c ****                     break;
 974:tmk_core/protocol/usb_descriptor.c **** #endif
 975:tmk_core/protocol/usb_descriptor.c **** 
 976:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 977:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 978:tmk_core/protocol/usb_descriptor.c ****                     Address = &RawReport;
 979:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(RawReport);
 980:tmk_core/protocol/usb_descriptor.c **** 
 981:tmk_core/protocol/usb_descriptor.c ****                     break;
 982:tmk_core/protocol/usb_descriptor.c **** #endif
 983:tmk_core/protocol/usb_descriptor.c **** 
 984:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 985:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 986:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConsoleReport;
 987:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(ConsoleReport);
 988:tmk_core/protocol/usb_descriptor.c **** 
 989:tmk_core/protocol/usb_descriptor.c ****                     break;
 990:tmk_core/protocol/usb_descriptor.c **** #endif
 991:tmk_core/protocol/usb_descriptor.c ****             }
 992:tmk_core/protocol/usb_descriptor.c **** 
 993:tmk_core/protocol/usb_descriptor.c ****             break;
 994:tmk_core/protocol/usb_descriptor.c ****     }
 995:tmk_core/protocol/usb_descriptor.c **** 
 996:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
 114              		.loc 1 996 5 is_stmt 1 view .LVU23
 115              		.loc 1 996 24 is_stmt 0 view .LVU24
 116 004a 1360     		str	r3, [r2]
 997:tmk_core/protocol/usb_descriptor.c **** 
 998:tmk_core/protocol/usb_descriptor.c ****     return Size;
 117              		.loc 1 998 5 is_stmt 1 view .LVU25
 999:tmk_core/protocol/usb_descriptor.c **** }
 118              		.loc 1 999 1 is_stmt 0 view .LVU26
 119              		@ sp needed
 120 004c 7047     		bx	lr
 121              	.LVL17:
 122              	.L7:
 874:tmk_core/protocol/usb_descriptor.c **** 
 123              		.loc 1 874 21 view .LVU27
 124 004e 1220     		movs	r0, #18
 125              	.LVL18:
 873:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 126              		.loc 1 873 21 view .LVU28
 127 0050 074B     		ldr	r3, .L13+20
 128              	.LVL19:
 873:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 129              		.loc 1 873 21 view .LVU29
 130 0052 FAE7     		b	.L4
 131              	.LVL20:
 132              	.L8:
 879:tmk_core/protocol/usb_descriptor.c **** 
 133              		.loc 1 879 21 view .LVU30
 134 0054 5B20     		movs	r0, #91
 135              	.LVL21:
 878:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 136              		.loc 1 878 21 view .LVU31
 137 0056 074B     		ldr	r3, .L13+24
 138              	.LVL22:
 878:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 139              		.loc 1 878 21 view .LVU32
 140 0058 F7E7     		b	.L4
 141              	.L14:
 142 005a C046     		.align	2
 143              	.L13:
 144 005c 00000000 		.word	.LANCHOR5
 145 0060 00000000 		.word	.LANCHOR6
 146 0064 00000000 		.word	.LANCHOR2
 147 0068 00000000 		.word	.LANCHOR3
 148 006c 00000000 		.word	.LANCHOR4
 149 0070 00000000 		.word	.LANCHOR0
 150 0074 00000000 		.word	.LANCHOR1
 151              		.cfi_endproc
 152              	.LFE188:
 154              		.global	SerialNumberString
 155              		.global	ProductString
 156              		.global	ManufacturerString
 157              		.global	LanguageString
 158              		.global	ConfigurationDescriptor
 159              		.global	DeviceDescriptor
 160              		.global	ConsoleReport
 161              		.global	SharedReport
 162              		.global	KeyboardReport
 163              		.section	.rodata.CSWTCH.0,"a"
 164              		.align	2
 165              		.set	.LANCHOR2,. + 0
 168              	CSWTCH.0:
 169 0000 00000000 		.word	LanguageString
 170 0004 00000000 		.word	ManufacturerString
 171 0008 00000000 		.word	ProductString
 172 000c 00000000 		.word	SerialNumberString
 173              		.section	.rodata.CSWTCH.1,"a"
 174              		.set	.LANCHOR3,. + 0
 177              	CSWTCH.1:
 178 0000 04       		.byte	4
 179 0001 14       		.byte	20
 180 0002 0C       		.byte	12
 181 0003 04       		.byte	4
 182              		.section	.rodata.CSWTCH.2,"a"
 183              		.align	2
 184              		.set	.LANCHOR4,. + 0
 187              	CSWTCH.2:
 188 0000 12000000 		.word	ConfigurationDescriptor+18
 189 0004 2B000000 		.word	ConfigurationDescriptor+43
 190 0008 44000000 		.word	ConfigurationDescriptor+68
 191              		.section	.rodata.CSWTCH.3,"a"
 192              		.align	2
 193              		.set	.LANCHOR5,. + 0
 196              	CSWTCH.3:
 197 0000 00000000 		.word	KeyboardReport
 198 0004 00000000 		.word	SharedReport
 199 0008 00000000 		.word	ConsoleReport
 200              		.section	.rodata.CSWTCH.4,"a"
 201              		.set	.LANCHOR6,. + 0
 204              	CSWTCH.4:
 205 0000 40       		.byte	64
 206 0001 BC       		.byte	-68
 207 0002 22       		.byte	34
 208              		.section	.rodata.ConfigurationDescriptor,"a"
 209              		.set	.LANCHOR1,. + 0
 212              	ConfigurationDescriptor:
 213 0000 09       		.byte	9
 214 0001 02       		.byte	2
 215 0002 5B00     		.2byte	91
 216 0004 03       		.byte	3
 217 0005 01       		.byte	1
 218 0006 00       		.byte	0
 219 0007 A0       		.byte	-96
 220 0008 FA       		.byte	-6
 221 0009 09       		.byte	9
 222 000a 04       		.byte	4
 223 000b 00       		.byte	0
 224 000c 00       		.byte	0
 225 000d 01       		.byte	1
 226 000e 03       		.byte	3
 227 000f 01       		.byte	1
 228 0010 01       		.byte	1
 229 0011 00       		.byte	0
 230 0012 09       		.byte	9
 231 0013 21       		.byte	33
 232 0014 1101     		.2byte	273
 233 0016 00       		.byte	0
 234 0017 01       		.byte	1
 235 0018 22       		.byte	34
 236 0019 4000     		.2byte	64
 237 001b 07       		.byte	7
 238 001c 05       		.byte	5
 239 001d 81       		.byte	-127
 240 001e 03       		.byte	3
 241 001f 0800     		.2byte	8
 242 0021 0A       		.byte	10
 243 0022 09       		.byte	9
 244 0023 04       		.byte	4
 245 0024 01       		.byte	1
 246 0025 00       		.byte	0
 247 0026 01       		.byte	1
 248 0027 03       		.byte	3
 249 0028 00       		.byte	0
 250 0029 00       		.byte	0
 251 002a 00       		.byte	0
 252 002b 09       		.byte	9
 253 002c 21       		.byte	33
 254 002d 1101     		.2byte	273
 255 002f 00       		.byte	0
 256 0030 01       		.byte	1
 257 0031 22       		.byte	34
 258 0032 BC00     		.2byte	188
 259 0034 07       		.byte	7
 260 0035 05       		.byte	5
 261 0036 82       		.byte	-126
 262 0037 03       		.byte	3
 263 0038 2000     		.2byte	32
 264 003a 0A       		.byte	10
 265 003b 09       		.byte	9
 266 003c 04       		.byte	4
 267 003d 02       		.byte	2
 268 003e 00       		.byte	0
 269 003f 02       		.byte	2
 270 0040 03       		.byte	3
 271 0041 00       		.byte	0
 272 0042 00       		.byte	0
 273 0043 00       		.byte	0
 274 0044 09       		.byte	9
 275 0045 21       		.byte	33
 276 0046 1101     		.2byte	273
 277 0048 00       		.byte	0
 278 0049 01       		.byte	1
 279 004a 22       		.byte	34
 280 004b 2200     		.2byte	34
 281 004d 07       		.byte	7
 282 004e 05       		.byte	5
 283 004f 83       		.byte	-125
 284 0050 03       		.byte	3
 285 0051 2000     		.2byte	32
 286 0053 01       		.byte	1
 287 0054 07       		.byte	7
 288 0055 05       		.byte	5
 289 0056 04       		.byte	4
 290 0057 03       		.byte	3
 291 0058 2000     		.2byte	32
 292 005a 01       		.byte	1
 293              		.section	.rodata.ConsoleReport,"a"
 296              	ConsoleReport:
 297 0000 06       		.byte	6
 298 0001 31       		.byte	49
 299 0002 FF       		.byte	-1
 300 0003 09       		.byte	9
 301 0004 74       		.byte	116
 302 0005 A1       		.byte	-95
 303 0006 01       		.byte	1
 304 0007 09       		.byte	9
 305 0008 75       		.byte	117
 306 0009 15       		.byte	21
 307 000a 00       		.byte	0
 308 000b 26       		.byte	38
 309 000c FF       		.byte	-1
 310 000d 00       		.byte	0
 311 000e 95       		.byte	-107
 312 000f 20       		.byte	32
 313 0010 75       		.byte	117
 314 0011 08       		.byte	8
 315 0012 81       		.byte	-127
 316 0013 02       		.byte	2
 317 0014 09       		.byte	9
 318 0015 76       		.byte	118
 319 0016 15       		.byte	21
 320 0017 00       		.byte	0
 321 0018 26       		.byte	38
 322 0019 FF       		.byte	-1
 323 001a 00       		.byte	0
 324 001b 95       		.byte	-107
 325 001c 20       		.byte	32
 326 001d 75       		.byte	117
 327 001e 08       		.byte	8
 328 001f 91       		.byte	-111
 329 0020 02       		.byte	2
 330 0021 C0       		.byte	-64
 331              		.section	.rodata.DeviceDescriptor,"a"
 332              		.set	.LANCHOR0,. + 0
 335              	DeviceDescriptor:
 336 0000 12       		.byte	18
 337 0001 01       		.byte	1
 338 0002 1001     		.2byte	272
 339 0004 00       		.byte	0
 340 0005 00       		.byte	0
 341 0006 00       		.byte	0
 342 0007 40       		.byte	64
 343 0008 5901     		.2byte	345
 344 000a 1CA7     		.2byte	-22756
 345 000c 0100     		.2byte	1
 346 000e 01       		.byte	1
 347 000f 02       		.byte	2
 348 0010 03       		.byte	3
 349 0011 01       		.byte	1
 350              		.section	.rodata.KeyboardReport,"a"
 353              	KeyboardReport:
 354 0000 05       		.byte	5
 355 0001 01       		.byte	1
 356 0002 09       		.byte	9
 357 0003 06       		.byte	6
 358 0004 A1       		.byte	-95
 359 0005 01       		.byte	1
 360 0006 05       		.byte	5
 361 0007 07       		.byte	7
 362 0008 19       		.byte	25
 363 0009 E0       		.byte	-32
 364 000a 29       		.byte	41
 365 000b E7       		.byte	-25
 366 000c 15       		.byte	21
 367 000d 00       		.byte	0
 368 000e 25       		.byte	37
 369 000f 01       		.byte	1
 370 0010 95       		.byte	-107
 371 0011 08       		.byte	8
 372 0012 75       		.byte	117
 373 0013 01       		.byte	1
 374 0014 81       		.byte	-127
 375 0015 02       		.byte	2
 376 0016 95       		.byte	-107
 377 0017 01       		.byte	1
 378 0018 75       		.byte	117
 379 0019 08       		.byte	8
 380 001a 81       		.byte	-127
 381 001b 01       		.byte	1
 382 001c 05       		.byte	5
 383 001d 07       		.byte	7
 384 001e 19       		.byte	25
 385 001f 00       		.byte	0
 386 0020 29       		.byte	41
 387 0021 FF       		.byte	-1
 388 0022 15       		.byte	21
 389 0023 00       		.byte	0
 390 0024 26       		.byte	38
 391 0025 FF       		.byte	-1
 392 0026 00       		.byte	0
 393 0027 95       		.byte	-107
 394 0028 06       		.byte	6
 395 0029 75       		.byte	117
 396 002a 08       		.byte	8
 397 002b 81       		.byte	-127
 398 002c 00       		.byte	0
 399 002d 05       		.byte	5
 400 002e 08       		.byte	8
 401 002f 19       		.byte	25
 402 0030 01       		.byte	1
 403 0031 29       		.byte	41
 404 0032 05       		.byte	5
 405 0033 95       		.byte	-107
 406 0034 05       		.byte	5
 407 0035 75       		.byte	117
 408 0036 01       		.byte	1
 409 0037 91       		.byte	-111
 410 0038 02       		.byte	2
 411 0039 95       		.byte	-107
 412 003a 01       		.byte	1
 413 003b 75       		.byte	117
 414 003c 03       		.byte	3
 415 003d 91       		.byte	-111
 416 003e 01       		.byte	1
 417 003f C0       		.byte	-64
 418              		.section	.rodata.LanguageString,"a"
 421              	LanguageString:
 422 0000 04       		.byte	4
 423 0001 03       		.byte	3
 424 0002 0904     		.2byte	1033
 425              		.section	.rodata.ManufacturerString,"a"
 428              	ManufacturerString:
 429 0000 14       		.byte	20
 430 0001 03       		.byte	3
 431 0002 50007200 		.ascii	"P\000r\000o\000j\000e\000c\000t\000K\000B\000\000\000"
 431      6F006A00 
 431      65006300 
 431      74004B00 
 431      42000000 
 432              		.section	.rodata.ProductString,"a"
 435              	ProductString:
 436 0000 0C       		.byte	12
 437 0001 03       		.byte	3
 438 0002 41006C00 		.ascii	"A\000l\000i\000c\000e\000\000\000"
 438      69006300 
 438      65000000 
 439              		.section	.rodata.SerialNumberString,"a"
 442              	SerialNumberString:
 443 0000 04       		.byte	4
 444 0001 03       		.byte	3
 445 0002 30000000 		.ascii	"0\000\000\000"
 446              		.section	.rodata.SharedReport,"a"
 449              	SharedReport:
 450 0000 05       		.byte	5
 451 0001 01       		.byte	1
 452 0002 09       		.byte	9
 453 0003 02       		.byte	2
 454 0004 A1       		.byte	-95
 455 0005 01       		.byte	1
 456 0006 85       		.byte	-123
 457 0007 02       		.byte	2
 458 0008 09       		.byte	9
 459 0009 01       		.byte	1
 460 000a A1       		.byte	-95
 461 000b 00       		.byte	0
 462 000c 05       		.byte	5
 463 000d 09       		.byte	9
 464 000e 19       		.byte	25
 465 000f 01       		.byte	1
 466 0010 29       		.byte	41
 467 0011 05       		.byte	5
 468 0012 15       		.byte	21
 469 0013 00       		.byte	0
 470 0014 25       		.byte	37
 471 0015 01       		.byte	1
 472 0016 95       		.byte	-107
 473 0017 05       		.byte	5
 474 0018 75       		.byte	117
 475 0019 01       		.byte	1
 476 001a 81       		.byte	-127
 477 001b 02       		.byte	2
 478 001c 95       		.byte	-107
 479 001d 01       		.byte	1
 480 001e 75       		.byte	117
 481 001f 03       		.byte	3
 482 0020 81       		.byte	-127
 483 0021 01       		.byte	1
 484 0022 05       		.byte	5
 485 0023 01       		.byte	1
 486 0024 09       		.byte	9
 487 0025 30       		.byte	48
 488 0026 09       		.byte	9
 489 0027 31       		.byte	49
 490 0028 15       		.byte	21
 491 0029 81       		.byte	-127
 492 002a 25       		.byte	37
 493 002b 7F       		.byte	127
 494 002c 95       		.byte	-107
 495 002d 02       		.byte	2
 496 002e 75       		.byte	117
 497 002f 08       		.byte	8
 498 0030 81       		.byte	-127
 499 0031 06       		.byte	6
 500 0032 09       		.byte	9
 501 0033 38       		.byte	56
 502 0034 15       		.byte	21
 503 0035 81       		.byte	-127
 504 0036 25       		.byte	37
 505 0037 7F       		.byte	127
 506 0038 95       		.byte	-107
 507 0039 01       		.byte	1
 508 003a 75       		.byte	117
 509 003b 08       		.byte	8
 510 003c 81       		.byte	-127
 511 003d 06       		.byte	6
 512 003e 05       		.byte	5
 513 003f 0C       		.byte	12
 514 0040 0A       		.byte	10
 515 0041 38       		.byte	56
 516 0042 02       		.byte	2
 517 0043 15       		.byte	21
 518 0044 81       		.byte	-127
 519 0045 25       		.byte	37
 520 0046 7F       		.byte	127
 521 0047 95       		.byte	-107
 522 0048 01       		.byte	1
 523 0049 75       		.byte	117
 524 004a 08       		.byte	8
 525 004b 81       		.byte	-127
 526 004c 06       		.byte	6
 527 004d C0       		.byte	-64
 528 004e C0       		.byte	-64
 529 004f 05       		.byte	5
 530 0050 01       		.byte	1
 531 0051 09       		.byte	9
 532 0052 80       		.byte	-128
 533 0053 A1       		.byte	-95
 534 0054 01       		.byte	1
 535 0055 85       		.byte	-123
 536 0056 03       		.byte	3
 537 0057 19       		.byte	25
 538 0058 01       		.byte	1
 539 0059 2A       		.byte	42
 540 005a B7       		.byte	-73
 541 005b 00       		.byte	0
 542 005c 15       		.byte	21
 543 005d 01       		.byte	1
 544 005e 26       		.byte	38
 545 005f B7       		.byte	-73
 546 0060 00       		.byte	0
 547 0061 95       		.byte	-107
 548 0062 01       		.byte	1
 549 0063 75       		.byte	117
 550 0064 10       		.byte	16
 551 0065 81       		.byte	-127
 552 0066 00       		.byte	0
 553 0067 C0       		.byte	-64
 554 0068 05       		.byte	5
 555 0069 0C       		.byte	12
 556 006a 09       		.byte	9
 557 006b 01       		.byte	1
 558 006c A1       		.byte	-95
 559 006d 01       		.byte	1
 560 006e 85       		.byte	-123
 561 006f 04       		.byte	4
 562 0070 19       		.byte	25
 563 0071 01       		.byte	1
 564 0072 2A       		.byte	42
 565 0073 A0       		.byte	-96
 566 0074 02       		.byte	2
 567 0075 15       		.byte	21
 568 0076 01       		.byte	1
 569 0077 26       		.byte	38
 570 0078 A0       		.byte	-96
 571 0079 02       		.byte	2
 572 007a 95       		.byte	-107
 573 007b 01       		.byte	1
 574 007c 75       		.byte	117
 575 007d 10       		.byte	16
 576 007e 81       		.byte	-127
 577 007f 00       		.byte	0
 578 0080 C0       		.byte	-64
 579 0081 05       		.byte	5
 580 0082 01       		.byte	1
 581 0083 09       		.byte	9
 582 0084 06       		.byte	6
 583 0085 A1       		.byte	-95
 584 0086 01       		.byte	1
 585 0087 85       		.byte	-123
 586 0088 05       		.byte	5
 587 0089 05       		.byte	5
 588 008a 07       		.byte	7
 589 008b 19       		.byte	25
 590 008c E0       		.byte	-32
 591 008d 29       		.byte	41
 592 008e E7       		.byte	-25
 593 008f 15       		.byte	21
 594 0090 00       		.byte	0
 595 0091 25       		.byte	37
 596 0092 01       		.byte	1
 597 0093 95       		.byte	-107
 598 0094 08       		.byte	8
 599 0095 75       		.byte	117
 600 0096 01       		.byte	1
 601 0097 81       		.byte	-127
 602 0098 02       		.byte	2
 603 0099 05       		.byte	5
 604 009a 07       		.byte	7
 605 009b 19       		.byte	25
 606 009c 00       		.byte	0
 607 009d 29       		.byte	41
 608 009e EF       		.byte	-17
 609 009f 15       		.byte	21
 610 00a0 00       		.byte	0
 611 00a1 25       		.byte	37
 612 00a2 01       		.byte	1
 613 00a3 95       		.byte	-107
 614 00a4 F0       		.byte	-16
 615 00a5 75       		.byte	117
 616 00a6 01       		.byte	1
 617 00a7 81       		.byte	-127
 618 00a8 02       		.byte	2
 619 00a9 05       		.byte	5
 620 00aa 08       		.byte	8
 621 00ab 19       		.byte	25
 622 00ac 01       		.byte	1
 623 00ad 29       		.byte	41
 624 00ae 05       		.byte	5
 625 00af 95       		.byte	-107
 626 00b0 05       		.byte	5
 627 00b1 75       		.byte	117
 628 00b2 01       		.byte	1
 629 00b3 91       		.byte	-111
 630 00b4 02       		.byte	2
 631 00b5 95       		.byte	-107
 632 00b6 01       		.byte	1
 633 00b7 75       		.byte	117
 634 00b8 03       		.byte	3
 635 00b9 91       		.byte	-111
 636 00ba 01       		.byte	1
 637 00bb C0       		.byte	-64
 638              		.text
 639              	.Letext0:
 640              		.file 2 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_
 641              		.file 3 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdi
 642              		.file 4 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\stdint.h"
 643              		.file 5 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\lib\\gcc\\arm-none-eabi\\8.3.1\\in
 644              		.file 6 "tmk_core/common/report.h"
 645              		.file 7 "./lib/lufa/LUFA/Drivers/USB/Class/Common/../../Core/StdDescriptors.h"
 646              		.file 8 "./lib/lufa/LUFA/Drivers/USB/Class/Common/HIDClassCommon.h"
 647              		.file 9 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 648              		.file 10 "./lib/chibios/os/rt/include/chsystypes.h"
 649              		.file 11 "./lib/chibios/os/rt/include/chschd.h"
 650              		.file 12 "./lib/chibios/os/rt/include/chtime.h"
 651              		.file 13 "./lib/chibios/os/common/ext/ST/STM32F0xx/system_stm32f0xx.h"
 652              		.file 14 "./lib/chibios/os/common/ext/ST/STM32F0xx/stm32f072xb.h"
 653              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 654              		.file 16 "./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h"
 655              		.file 17 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 656              		.file 18 "./lib/chibios/os/rt/include/chsem.h"
 657              		.file 19 "./lib/chibios/os/rt/include/chmtx.h"
 658              		.file 20 "./lib/chibios/os/rt/include/chsys.h"
 659              		.file 21 "./lib/chibios/os/rt/include/chregistry.h"
 660              		.file 22 "./lib/chibios/os/oslib/include/chmemcore.h"
 661              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 662              		.file 24 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/stm32_gpio.h"
 663              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 664              		.file 26 "./lib/chibios/os/hal/include/hal_i2c.h"
 665              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 666              		.file 28 "./lib/chibios/os/hal/include/hal_pwm.h"
 667              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 668              		.file 30 "./lib/chibios/os/hal/include/hal_spi.h"
 669              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/SPIv2/hal_spi_lld.h"
 670              		.file 32 "./lib/chibios/os/hal/include/hal_usb.h"
 671              		.file 33 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 672              		.file 34 "tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb_descriptor.c
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:16     .text.get_usb_descriptor:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:24     .text.get_usb_descriptor:00000000 get_usb_descriptor
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:144    .text.get_usb_descriptor:0000005c $d
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:442    .rodata.SerialNumberString:00000000 SerialNumberString
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:435    .rodata.ProductString:00000000 ProductString
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:428    .rodata.ManufacturerString:00000000 ManufacturerString
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:421    .rodata.LanguageString:00000000 LanguageString
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:212    .rodata.ConfigurationDescriptor:00000000 ConfigurationDescriptor
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:335    .rodata.DeviceDescriptor:00000000 DeviceDescriptor
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:296    .rodata.ConsoleReport:00000000 ConsoleReport
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:449    .rodata.SharedReport:00000000 SharedReport
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:353    .rodata.KeyboardReport:00000000 KeyboardReport
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:164    .rodata.CSWTCH.0:00000000 $d
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:168    .rodata.CSWTCH.0:00000000 CSWTCH.0
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:177    .rodata.CSWTCH.1:00000000 CSWTCH.1
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:183    .rodata.CSWTCH.2:00000000 $d
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:187    .rodata.CSWTCH.2:00000000 CSWTCH.2
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:192    .rodata.CSWTCH.3:00000000 $d
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:196    .rodata.CSWTCH.3:00000000 CSWTCH.3
C:\Users\kyleo\AppData\Local\Temp\ccwUHns4.s:204    .rodata.CSWTCH.4:00000000 CSWTCH.4

NO UNDEFINED SYMBOLS
