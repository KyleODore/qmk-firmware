   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB19:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include <ctype.h>
  18:quantum/quantum.c **** #include "quantum.h"
  19:quantum/quantum.c **** 
  20:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  21:quantum/quantum.c **** #    include "outputselect.h"
  22:quantum/quantum.c **** #endif
  23:quantum/quantum.c **** 
  24:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
  25:quantum/quantum.c **** #    include "backlight.h"
  26:quantum/quantum.c **** extern backlight_config_t backlight_config;
  27:quantum/quantum.c **** #endif
  28:quantum/quantum.c **** 
  29:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  30:quantum/quantum.c **** #    include "fauxclicky.h"
  31:quantum/quantum.c **** #endif
  32:quantum/quantum.c **** 
  33:quantum/quantum.c **** #ifdef API_ENABLE
  34:quantum/quantum.c **** #    include "api.h"
  35:quantum/quantum.c **** #endif
  36:quantum/quantum.c **** 
  37:quantum/quantum.c **** #ifdef MIDI_ENABLE
  38:quantum/quantum.c **** #    include "process_midi.h"
  39:quantum/quantum.c **** #endif
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
  42:quantum/quantum.c **** #    include "velocikey.h"
  43:quantum/quantum.c **** #endif
  44:quantum/quantum.c **** 
  45:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
  46:quantum/quantum.c **** #    include "haptic.h"
  47:quantum/quantum.c **** #endif
  48:quantum/quantum.c **** 
  49:quantum/quantum.c **** #ifdef ENCODER_ENABLE
  50:quantum/quantum.c **** #    include "encoder.h"
  51:quantum/quantum.c **** #endif
  52:quantum/quantum.c **** 
  53:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  54:quantum/quantum.c **** #    ifndef GOODBYE_SONG
  55:quantum/quantum.c **** #        define GOODBYE_SONG SONG(GOODBYE_SOUND)
  56:quantum/quantum.c **** #    endif
  57:quantum/quantum.c **** float goodbye_song[][2] = GOODBYE_SONG;
  58:quantum/quantum.c **** #    ifdef DEFAULT_LAYER_SONGS
  59:quantum/quantum.c **** float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  60:quantum/quantum.c **** #    endif
  61:quantum/quantum.c **** #    ifdef SENDSTRING_BELL
  62:quantum/quantum.c **** float bell_song[][2] = SONG(TERMINAL_SOUND);
  63:quantum/quantum.c **** #    endif
  64:quantum/quantum.c **** #endif
  65:quantum/quantum.c **** 
  66:quantum/quantum.c **** static void do_code16(uint16_t code, void (*f)(uint8_t)) {
  16               		.loc 1 66 58 view -0
  17               		.cfi_startproc
  18               		.loc 1 66 58 is_stmt 0 view .LVU1
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  67:quantum/quantum.c ****     switch (code) {
  31               		.loc 1 67 5 is_stmt 1 view .LVU2
  32 0004 9C01      		movw r18,r24
  33 0006 3A95      		dec r19
  34 0008 2115      		cp r18,__zero_reg__
  35 000a 3F41      		sbci r19,31
  36 000c 00F4      		brsh .L1
  68:quantum/quantum.c ****         case QK_MODS ... QK_MODS_MAX:
  69:quantum/quantum.c ****             break;
  37               		.loc 1 69 13 view .LVU3
  70:quantum/quantum.c ****         default:
  71:quantum/quantum.c ****             return;
  72:quantum/quantum.c ****     }
  73:quantum/quantum.c **** 
  74:quantum/quantum.c ****     uint8_t mods_to_send = 0;
  38               		.loc 1 74 5 view .LVU4
  39               	.LVL1:
  75:quantum/quantum.c **** 
  76:quantum/quantum.c ****     if (code & QK_RMODS_MIN) {  // Right mod flag is set
  40               		.loc 1 76 5 view .LVU5
  41 000e EC01      		movw r28,r24
  42 0010 CC27      		clr r28
  43 0012 D170      		andi r29,1
  44 0014 DC01      		movw r26,r24
  45 0016 AA27      		clr r26
  46 0018 B270      		andi r27,2
  47 001a AC01      		movw r20,r24
  48 001c 4427      		clr r20
  49 001e 5470      		andi r21,4
  50 0020 9C01      		movw r18,r24
  51 0022 2227      		clr r18
  52 0024 3870      		andi r19,8
  53               		.loc 1 76 8 is_stmt 0 view .LVU6
  54 0026 94FF      		sbrs r25,4
  55 0028 00C0      		rjmp .L3
  77:quantum/quantum.c ****         if (code & QK_LCTL) mods_to_send |= MOD_BIT(KC_RCTL);
  56               		.loc 1 77 9 is_stmt 1 view .LVU7
  57               		.loc 1 77 42 is_stmt 0 view .LVU8
  58 002a 80E1      		ldi r24,lo8(16)
  59               	.LVL2:
  60               		.loc 1 77 12 view .LVU9
  61 002c CD2B      		or r28,r29
  62 002e 01F4      		brne .L4
  74:quantum/quantum.c **** 
  63               		.loc 1 74 13 view .LVU10
  64 0030 80E0      		ldi r24,0
  65               	.L4:
  66               	.LVL3:
  78:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_RSFT);
  67               		.loc 1 78 9 is_stmt 1 view .LVU11
  68               		.loc 1 78 12 is_stmt 0 view .LVU12
  69 0032 AB2B      		or r26,r27
  70 0034 01F0      		breq .L5
  71               		.loc 1 78 29 is_stmt 1 discriminator 1 view .LVU13
  72               		.loc 1 78 42 is_stmt 0 discriminator 1 view .LVU14
  73 0036 8062      		ori r24,lo8(32)
  74               	.LVL4:
  75               	.L5:
  79:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_RALT);
  76               		.loc 1 79 9 is_stmt 1 view .LVU15
  77               		.loc 1 79 12 is_stmt 0 view .LVU16
  78 0038 452B      		or r20,r21
  79 003a 01F0      		breq .L6
  80               		.loc 1 79 29 is_stmt 1 discriminator 1 view .LVU17
  81               		.loc 1 79 42 is_stmt 0 discriminator 1 view .LVU18
  82 003c 8064      		ori r24,lo8(64)
  83               	.LVL5:
  84               	.L6:
  80:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_RGUI);
  85               		.loc 1 80 9 is_stmt 1 view .LVU19
  86               		.loc 1 80 12 is_stmt 0 view .LVU20
  87 003e 232B      		or r18,r19
  88 0040 01F0      		breq .L7
  89               		.loc 1 80 29 is_stmt 1 discriminator 1 view .LVU21
  90               		.loc 1 80 42 is_stmt 0 discriminator 1 view .LVU22
  91 0042 8068      		ori r24,lo8(-128)
  92               	.LVL6:
  93               	.L7:
  81:quantum/quantum.c ****     } else {
  82:quantum/quantum.c ****         if (code & QK_LCTL) mods_to_send |= MOD_BIT(KC_LCTL);
  83:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
  84:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
  85:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
  86:quantum/quantum.c ****     }
  87:quantum/quantum.c **** 
  88:quantum/quantum.c ****     f(mods_to_send);
  94               		.loc 1 88 5 is_stmt 1 view .LVU23
  95 0044 FB01      		movw r30,r22
  96               	/* epilogue start */
  89:quantum/quantum.c **** }
  97               		.loc 1 89 1 is_stmt 0 view .LVU24
  98 0046 DF91      		pop r29
  99 0048 CF91      		pop r28
  88:quantum/quantum.c **** }
 100               		.loc 1 88 5 view .LVU25
 101 004a 0994      		ijmp
 102               	.LVL7:
 103               	.L3:
  82:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 104               		.loc 1 82 9 is_stmt 1 view .LVU26
  82:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 105               		.loc 1 82 12 is_stmt 0 view .LVU27
 106 004c 81E0      		ldi r24,lo8(1)
 107               	.LVL8:
  82:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 108               		.loc 1 82 12 view .LVU28
 109 004e CD2B      		or r28,r29
 110 0050 01F4      		brne .L8
 111 0052 80E0      		ldi r24,0
 112               	.L8:
 113               	.LVL9:
  83:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 114               		.loc 1 83 9 is_stmt 1 view .LVU29
  83:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 115               		.loc 1 83 12 is_stmt 0 view .LVU30
 116 0054 AB2B      		or r26,r27
 117 0056 01F0      		breq .L9
  83:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 118               		.loc 1 83 29 is_stmt 1 discriminator 1 view .LVU31
  83:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 119               		.loc 1 83 42 is_stmt 0 discriminator 1 view .LVU32
 120 0058 8260      		ori r24,lo8(2)
 121               	.LVL10:
 122               	.L9:
  84:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 123               		.loc 1 84 9 is_stmt 1 view .LVU33
  84:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 124               		.loc 1 84 12 is_stmt 0 view .LVU34
 125 005a 452B      		or r20,r21
 126 005c 01F0      		breq .L10
  84:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 127               		.loc 1 84 29 is_stmt 1 discriminator 1 view .LVU35
  84:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 128               		.loc 1 84 42 is_stmt 0 discriminator 1 view .LVU36
 129 005e 8460      		ori r24,lo8(4)
 130               	.LVL11:
 131               	.L10:
  85:quantum/quantum.c ****     }
 132               		.loc 1 85 9 is_stmt 1 view .LVU37
  85:quantum/quantum.c ****     }
 133               		.loc 1 85 12 is_stmt 0 view .LVU38
 134 0060 232B      		or r18,r19
 135 0062 01F0      		breq .L7
  85:quantum/quantum.c ****     }
 136               		.loc 1 85 29 is_stmt 1 discriminator 1 view .LVU39
  85:quantum/quantum.c ****     }
 137               		.loc 1 85 42 is_stmt 0 discriminator 1 view .LVU40
 138 0064 8860      		ori r24,lo8(8)
 139               	.LVL12:
  85:quantum/quantum.c ****     }
 140               		.loc 1 85 42 discriminator 1 view .LVU41
 141 0066 00C0      		rjmp .L7
 142               	.LVL13:
 143               	.L1:
 144               	/* epilogue start */
 145               		.loc 1 89 1 view .LVU42
 146 0068 DF91      		pop r29
 147 006a CF91      		pop r28
 148 006c 0895      		ret
 149               		.cfi_endproc
 150               	.LFE19:
 152               		.section	.text.register_code16,"ax",@progbits
 153               	.global	register_code16
 155               	register_code16:
 156               	.LVL14:
 157               	.LFB20:
  90:quantum/quantum.c **** 
  91:quantum/quantum.c **** void register_code16(uint16_t code) {
 158               		.loc 1 91 37 is_stmt 1 view -0
 159               		.cfi_startproc
 160               		.loc 1 91 37 is_stmt 0 view .LVU44
 161 0000 CF93      		push r28
 162               	.LCFI2:
 163               		.cfi_def_cfa_offset 3
 164               		.cfi_offset 28, -2
 165 0002 DF93      		push r29
 166               	.LCFI3:
 167               		.cfi_def_cfa_offset 4
 168               		.cfi_offset 29, -3
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 2 */
 172               	.L__stack_usage = 2
 173 0004 EC01      		movw r28,r24
  92:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 174               		.loc 1 92 5 is_stmt 1 view .LVU45
 175               		.loc 1 92 9 is_stmt 0 view .LVU46
 176 0006 805E      		subi r24,-32
 177 0008 9109      		sbc r25,__zero_reg__
 178               	.LVL15:
 179               		.loc 1 92 8 view .LVU47
 180 000a 0897      		sbiw r24,8
 181 000c 00F0      		brlo .L31
  93:quantum/quantum.c ****         do_code16(code, register_mods);
  94:quantum/quantum.c ****     } else {
  95:quantum/quantum.c ****         do_code16(code, register_weak_mods);
 182               		.loc 1 95 9 discriminator 1 view .LVU48
 183 000e 60E0      		ldi r22,lo8(gs(register_weak_mods))
 184 0010 70E0      		ldi r23,hi8(gs(register_weak_mods))
  92:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 185               		.loc 1 92 22 discriminator 1 view .LVU49
 186 0012 2097      		sbiw r28,0
 187 0014 01F4      		brne .L34
 188               	.L31:
  93:quantum/quantum.c ****         do_code16(code, register_mods);
 189               		.loc 1 93 9 is_stmt 1 view .LVU50
 190 0016 60E0      		ldi r22,lo8(gs(register_mods))
 191 0018 70E0      		ldi r23,hi8(gs(register_mods))
 192               	.L34:
 193               		.loc 1 95 9 is_stmt 0 view .LVU51
 194 001a CE01      		movw r24,r28
 195 001c 0E94 0000 		call do_code16
 196               	.LVL16:
  96:quantum/quantum.c ****     }
  97:quantum/quantum.c ****     register_code(code);
 197               		.loc 1 97 5 is_stmt 1 view .LVU52
 198 0020 8C2F      		mov r24,r28
 199               	/* epilogue start */
  98:quantum/quantum.c **** }
 200               		.loc 1 98 1 is_stmt 0 view .LVU53
 201 0022 DF91      		pop r29
 202 0024 CF91      		pop r28
 203               	.LVL17:
  97:quantum/quantum.c **** }
 204               		.loc 1 97 5 view .LVU54
 205 0026 0C94 0000 		jmp register_code
 206               	.LVL18:
 207               		.cfi_endproc
 208               	.LFE20:
 210               		.section	.text.unregister_code16,"ax",@progbits
 211               	.global	unregister_code16
 213               	unregister_code16:
 214               	.LVL19:
 215               	.LFB21:
  99:quantum/quantum.c **** 
 100:quantum/quantum.c **** void unregister_code16(uint16_t code) {
 216               		.loc 1 100 39 is_stmt 1 view -0
 217               		.cfi_startproc
 218               		.loc 1 100 39 is_stmt 0 view .LVU56
 219 0000 CF93      		push r28
 220               	.LCFI4:
 221               		.cfi_def_cfa_offset 3
 222               		.cfi_offset 28, -2
 223 0002 DF93      		push r29
 224               	.LCFI5:
 225               		.cfi_def_cfa_offset 4
 226               		.cfi_offset 29, -3
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 2 */
 230               	.L__stack_usage = 2
 231 0004 EC01      		movw r28,r24
 101:quantum/quantum.c ****     unregister_code(code);
 232               		.loc 1 101 5 is_stmt 1 view .LVU57
 233 0006 0E94 0000 		call unregister_code
 234               	.LVL20:
 102:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 235               		.loc 1 102 5 view .LVU58
 236               		.loc 1 102 9 is_stmt 0 view .LVU59
 237 000a CE01      		movw r24,r28
 238 000c 805E      		subi r24,-32
 239 000e 9109      		sbc r25,__zero_reg__
 240               		.loc 1 102 8 view .LVU60
 241 0010 0897      		sbiw r24,8
 242 0012 00F0      		brlo .L36
 103:quantum/quantum.c ****         do_code16(code, unregister_mods);
 104:quantum/quantum.c ****     } else {
 105:quantum/quantum.c ****         do_code16(code, unregister_weak_mods);
 243               		.loc 1 105 9 discriminator 1 view .LVU61
 244 0014 60E0      		ldi r22,lo8(gs(unregister_weak_mods))
 245 0016 70E0      		ldi r23,hi8(gs(unregister_weak_mods))
 102:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 246               		.loc 1 102 22 discriminator 1 view .LVU62
 247 0018 2097      		sbiw r28,0
 248 001a 01F4      		brne .L38
 249               	.L36:
 103:quantum/quantum.c ****         do_code16(code, unregister_mods);
 250               		.loc 1 103 9 is_stmt 1 view .LVU63
 251 001c 60E0      		ldi r22,lo8(gs(unregister_mods))
 252 001e 70E0      		ldi r23,hi8(gs(unregister_mods))
 253               	.L38:
 254               		.loc 1 105 9 is_stmt 0 view .LVU64
 255 0020 CE01      		movw r24,r28
 256               	/* epilogue start */
 106:quantum/quantum.c ****     }
 107:quantum/quantum.c **** }
 257               		.loc 1 107 1 view .LVU65
 258 0022 DF91      		pop r29
 259 0024 CF91      		pop r28
 260               	.LVL21:
 105:quantum/quantum.c ****     }
 261               		.loc 1 105 9 view .LVU66
 262 0026 0C94 0000 		jmp do_code16
 263               	.LVL22:
 105:quantum/quantum.c ****     }
 264               		.loc 1 105 9 view .LVU67
 265               		.cfi_endproc
 266               	.LFE21:
 268               		.section	.text.tap_code16,"ax",@progbits
 269               	.global	tap_code16
 271               	tap_code16:
 272               	.LVL23:
 273               	.LFB22:
 108:quantum/quantum.c **** 
 109:quantum/quantum.c **** void tap_code16(uint16_t code) {
 274               		.loc 1 109 32 is_stmt 1 view -0
 275               		.cfi_startproc
 276               		.loc 1 109 32 is_stmt 0 view .LVU69
 277 0000 CF93      		push r28
 278               	.LCFI6:
 279               		.cfi_def_cfa_offset 3
 280               		.cfi_offset 28, -2
 281 0002 DF93      		push r29
 282               	.LCFI7:
 283               		.cfi_def_cfa_offset 4
 284               		.cfi_offset 29, -3
 285               	/* prologue: function */
 286               	/* frame size = 0 */
 287               	/* stack size = 2 */
 288               	.L__stack_usage = 2
 289 0004 EC01      		movw r28,r24
 110:quantum/quantum.c ****     register_code16(code);
 290               		.loc 1 110 5 is_stmt 1 view .LVU70
 291 0006 0E94 0000 		call register_code16
 292               	.LVL24:
 111:quantum/quantum.c **** #if TAP_CODE_DELAY > 0
 112:quantum/quantum.c ****     wait_ms(TAP_CODE_DELAY);
 113:quantum/quantum.c **** #endif
 114:quantum/quantum.c ****     unregister_code16(code);
 293               		.loc 1 114 5 view .LVU71
 294 000a CE01      		movw r24,r28
 295               	/* epilogue start */
 115:quantum/quantum.c **** }
 296               		.loc 1 115 1 is_stmt 0 view .LVU72
 297 000c DF91      		pop r29
 298 000e CF91      		pop r28
 299               	.LVL25:
 114:quantum/quantum.c **** }
 300               		.loc 1 114 5 view .LVU73
 301 0010 0C94 0000 		jmp unregister_code16
 302               	.LVL26:
 114:quantum/quantum.c **** }
 303               		.loc 1 114 5 view .LVU74
 304               		.cfi_endproc
 305               	.LFE22:
 307               		.section	.text.process_action_kb,"ax",@progbits
 308               		.weak	process_action_kb
 310               	process_action_kb:
 311               	.LVL27:
 312               	.LFB23:
 116:quantum/quantum.c **** 
 117:quantum/quantum.c **** __attribute__((weak)) bool process_action_kb(keyrecord_t *record) { return true; }
 313               		.loc 1 117 67 is_stmt 1 view -0
 314               		.cfi_startproc
 315               	/* prologue: function */
 316               	/* frame size = 0 */
 317               	/* stack size = 0 */
 318               	.L__stack_usage = 0
 319               		.loc 1 117 69 view .LVU76
 320               		.loc 1 117 1 is_stmt 0 view .LVU77
 321 0000 81E0      		ldi r24,lo8(1)
 322               	.LVL28:
 323               	/* epilogue start */
 324               		.loc 1 117 1 view .LVU78
 325 0002 0895      		ret
 326               		.cfi_endproc
 327               	.LFE23:
 329               		.section	.text.process_record_user,"ax",@progbits
 330               		.weak	process_record_user
 332               	process_record_user:
 333               	.LVL29:
 334               	.LFB25:
 118:quantum/quantum.c **** 
 119:quantum/quantum.c **** __attribute__((weak)) bool process_record_kb(uint16_t keycode, keyrecord_t *record) { return proces
 120:quantum/quantum.c **** 
 121:quantum/quantum.c **** __attribute__((weak)) bool process_record_user(uint16_t keycode, keyrecord_t *record) { return true
 335               		.loc 1 121 87 is_stmt 1 view -0
 336               		.cfi_startproc
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 0 */
 340               	.L__stack_usage = 0
 341               		.loc 1 121 89 view .LVU80
 342               		.loc 1 121 1 is_stmt 0 view .LVU81
 343 0000 81E0      		ldi r24,lo8(1)
 344               	.LVL30:
 345               	/* epilogue start */
 346               		.loc 1 121 1 view .LVU82
 347 0002 0895      		ret
 348               		.cfi_endproc
 349               	.LFE25:
 351               		.section	.text.process_record_kb,"ax",@progbits
 352               		.weak	process_record_kb
 354               	process_record_kb:
 355               	.LVL31:
 356               	.LFB24:
 119:quantum/quantum.c **** 
 357               		.loc 1 119 85 is_stmt 1 view -0
 358               		.cfi_startproc
 359               	/* prologue: function */
 360               	/* frame size = 0 */
 361               	/* stack size = 0 */
 362               	.L__stack_usage = 0
 119:quantum/quantum.c **** 
 363               		.loc 1 119 87 view .LVU84
 119:quantum/quantum.c **** 
 364               		.loc 1 119 94 is_stmt 0 view .LVU85
 365 0000 0C94 0000 		jmp process_record_user
 366               	.LVL32:
 119:quantum/quantum.c **** 
 367               		.loc 1 119 94 view .LVU86
 368               		.cfi_endproc
 369               	.LFE24:
 371               		.section	.text.post_process_record_user,"ax",@progbits
 372               		.weak	post_process_record_user
 374               	post_process_record_user:
 375               	.LVL33:
 376               	.LFB27:
 122:quantum/quantum.c **** 
 123:quantum/quantum.c **** __attribute__((weak)) void post_process_record_kb(uint16_t keycode, keyrecord_t *record) { post_pro
 124:quantum/quantum.c **** 
 125:quantum/quantum.c **** __attribute__((weak)) void post_process_record_user(uint16_t keycode, keyrecord_t *record) {}
 377               		.loc 1 125 92 is_stmt 1 view -0
 378               		.cfi_startproc
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 0 */
 382               	.L__stack_usage = 0
 383               		.loc 1 125 93 view .LVU88
 384               	/* epilogue start */
 385               		.loc 1 125 1 is_stmt 0 view .LVU89
 386 0000 0895      		ret
 387               		.cfi_endproc
 388               	.LFE27:
 390               		.section	.text.post_process_record_kb,"ax",@progbits
 391               		.weak	post_process_record_kb
 393               	post_process_record_kb:
 394               	.LVL34:
 395               	.LFB26:
 123:quantum/quantum.c **** 
 396               		.loc 1 123 90 is_stmt 1 view -0
 397               		.cfi_startproc
 398               	/* prologue: function */
 399               	/* frame size = 0 */
 400               	/* stack size = 0 */
 401               	.L__stack_usage = 0
 123:quantum/quantum.c **** 
 402               		.loc 1 123 92 view .LVU91
 403 0000 0C94 0000 		jmp post_process_record_user
 404               	.LVL35:
 123:quantum/quantum.c **** 
 405               		.loc 1 123 92 is_stmt 0 view .LVU92
 406               		.cfi_endproc
 407               	.LFE26:
 409               		.section	.text.get_event_keycode,"ax",@progbits
 410               	.global	get_event_keycode
 412               	get_event_keycode:
 413               	.LFB30:
 126:quantum/quantum.c **** 
 127:quantum/quantum.c **** void reset_keyboard(void) {
 128:quantum/quantum.c ****     clear_keyboard();
 129:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 130:quantum/quantum.c ****     process_midi_all_notes_off();
 131:quantum/quantum.c **** #endif
 132:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 133:quantum/quantum.c **** #    ifndef NO_MUSIC_MODE
 134:quantum/quantum.c ****     music_all_notes_off();
 135:quantum/quantum.c **** #    endif
 136:quantum/quantum.c ****     uint16_t timer_start = timer_read();
 137:quantum/quantum.c ****     PLAY_SONG(goodbye_song);
 138:quantum/quantum.c ****     shutdown_user();
 139:quantum/quantum.c ****     while (timer_elapsed(timer_start) < 250) wait_ms(1);
 140:quantum/quantum.c ****     stop_all_notes();
 141:quantum/quantum.c **** #else
 142:quantum/quantum.c ****     shutdown_user();
 143:quantum/quantum.c ****     wait_ms(250);
 144:quantum/quantum.c **** #endif
 145:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 146:quantum/quantum.c ****     haptic_shutdown();
 147:quantum/quantum.c **** #endif
 148:quantum/quantum.c ****     bootloader_jump();
 149:quantum/quantum.c **** }
 150:quantum/quantum.c **** 
 151:quantum/quantum.c **** /* Convert record into usable keycode via the contained event. */
 152:quantum/quantum.c **** uint16_t get_record_keycode(keyrecord_t *record) { return get_event_keycode(record->event); }
 153:quantum/quantum.c **** 
 154:quantum/quantum.c **** /* Convert event into usable keycode. Checks the layer cache to ensure that it
 155:quantum/quantum.c ****  * retains the correct keycode after a layer change, if the key is still pressed.
 156:quantum/quantum.c ****  */
 157:quantum/quantum.c **** uint16_t get_event_keycode(keyevent_t event) {
 414               		.loc 1 157 46 is_stmt 1 view -0
 415               		.cfi_startproc
 416 0000 1F93      		push r17
 417               	.LCFI8:
 418               		.cfi_def_cfa_offset 3
 419               		.cfi_offset 17, -2
 420 0002 CF93      		push r28
 421               	.LCFI9:
 422               		.cfi_def_cfa_offset 4
 423               		.cfi_offset 28, -3
 424 0004 DF93      		push r29
 425               	.LCFI10:
 426               		.cfi_def_cfa_offset 5
 427               		.cfi_offset 29, -4
 428 0006 00D0      		rcall .
 429 0008 00D0      		rcall .
 430 000a 0F92      		push __tmp_reg__
 431               	.LCFI11:
 432               		.cfi_def_cfa_offset 10
 433 000c CDB7      		in r28,__SP_L__
 434 000e DEB7      		in r29,__SP_H__
 435               	.LCFI12:
 436               		.cfi_def_cfa_register 28
 437               	/* prologue: function */
 438               	/* frame size = 5 */
 439               	/* stack size = 8 */
 440               	.L__stack_usage = 8
 441 0010 4983      		std Y+1,r20
 442 0012 5A83      		std Y+2,r21
 443 0014 6B83      		std Y+3,r22
 158:quantum/quantum.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 159:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 160:quantum/quantum.c ****     if (!disable_action_cache) {
 444               		.loc 1 160 5 view .LVU94
 445               		.loc 1 160 8 is_stmt 0 view .LVU95
 446 0016 2091 0000 		lds r18,disable_action_cache
 447 001a 8981      		ldd r24,Y+1
 448 001c 9A81      		ldd r25,Y+2
 449 001e 2111      		cpse r18,__zero_reg__
 450 0020 00C0      		rjmp .L46
 451               	.LBB31:
 161:quantum/quantum.c ****         uint8_t layer;
 452               		.loc 1 161 9 is_stmt 1 view .LVU96
 162:quantum/quantum.c **** 
 163:quantum/quantum.c ****         if (event.pressed) {
 453               		.loc 1 163 9 view .LVU97
 454               		.loc 1 163 12 is_stmt 0 view .LVU98
 455 0022 6623      		tst r22
 456 0024 01F0      		breq .L47
 164:quantum/quantum.c ****             layer = layer_switch_get_layer(event.key);
 457               		.loc 1 164 13 is_stmt 1 view .LVU99
 458               		.loc 1 164 21 is_stmt 0 view .LVU100
 459 0026 0E94 0000 		call layer_switch_get_layer
 460               	.LVL36:
 461 002a 182F      		mov r17,r24
 462               	.LVL37:
 165:quantum/quantum.c ****             update_source_layers_cache(event.key, layer);
 463               		.loc 1 165 13 is_stmt 1 view .LVU101
 464 002c 682F      		mov r22,r24
 465 002e 8981      		ldd r24,Y+1
 466 0030 9A81      		ldd r25,Y+2
 467 0032 0E94 0000 		call update_source_layers_cache
 468               	.LVL38:
 469               	.L48:
 166:quantum/quantum.c ****         } else {
 167:quantum/quantum.c ****             layer = read_source_layers_cache(event.key);
 168:quantum/quantum.c ****         }
 169:quantum/quantum.c ****         return keymap_key_to_keycode(layer, event.key);
 470               		.loc 1 169 9 view .LVU102
 471               		.loc 1 169 16 is_stmt 0 view .LVU103
 472 0036 6981      		ldd r22,Y+1
 473 0038 7A81      		ldd r23,Y+2
 474 003a 812F      		mov r24,r17
 475               	.LVL39:
 476               	.L49:
 477               	/* epilogue start */
 478               		.loc 1 169 16 view .LVU104
 479               	.LBE31:
 170:quantum/quantum.c ****     } else
 171:quantum/quantum.c **** #endif
 172:quantum/quantum.c ****         return keymap_key_to_keycode(layer_switch_get_layer(event.key), event.key);
 173:quantum/quantum.c **** }
 480               		.loc 1 173 1 view .LVU105
 481 003c 0F90      		pop __tmp_reg__
 482 003e 0F90      		pop __tmp_reg__
 483 0040 0F90      		pop __tmp_reg__
 484 0042 0F90      		pop __tmp_reg__
 485 0044 0F90      		pop __tmp_reg__
 486 0046 DF91      		pop r29
 487 0048 CF91      		pop r28
 488 004a 1F91      		pop r17
 172:quantum/quantum.c **** }
 489               		.loc 1 172 16 view .LVU106
 490 004c 0C94 0000 		jmp keymap_key_to_keycode
 491               	.LVL40:
 492               	.L47:
 493               	.LBB32:
 167:quantum/quantum.c ****         }
 494               		.loc 1 167 13 is_stmt 1 view .LVU107
 167:quantum/quantum.c ****         }
 495               		.loc 1 167 21 is_stmt 0 view .LVU108
 496 0050 0E94 0000 		call read_source_layers_cache
 497               	.LVL41:
 498 0054 182F      		mov r17,r24
 499               	.LVL42:
 167:quantum/quantum.c ****         }
 500               		.loc 1 167 21 view .LVU109
 501 0056 00C0      		rjmp .L48
 502               	.LVL43:
 503               	.L46:
 167:quantum/quantum.c ****         }
 504               		.loc 1 167 21 view .LVU110
 505               	.LBE32:
 172:quantum/quantum.c **** }
 506               		.loc 1 172 9 is_stmt 1 view .LVU111
 172:quantum/quantum.c **** }
 507               		.loc 1 172 16 is_stmt 0 view .LVU112
 508 0058 0E94 0000 		call layer_switch_get_layer
 509               	.LVL44:
 510 005c 6981      		ldd r22,Y+1
 511 005e 7A81      		ldd r23,Y+2
 512 0060 00C0      		rjmp .L49
 513               		.cfi_endproc
 514               	.LFE30:
 516               		.section	.text.get_record_keycode,"ax",@progbits
 517               	.global	get_record_keycode
 519               	get_record_keycode:
 520               	.LVL45:
 521               	.LFB29:
 152:quantum/quantum.c **** 
 522               		.loc 1 152 50 is_stmt 1 view -0
 523               		.cfi_startproc
 524               	/* prologue: function */
 525               	/* frame size = 0 */
 526               	/* stack size = 0 */
 527               	.L__stack_usage = 0
 152:quantum/quantum.c **** 
 528               		.loc 1 152 50 is_stmt 0 view .LVU114
 529 0000 FC01      		movw r30,r24
 152:quantum/quantum.c **** 
 530               		.loc 1 152 52 is_stmt 1 view .LVU115
 152:quantum/quantum.c **** 
 531               		.loc 1 152 59 is_stmt 0 view .LVU116
 532 0002 4081      		ld r20,Z
 533 0004 5181      		ldd r21,Z+1
 534 0006 6281      		ldd r22,Z+2
 535 0008 7381      		ldd r23,Z+3
 536 000a 8481      		ldd r24,Z+4
 537               	.LVL46:
 152:quantum/quantum.c **** 
 538               		.loc 1 152 59 view .LVU117
 539 000c 0C94 0000 		jmp get_event_keycode
 540               	.LVL47:
 152:quantum/quantum.c **** 
 541               		.loc 1 152 59 view .LVU118
 542               		.cfi_endproc
 543               	.LFE29:
 545               		.section	.text.post_process_record_quantum,"ax",@progbits
 546               	.global	post_process_record_quantum
 548               	post_process_record_quantum:
 549               	.LVL48:
 550               	.LFB31:
 174:quantum/quantum.c **** 
 175:quantum/quantum.c **** /* Get keycode, and then call keyboard function */
 176:quantum/quantum.c **** void post_process_record_quantum(keyrecord_t *record) {
 551               		.loc 1 176 55 is_stmt 1 view -0
 552               		.cfi_startproc
 553               		.loc 1 176 55 is_stmt 0 view .LVU120
 554 0000 CF93      		push r28
 555               	.LCFI13:
 556               		.cfi_def_cfa_offset 3
 557               		.cfi_offset 28, -2
 558 0002 DF93      		push r29
 559               	.LCFI14:
 560               		.cfi_def_cfa_offset 4
 561               		.cfi_offset 29, -3
 562               	/* prologue: function */
 563               	/* frame size = 0 */
 564               	/* stack size = 2 */
 565               	.L__stack_usage = 2
 566 0004 EC01      		movw r28,r24
 177:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 567               		.loc 1 177 5 is_stmt 1 view .LVU121
 568               		.loc 1 177 24 is_stmt 0 view .LVU122
 569 0006 0E94 0000 		call get_record_keycode
 570               	.LVL49:
 178:quantum/quantum.c ****     post_process_record_kb(keycode, record);
 571               		.loc 1 178 5 is_stmt 1 view .LVU123
 572 000a BE01      		movw r22,r28
 573               	/* epilogue start */
 179:quantum/quantum.c **** }
 574               		.loc 1 179 1 is_stmt 0 view .LVU124
 575 000c DF91      		pop r29
 576 000e CF91      		pop r28
 577               	.LVL50:
 178:quantum/quantum.c ****     post_process_record_kb(keycode, record);
 578               		.loc 1 178 5 view .LVU125
 579 0010 0C94 0000 		jmp post_process_record_kb
 580               	.LVL51:
 178:quantum/quantum.c ****     post_process_record_kb(keycode, record);
 581               		.loc 1 178 5 view .LVU126
 582               		.cfi_endproc
 583               	.LFE31:
 585               		.section	.text.send_char,"ax",@progbits
 586               	.global	send_char
 588               	send_char:
 589               	.LVL52:
 590               	.LFB37:
 180:quantum/quantum.c **** 
 181:quantum/quantum.c **** /* Core keycode function, hands off handling to other functions,
 182:quantum/quantum.c ****     then processes internal quantum keycodes, and then processes
 183:quantum/quantum.c ****     ACTIONs.                                                      */
 184:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 185:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 186:quantum/quantum.c **** 
 187:quantum/quantum.c ****     // This is how you use actions here
 188:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 189:quantum/quantum.c ****     //   action_t action;
 190:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 191:quantum/quantum.c ****     //   process_action(record, action);
 192:quantum/quantum.c ****     //   return false;
 193:quantum/quantum.c ****     // }
 194:quantum/quantum.c **** 
 195:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 196:quantum/quantum.c ****     if (velocikey_enabled() && record->event.pressed) {
 197:quantum/quantum.c ****         velocikey_accelerate();
 198:quantum/quantum.c ****     }
 199:quantum/quantum.c **** #endif
 200:quantum/quantum.c **** 
 201:quantum/quantum.c **** #ifdef WPM_ENABLE
 202:quantum/quantum.c ****     if (record->event.pressed) {
 203:quantum/quantum.c ****         update_wpm(keycode);
 204:quantum/quantum.c ****     }
 205:quantum/quantum.c **** #endif
 206:quantum/quantum.c **** 
 207:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 208:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 209:quantum/quantum.c **** #endif
 210:quantum/quantum.c **** 
 211:quantum/quantum.c ****     if (!(
 212:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 213:quantum/quantum.c ****             // Must run first to be able to mask key_up events.
 214:quantum/quantum.c ****             process_key_lock(&keycode, record) &&
 215:quantum/quantum.c **** #endif
 216:quantum/quantum.c **** #if defined(DYNAMIC_MACRO_ENABLE) && !defined(DYNAMIC_MACRO_USER_CALL)
 217:quantum/quantum.c ****             // Must run asap to ensure all keypresses are recorded.
 218:quantum/quantum.c ****             process_dynamic_macro(keycode, record) &&
 219:quantum/quantum.c **** #endif
 220:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 221:quantum/quantum.c ****             process_clicky(keycode, record) &&
 222:quantum/quantum.c **** #endif  // AUDIO_CLICKY
 223:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 224:quantum/quantum.c ****             process_haptic(keycode, record) &&
 225:quantum/quantum.c **** #endif  // HAPTIC_ENABLE
 226:quantum/quantum.c **** #if defined(RGB_MATRIX_ENABLE)
 227:quantum/quantum.c ****             process_rgb_matrix(keycode, record) &&
 228:quantum/quantum.c **** #endif
 229:quantum/quantum.c **** #if defined(VIA_ENABLE)
 230:quantum/quantum.c ****             process_record_via(keycode, record) &&
 231:quantum/quantum.c **** #endif
 232:quantum/quantum.c ****             process_record_kb(keycode, record) &&
 233:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 234:quantum/quantum.c ****             process_midi(keycode, record) &&
 235:quantum/quantum.c **** #endif
 236:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 237:quantum/quantum.c ****             process_audio(keycode, record) &&
 238:quantum/quantum.c **** #endif
 239:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
 240:quantum/quantum.c ****             process_backlight(keycode, record) &&
 241:quantum/quantum.c **** #endif
 242:quantum/quantum.c **** #ifdef STENO_ENABLE
 243:quantum/quantum.c ****             process_steno(keycode, record) &&
 244:quantum/quantum.c **** #endif
 245:quantum/quantum.c **** #if (defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSIC_M
 246:quantum/quantum.c ****             process_music(keycode, record) &&
 247:quantum/quantum.c **** #endif
 248:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 249:quantum/quantum.c ****             process_tap_dance(keycode, record) &&
 250:quantum/quantum.c **** #endif
 251:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 252:quantum/quantum.c ****             process_unicode_common(keycode, record) &&
 253:quantum/quantum.c **** #endif
 254:quantum/quantum.c **** #ifdef LEADER_ENABLE
 255:quantum/quantum.c ****             process_leader(keycode, record) &&
 256:quantum/quantum.c **** #endif
 257:quantum/quantum.c **** #ifdef COMBO_ENABLE
 258:quantum/quantum.c ****             process_combo(keycode, record) &&
 259:quantum/quantum.c **** #endif
 260:quantum/quantum.c **** #ifdef PRINTING_ENABLE
 261:quantum/quantum.c ****             process_printer(keycode, record) &&
 262:quantum/quantum.c **** #endif
 263:quantum/quantum.c **** #ifdef AUTO_SHIFT_ENABLE
 264:quantum/quantum.c ****             process_auto_shift(keycode, record) &&
 265:quantum/quantum.c **** #endif
 266:quantum/quantum.c **** #ifdef TERMINAL_ENABLE
 267:quantum/quantum.c ****             process_terminal(keycode, record) &&
 268:quantum/quantum.c **** #endif
 269:quantum/quantum.c **** #ifdef SPACE_CADET_ENABLE
 270:quantum/quantum.c ****             process_space_cadet(keycode, record) &&
 271:quantum/quantum.c **** #endif
 272:quantum/quantum.c **** #ifdef MAGIC_KEYCODE_ENABLE
 273:quantum/quantum.c ****             process_magic(keycode, record) &&
 274:quantum/quantum.c **** #endif
 275:quantum/quantum.c **** #ifdef GRAVE_ESC_ENABLE
 276:quantum/quantum.c ****             process_grave_esc(keycode, record) &&
 277:quantum/quantum.c **** #endif
 278:quantum/quantum.c **** #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 279:quantum/quantum.c ****             process_rgb(keycode, record) &&
 280:quantum/quantum.c **** #endif
 281:quantum/quantum.c ****             true)) {
 282:quantum/quantum.c ****         return false;
 283:quantum/quantum.c ****     }
 284:quantum/quantum.c **** 
 285:quantum/quantum.c ****     if (record->event.pressed) {
 286:quantum/quantum.c ****         switch (keycode) {
 287:quantum/quantum.c **** #ifndef NO_RESET
 288:quantum/quantum.c ****             case RESET:
 289:quantum/quantum.c ****                 reset_keyboard();
 290:quantum/quantum.c ****                 return false;
 291:quantum/quantum.c **** #endif
 292:quantum/quantum.c **** #ifndef NO_DEBUG
 293:quantum/quantum.c ****             case DEBUG:
 294:quantum/quantum.c ****                 debug_enable ^= 1;
 295:quantum/quantum.c ****                 if (debug_enable) {
 296:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 297:quantum/quantum.c ****                 } else {
 298:quantum/quantum.c ****                     print("DEBUG: disabled.\n");
 299:quantum/quantum.c ****                 }
 300:quantum/quantum.c **** #endif
 301:quantum/quantum.c ****                 return false;
 302:quantum/quantum.c ****             case EEPROM_RESET:
 303:quantum/quantum.c ****                 eeconfig_init();
 304:quantum/quantum.c ****                 return false;
 305:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
 306:quantum/quantum.c ****             case FC_TOG:
 307:quantum/quantum.c ****                 FAUXCLICKY_TOGGLE;
 308:quantum/quantum.c ****                 return false;
 309:quantum/quantum.c ****             case FC_ON:
 310:quantum/quantum.c ****                 FAUXCLICKY_ON;
 311:quantum/quantum.c ****                 return false;
 312:quantum/quantum.c ****             case FC_OFF:
 313:quantum/quantum.c ****                 FAUXCLICKY_OFF;
 314:quantum/quantum.c ****                 return false;
 315:quantum/quantum.c **** #endif
 316:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 317:quantum/quantum.c ****             case VLK_TOG:
 318:quantum/quantum.c ****                 velocikey_toggle();
 319:quantum/quantum.c ****                 return false;
 320:quantum/quantum.c **** #endif
 321:quantum/quantum.c **** #ifdef BLUETOOTH_ENABLE
 322:quantum/quantum.c ****             case OUT_AUTO:
 323:quantum/quantum.c ****                 set_output(OUTPUT_AUTO);
 324:quantum/quantum.c ****                 return false;
 325:quantum/quantum.c ****             case OUT_USB:
 326:quantum/quantum.c ****                 set_output(OUTPUT_USB);
 327:quantum/quantum.c ****                 return false;
 328:quantum/quantum.c ****             case OUT_BT:
 329:quantum/quantum.c ****                 set_output(OUTPUT_BLUETOOTH);
 330:quantum/quantum.c ****                 return false;
 331:quantum/quantum.c **** #endif
 332:quantum/quantum.c ****         }
 333:quantum/quantum.c ****     }
 334:quantum/quantum.c **** 
 335:quantum/quantum.c ****     return process_action_kb(record);
 336:quantum/quantum.c **** }
 337:quantum/quantum.c **** 
 338:quantum/quantum.c **** // clang-format off
 339:quantum/quantum.c **** 
 340:quantum/quantum.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
 341:quantum/quantum.c ****  * [Shift] needs to be sent with the keycode.
 342:quantum/quantum.c ****  */
 343:quantum/quantum.c **** __attribute__((weak)) const uint8_t ascii_to_shift_lut[16] PROGMEM = {
 344:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 345:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 346:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 347:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 348:quantum/quantum.c **** 
 349:quantum/quantum.c ****     KCLUT_ENTRY(0, 1, 1, 1, 1, 1, 1, 0),
 350:quantum/quantum.c ****     KCLUT_ENTRY(1, 1, 1, 1, 0, 0, 0, 0),
 351:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 352:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 1, 0, 1, 0, 1, 1),
 353:quantum/quantum.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
 354:quantum/quantum.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
 355:quantum/quantum.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
 356:quantum/quantum.c ****     KCLUT_ENTRY(1, 1, 1, 0, 0, 0, 1, 1),
 357:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 358:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 359:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 360:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 1, 1, 1, 1, 0),
 361:quantum/quantum.c **** };
 362:quantum/quantum.c **** 
 363:quantum/quantum.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
 364:quantum/quantum.c ****  * [AltGr] needs to be sent with the keycode.
 365:quantum/quantum.c ****  */
 366:quantum/quantum.c **** __attribute__((weak)) const uint8_t ascii_to_altgr_lut[16] PROGMEM = {
 367:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 368:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 369:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 370:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 371:quantum/quantum.c **** 
 372:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 373:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 374:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 375:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 376:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 377:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 378:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 379:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 380:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 381:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 382:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 383:quantum/quantum.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
 384:quantum/quantum.c **** };
 385:quantum/quantum.c **** 
 386:quantum/quantum.c **** /* Look-up table to convert an ASCII character to a keycode.
 387:quantum/quantum.c ****  */
 388:quantum/quantum.c **** __attribute__((weak)) const uint8_t ascii_to_keycode_lut[128] PROGMEM = {
 389:quantum/quantum.c ****     // NUL   SOH      STX      ETX      EOT      ENQ      ACK      BEL
 390:quantum/quantum.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 391:quantum/quantum.c ****     // BS    TAB      LF       VT       FF       CR       SO       SI
 392:quantum/quantum.c ****     KC_BSPC, KC_TAB,  KC_ENT,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 393:quantum/quantum.c ****     // DLE   DC1      DC2      DC3      DC4      NAK      SYN      ETB
 394:quantum/quantum.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 395:quantum/quantum.c ****     // CAN   EM       SUB      ESC      FS       GS       RS       US
 396:quantum/quantum.c ****     XXXXXXX, XXXXXXX, XXXXXXX, KC_ESC,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 397:quantum/quantum.c **** 
 398:quantum/quantum.c ****     //       !        "        #        $        %        &        '
 399:quantum/quantum.c ****     KC_SPC,  KC_1,    KC_QUOT, KC_3,    KC_4,    KC_5,    KC_7,    KC_QUOT,
 400:quantum/quantum.c ****     // (     )        *        +        ,        -        .        /
 401:quantum/quantum.c ****     KC_9,    KC_0,    KC_8,    KC_EQL,  KC_COMM, KC_MINS, KC_DOT,  KC_SLSH,
 402:quantum/quantum.c ****     // 0     1        2        3        4        5        6        7
 403:quantum/quantum.c ****     KC_0,    KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,
 404:quantum/quantum.c ****     // 8     9        :        ;        <        =        >        ?
 405:quantum/quantum.c ****     KC_8,    KC_9,    KC_SCLN, KC_SCLN, KC_COMM, KC_EQL,  KC_DOT,  KC_SLSH,
 406:quantum/quantum.c ****     // @     A        B        C        D        E        F        G
 407:quantum/quantum.c ****     KC_2,    KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 408:quantum/quantum.c ****     // H     I        J        K        L        M        N        O
 409:quantum/quantum.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 410:quantum/quantum.c ****     // P     Q        R        S        T        U        V        W
 411:quantum/quantum.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 412:quantum/quantum.c ****     // X     Y        Z        [        \        ]        ^        _
 413:quantum/quantum.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_6,    KC_MINS,
 414:quantum/quantum.c ****     // `     a        b        c        d        e        f        g
 415:quantum/quantum.c ****     KC_GRV,  KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 416:quantum/quantum.c ****     // h     i        j        k        l        m        n        o
 417:quantum/quantum.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 418:quantum/quantum.c ****     // p     q        r        s        t        u        v        w
 419:quantum/quantum.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 420:quantum/quantum.c ****     // x     y        z        {        |        }        ~        DEL
 421:quantum/quantum.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV,  KC_DEL
 422:quantum/quantum.c **** };
 423:quantum/quantum.c **** 
 424:quantum/quantum.c **** // clang-format on
 425:quantum/quantum.c **** 
 426:quantum/quantum.c **** // Note: we bit-pack in "reverse" order to optimize loading
 427:quantum/quantum.c **** #define PGM_LOADBIT(mem, pos) ((pgm_read_byte(&((mem)[(pos) / 8])) >> ((pos) % 8)) & 0x01)
 428:quantum/quantum.c **** 
 429:quantum/quantum.c **** void send_string(const char *str) { send_string_with_delay(str, 0); }
 430:quantum/quantum.c **** 
 431:quantum/quantum.c **** void send_string_P(const char *str) { send_string_with_delay_P(str, 0); }
 432:quantum/quantum.c **** 
 433:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 434:quantum/quantum.c ****     while (1) {
 435:quantum/quantum.c ****         char ascii_code = *str;
 436:quantum/quantum.c ****         if (!ascii_code) break;
 437:quantum/quantum.c ****         if (ascii_code == SS_QMK_PREFIX) {
 438:quantum/quantum.c ****             ascii_code = *(++str);
 439:quantum/quantum.c ****             if (ascii_code == SS_TAP_CODE) {
 440:quantum/quantum.c ****                 // tap
 441:quantum/quantum.c ****                 uint8_t keycode = *(++str);
 442:quantum/quantum.c ****                 register_code(keycode);
 443:quantum/quantum.c ****                 unregister_code(keycode);
 444:quantum/quantum.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 445:quantum/quantum.c ****                 // down
 446:quantum/quantum.c ****                 uint8_t keycode = *(++str);
 447:quantum/quantum.c ****                 register_code(keycode);
 448:quantum/quantum.c ****             } else if (ascii_code == SS_UP_CODE) {
 449:quantum/quantum.c ****                 // up
 450:quantum/quantum.c ****                 uint8_t keycode = *(++str);
 451:quantum/quantum.c ****                 unregister_code(keycode);
 452:quantum/quantum.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 453:quantum/quantum.c ****                 // delay
 454:quantum/quantum.c ****                 int     ms      = 0;
 455:quantum/quantum.c ****                 uint8_t keycode = *(++str);
 456:quantum/quantum.c ****                 while (isdigit(keycode)) {
 457:quantum/quantum.c ****                     ms *= 10;
 458:quantum/quantum.c ****                     ms += keycode - '0';
 459:quantum/quantum.c ****                     keycode = *(++str);
 460:quantum/quantum.c ****                 }
 461:quantum/quantum.c ****                 while (ms--) wait_ms(1);
 462:quantum/quantum.c ****             }
 463:quantum/quantum.c ****         } else {
 464:quantum/quantum.c ****             send_char(ascii_code);
 465:quantum/quantum.c ****         }
 466:quantum/quantum.c ****         ++str;
 467:quantum/quantum.c ****         // interval
 468:quantum/quantum.c ****         {
 469:quantum/quantum.c ****             uint8_t ms = interval;
 470:quantum/quantum.c ****             while (ms--) wait_ms(1);
 471:quantum/quantum.c ****         }
 472:quantum/quantum.c ****     }
 473:quantum/quantum.c **** }
 474:quantum/quantum.c **** 
 475:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 476:quantum/quantum.c ****     while (1) {
 477:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 478:quantum/quantum.c ****         if (!ascii_code) break;
 479:quantum/quantum.c ****         if (ascii_code == SS_QMK_PREFIX) {
 480:quantum/quantum.c ****             ascii_code = pgm_read_byte(++str);
 481:quantum/quantum.c ****             if (ascii_code == SS_TAP_CODE) {
 482:quantum/quantum.c ****                 // tap
 483:quantum/quantum.c ****                 uint8_t keycode = pgm_read_byte(++str);
 484:quantum/quantum.c ****                 register_code(keycode);
 485:quantum/quantum.c ****                 unregister_code(keycode);
 486:quantum/quantum.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 487:quantum/quantum.c ****                 // down
 488:quantum/quantum.c ****                 uint8_t keycode = pgm_read_byte(++str);
 489:quantum/quantum.c ****                 register_code(keycode);
 490:quantum/quantum.c ****             } else if (ascii_code == SS_UP_CODE) {
 491:quantum/quantum.c ****                 // up
 492:quantum/quantum.c ****                 uint8_t keycode = pgm_read_byte(++str);
 493:quantum/quantum.c ****                 unregister_code(keycode);
 494:quantum/quantum.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 495:quantum/quantum.c ****                 // delay
 496:quantum/quantum.c ****                 int     ms      = 0;
 497:quantum/quantum.c ****                 uint8_t keycode = pgm_read_byte(++str);
 498:quantum/quantum.c ****                 while (isdigit(keycode)) {
 499:quantum/quantum.c ****                     ms *= 10;
 500:quantum/quantum.c ****                     ms += keycode - '0';
 501:quantum/quantum.c ****                     keycode = pgm_read_byte(++str);
 502:quantum/quantum.c ****                 }
 503:quantum/quantum.c ****                 while (ms--) wait_ms(1);
 504:quantum/quantum.c ****             }
 505:quantum/quantum.c ****         } else {
 506:quantum/quantum.c ****             send_char(ascii_code);
 507:quantum/quantum.c ****         }
 508:quantum/quantum.c ****         ++str;
 509:quantum/quantum.c ****         // interval
 510:quantum/quantum.c ****         {
 511:quantum/quantum.c ****             uint8_t ms = interval;
 512:quantum/quantum.c ****             while (ms--) wait_ms(1);
 513:quantum/quantum.c ****         }
 514:quantum/quantum.c ****     }
 515:quantum/quantum.c **** }
 516:quantum/quantum.c **** 
 517:quantum/quantum.c **** void send_char(char ascii_code) {
 591               		.loc 1 517 33 is_stmt 1 view -0
 592               		.cfi_startproc
 593               		.loc 1 517 33 is_stmt 0 view .LVU128
 594 0000 FF92      		push r15
 595               	.LCFI15:
 596               		.cfi_def_cfa_offset 3
 597               		.cfi_offset 15, -2
 598 0002 0F93      		push r16
 599               	.LCFI16:
 600               		.cfi_def_cfa_offset 4
 601               		.cfi_offset 16, -3
 602 0004 1F93      		push r17
 603               	.LCFI17:
 604               		.cfi_def_cfa_offset 5
 605               		.cfi_offset 17, -4
 606 0006 CF93      		push r28
 607               	.LCFI18:
 608               		.cfi_def_cfa_offset 6
 609               		.cfi_offset 28, -5
 610 0008 DF93      		push r29
 611               	.LCFI19:
 612               		.cfi_def_cfa_offset 7
 613               		.cfi_offset 29, -6
 614               	/* prologue: function */
 615               	/* frame size = 0 */
 616               	/* stack size = 5 */
 617               	.L__stack_usage = 5
 518:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(SENDSTRING_BELL)
 519:quantum/quantum.c ****     if (ascii_code == '\a') {  // BEL
 520:quantum/quantum.c ****         PLAY_SONG(bell_song);
 521:quantum/quantum.c ****         return;
 522:quantum/quantum.c ****     }
 523:quantum/quantum.c **** #endif
 524:quantum/quantum.c **** 
 525:quantum/quantum.c ****     uint8_t keycode    = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 618               		.loc 1 525 5 is_stmt 1 view .LVU129
 619               	.LBB33:
 620               		.loc 1 525 26 view .LVU130
 621               	.LVL53:
 622               		.loc 1 525 26 view .LVU131
 623               		.loc 1 525 26 view .LVU132
 624 000a E82F      		mov r30,r24
 625 000c F0E0      		ldi r31,0
 626 000e E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 627 0010 F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 628               	/* #APP */
 629               	 ;  525 "quantum/quantum.c" 1
 630 0012 F490      		lpm r15, Z
 631               		
 632               	 ;  0 "" 2
 633               	.LVL54:
 634               		.loc 1 525 26 view .LVU133
 635               		.loc 1 525 26 is_stmt 0 view .LVU134
 636               	/* #NOAPP */
 637               	.LBE33:
 526:quantum/quantum.c ****     bool    is_shifted = PGM_LOADBIT(ascii_to_shift_lut, (uint8_t)ascii_code);
 638               		.loc 1 526 5 is_stmt 1 view .LVU135
 639               	.LBB34:
 640               		.loc 1 526 26 view .LVU136
 641 0014 C82F      		mov r28,r24
 642 0016 C695      		lsr r28
 643 0018 C695      		lsr r28
 644 001a C695      		lsr r28
 645 001c D0E0      		ldi r29,0
 646               	.LVL55:
 647               		.loc 1 526 26 view .LVU137
 648               		.loc 1 526 26 view .LVU138
 649 001e FE01      		movw r30,r28
 650 0020 E050      		subi r30,lo8(-(ascii_to_shift_lut))
 651 0022 F040      		sbci r31,hi8(-(ascii_to_shift_lut))
 652               	.LVL56:
 653               		.loc 1 526 26 is_stmt 0 view .LVU139
 654               	/* #APP */
 655               	 ;  526 "quantum/quantum.c" 1
 656 0024 0491      		lpm r16, Z
 657               		
 658               	 ;  0 "" 2
 659               	.LVL57:
 660               		.loc 1 526 26 is_stmt 1 view .LVU140
 661               	/* #NOAPP */
 662               	.LBE34:
 663 0026 8770      		andi r24,lo8(7)
 664               	.LVL58:
 665               		.loc 1 526 26 is_stmt 0 view .LVU141
 666 0028 10E0      		ldi r17,0
 667 002a 082E      		mov r0,r24
 668 002c 00C0      		rjmp 2f
 669               		1:
 670 002e 1595      		asr r17
 671 0030 0795      		ror r16
 672               		2:
 673 0032 0A94      		dec r0
 674 0034 02F4      		brpl 1b
 675               	.LVL59:
 676               		.loc 1 526 26 view .LVU142
 677 0036 0170      		andi r16,1
 678 0038 1127      		clr r17
 679               	.LVL60:
 527:quantum/quantum.c ****     bool    is_altgred = PGM_LOADBIT(ascii_to_altgr_lut, (uint8_t)ascii_code);
 680               		.loc 1 527 5 is_stmt 1 view .LVU143
 681               	.LBB35:
 682               		.loc 1 527 26 view .LVU144
 683               		.loc 1 527 26 view .LVU145
 684               		.loc 1 527 26 view .LVU146
 685 003a C050      		subi r28,lo8(-(ascii_to_altgr_lut))
 686 003c D040      		sbci r29,hi8(-(ascii_to_altgr_lut))
 687               	.LVL61:
 688               		.loc 1 527 26 is_stmt 0 view .LVU147
 689 003e FE01      		movw r30,r28
 690               	.LVL62:
 691               		.loc 1 527 26 view .LVU148
 692               	/* #APP */
 693               	 ;  527 "quantum/quantum.c" 1
 694 0040 C491      		lpm r28, Z
 695               		
 696               	 ;  0 "" 2
 697               	.LVL63:
 698               		.loc 1 527 26 is_stmt 1 view .LVU149
 699               	/* #NOAPP */
 700               	.LBE35:
 701 0042 D0E0      		ldi r29,0
 702 0044 00C0      		rjmp 2f
 703               		1:
 704 0046 D595      		asr r29
 705 0048 C795      		ror r28
 706               		2:
 707 004a 8A95      		dec r24
 708 004c 02F4      		brpl 1b
 709               	.LVL64:
 710               		.loc 1 527 26 is_stmt 0 view .LVU150
 711 004e C170      		andi r28,1
 712 0050 DD27      		clr r29
 713               	.LVL65:
 528:quantum/quantum.c **** 
 529:quantum/quantum.c ****     if (is_shifted) {
 714               		.loc 1 529 5 is_stmt 1 view .LVU151
 715               		.loc 1 529 8 is_stmt 0 view .LVU152
 716 0052 0115      		cp r16,__zero_reg__
 717 0054 1105      		cpc r17,__zero_reg__
 718 0056 01F0      		breq .L53
 530:quantum/quantum.c ****         register_code(KC_LSFT);
 719               		.loc 1 530 9 is_stmt 1 view .LVU153
 720 0058 81EE      		ldi r24,lo8(-31)
 721 005a 0E94 0000 		call register_code
 722               	.LVL66:
 723               	.L53:
 531:quantum/quantum.c ****     }
 532:quantum/quantum.c ****     if (is_altgred) {
 724               		.loc 1 532 5 view .LVU154
 725               		.loc 1 532 8 is_stmt 0 view .LVU155
 726 005e 2097      		sbiw r28,0
 727 0060 01F0      		breq .L54
 533:quantum/quantum.c ****         register_code(KC_RALT);
 728               		.loc 1 533 9 is_stmt 1 view .LVU156
 729 0062 86EE      		ldi r24,lo8(-26)
 730 0064 0E94 0000 		call register_code
 731               	.LVL67:
 732               	.L54:
 534:quantum/quantum.c ****     }
 535:quantum/quantum.c ****     tap_code(keycode);
 733               		.loc 1 535 5 view .LVU157
 734 0068 8F2D      		mov r24,r15
 735 006a 0E94 0000 		call tap_code
 736               	.LVL68:
 536:quantum/quantum.c ****     if (is_altgred) {
 737               		.loc 1 536 5 view .LVU158
 738               		.loc 1 536 8 is_stmt 0 view .LVU159
 739 006e CD2B      		or r28,r29
 740 0070 01F0      		breq .L55
 537:quantum/quantum.c ****         unregister_code(KC_RALT);
 741               		.loc 1 537 9 is_stmt 1 view .LVU160
 742 0072 86EE      		ldi r24,lo8(-26)
 743 0074 0E94 0000 		call unregister_code
 744               	.LVL69:
 745               	.L55:
 538:quantum/quantum.c ****     }
 539:quantum/quantum.c ****     if (is_shifted) {
 746               		.loc 1 539 5 view .LVU161
 747               		.loc 1 539 8 is_stmt 0 view .LVU162
 748 0078 012B      		or r16,r17
 749 007a 01F0      		breq .L52
 540:quantum/quantum.c ****         unregister_code(KC_LSFT);
 750               		.loc 1 540 9 is_stmt 1 view .LVU163
 751 007c 81EE      		ldi r24,lo8(-31)
 752               	/* epilogue start */
 541:quantum/quantum.c ****     }
 542:quantum/quantum.c **** }
 753               		.loc 1 542 1 is_stmt 0 view .LVU164
 754 007e DF91      		pop r29
 755 0080 CF91      		pop r28
 756               	.LVL70:
 757               		.loc 1 542 1 view .LVU165
 758 0082 1F91      		pop r17
 759 0084 0F91      		pop r16
 760               	.LVL71:
 761               		.loc 1 542 1 view .LVU166
 762 0086 FF90      		pop r15
 763               	.LVL72:
 540:quantum/quantum.c ****         unregister_code(KC_LSFT);
 764               		.loc 1 540 9 view .LVU167
 765 0088 0C94 0000 		jmp unregister_code
 766               	.LVL73:
 767               	.L52:
 768               	/* epilogue start */
 769               		.loc 1 542 1 view .LVU168
 770 008c DF91      		pop r29
 771 008e CF91      		pop r28
 772               	.LVL74:
 773               		.loc 1 542 1 view .LVU169
 774 0090 1F91      		pop r17
 775 0092 0F91      		pop r16
 776               	.LVL75:
 777               		.loc 1 542 1 view .LVU170
 778 0094 FF90      		pop r15
 779               	.LVL76:
 780               		.loc 1 542 1 view .LVU171
 781 0096 0895      		ret
 782               		.cfi_endproc
 783               	.LFE37:
 785               		.section	.text.send_string_with_delay,"ax",@progbits
 786               	.global	send_string_with_delay
 788               	send_string_with_delay:
 789               	.LVL77:
 790               	.LFB35:
 433:quantum/quantum.c ****     while (1) {
 791               		.loc 1 433 64 is_stmt 1 view -0
 792               		.cfi_startproc
 433:quantum/quantum.c ****     while (1) {
 793               		.loc 1 433 64 is_stmt 0 view .LVU173
 794 0000 EF92      		push r14
 795               	.LCFI20:
 796               		.cfi_def_cfa_offset 3
 797               		.cfi_offset 14, -2
 798 0002 FF92      		push r15
 799               	.LCFI21:
 800               		.cfi_def_cfa_offset 4
 801               		.cfi_offset 15, -3
 802 0004 0F93      		push r16
 803               	.LCFI22:
 804               		.cfi_def_cfa_offset 5
 805               		.cfi_offset 16, -4
 806 0006 1F93      		push r17
 807               	.LCFI23:
 808               		.cfi_def_cfa_offset 6
 809               		.cfi_offset 17, -5
 810 0008 CF93      		push r28
 811               	.LCFI24:
 812               		.cfi_def_cfa_offset 7
 813               		.cfi_offset 28, -6
 814 000a DF93      		push r29
 815               	.LCFI25:
 816               		.cfi_def_cfa_offset 8
 817               		.cfi_offset 29, -7
 818               	/* prologue: function */
 819               	/* frame size = 0 */
 820               	/* stack size = 6 */
 821               	.L__stack_usage = 6
 822 000c EC01      		movw r28,r24
 823 000e 162F      		mov r17,r22
 824               	.LBB36:
 825               	.LBB37:
 457:quantum/quantum.c ****                     ms += keycode - '0';
 826               		.loc 1 457 24 view .LVU174
 827 0010 0AE0      		ldi r16,lo8(10)
 828               	.LVL78:
 829               	.L80:
 457:quantum/quantum.c ****                     ms += keycode - '0';
 830               		.loc 1 457 24 view .LVU175
 831               	.LBE37:
 832               	.LBE36:
 434:quantum/quantum.c ****         char ascii_code = *str;
 833               		.loc 1 434 5 is_stmt 1 view .LVU176
 834               	.LBB49:
 435:quantum/quantum.c ****         if (!ascii_code) break;
 835               		.loc 1 435 9 view .LVU177
 435:quantum/quantum.c ****         if (!ascii_code) break;
 836               		.loc 1 435 14 is_stmt 0 view .LVU178
 837 0012 8881      		ld r24,Y
 838               	.LVL79:
 436:quantum/quantum.c ****         if (ascii_code == SS_QMK_PREFIX) {
 839               		.loc 1 436 9 is_stmt 1 view .LVU179
 436:quantum/quantum.c ****         if (ascii_code == SS_QMK_PREFIX) {
 840               		.loc 1 436 12 is_stmt 0 view .LVU180
 841 0014 8823      		tst r24
 842 0016 01F4      		brne .+2
 843 0018 00C0      		rjmp .L66
 437:quantum/quantum.c ****             ascii_code = *(++str);
 844               		.loc 1 437 9 is_stmt 1 view .LVU181
 437:quantum/quantum.c ****             ascii_code = *(++str);
 845               		.loc 1 437 12 is_stmt 0 view .LVU182
 846 001a 8130      		cpi r24,lo8(1)
 847 001c 01F0      		breq .+2
 848 001e 00C0      		rjmp .L68
 438:quantum/quantum.c ****             if (ascii_code == SS_TAP_CODE) {
 849               		.loc 1 438 13 is_stmt 1 view .LVU183
 850               	.LVL80:
 438:quantum/quantum.c ****             if (ascii_code == SS_TAP_CODE) {
 851               		.loc 1 438 24 is_stmt 0 view .LVU184
 852 0020 8981      		ldd r24,Y+1
 853               	.LVL81:
 439:quantum/quantum.c ****                 // tap
 854               		.loc 1 439 13 is_stmt 1 view .LVU185
 439:quantum/quantum.c ****                 // tap
 855               		.loc 1 439 16 is_stmt 0 view .LVU186
 856 0022 8130      		cpi r24,lo8(1)
 857 0024 01F4      		brne .L69
 858               	.LBB40:
 441:quantum/quantum.c ****                 register_code(keycode);
 859               		.loc 1 441 17 is_stmt 1 view .LVU187
 441:quantum/quantum.c ****                 register_code(keycode);
 860               		.loc 1 441 25 is_stmt 0 view .LVU188
 861 0026 7E01      		movw r14,r28
 862 0028 22E0      		ldi r18,2
 863 002a E20E      		add r14,r18
 864 002c F11C      		adc r15,__zero_reg__
 865               	.LVL82:
 441:quantum/quantum.c ****                 register_code(keycode);
 866               		.loc 1 441 25 view .LVU189
 867 002e CA81      		ldd r28,Y+2
 868               	.LVL83:
 442:quantum/quantum.c ****                 unregister_code(keycode);
 869               		.loc 1 442 17 is_stmt 1 view .LVU190
 870 0030 8C2F      		mov r24,r28
 871               	.LVL84:
 442:quantum/quantum.c ****                 unregister_code(keycode);
 872               		.loc 1 442 17 is_stmt 0 view .LVU191
 873 0032 0E94 0000 		call register_code
 874               	.LVL85:
 443:quantum/quantum.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 875               		.loc 1 443 17 is_stmt 1 view .LVU192
 876 0036 8C2F      		mov r24,r28
 877               	.LVL86:
 878               	.L81:
 443:quantum/quantum.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 879               		.loc 1 443 17 is_stmt 0 view .LVU193
 880               	.LBE40:
 881               	.LBB41:
 451:quantum/quantum.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 882               		.loc 1 451 17 view .LVU194
 883 0038 0E94 0000 		call unregister_code
 884               	.LVL87:
 885 003c 00C0      		rjmp .L82
 886               	.LVL88:
 887               	.L69:
 451:quantum/quantum.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 888               		.loc 1 451 17 view .LVU195
 889               	.LBE41:
 444:quantum/quantum.c ****                 // down
 890               		.loc 1 444 20 is_stmt 1 view .LVU196
 444:quantum/quantum.c ****                 // down
 891               		.loc 1 444 23 is_stmt 0 view .LVU197
 892 003e 8230      		cpi r24,lo8(2)
 893 0040 01F4      		brne .L71
 894               	.LBB42:
 446:quantum/quantum.c ****                 register_code(keycode);
 895               		.loc 1 446 17 is_stmt 1 view .LVU198
 446:quantum/quantum.c ****                 register_code(keycode);
 896               		.loc 1 446 25 is_stmt 0 view .LVU199
 897 0042 7E01      		movw r14,r28
 898 0044 82E0      		ldi r24,2
 899 0046 E80E      		add r14,r24
 900 0048 F11C      		adc r15,__zero_reg__
 901               	.LVL89:
 447:quantum/quantum.c ****             } else if (ascii_code == SS_UP_CODE) {
 902               		.loc 1 447 17 is_stmt 1 view .LVU200
 903 004a 8A81      		ldd r24,Y+2
 904 004c 0E94 0000 		call register_code
 905               	.LVL90:
 906               	.L82:
 447:quantum/quantum.c ****             } else if (ascii_code == SS_UP_CODE) {
 907               		.loc 1 447 17 is_stmt 0 view .LVU201
 908               	.LBE42:
 909               	.LBB43:
 450:quantum/quantum.c ****                 unregister_code(keycode);
 910               		.loc 1 450 25 view .LVU202
 911 0050 E701      		movw r28,r14
 912               	.LVL91:
 913               	.L70:
 450:quantum/quantum.c ****                 unregister_code(keycode);
 914               		.loc 1 450 25 view .LVU203
 915               	.LBE43:
 466:quantum/quantum.c ****         // interval
 916               		.loc 1 466 9 is_stmt 1 view .LVU204
 466:quantum/quantum.c ****         // interval
 917               		.loc 1 466 9 is_stmt 0 view .LVU205
 918 0052 2196      		adiw r28,1
 919               	.LVL92:
 920               	.LBB44:
 469:quantum/quantum.c ****             while (ms--) wait_ms(1);
 921               		.loc 1 469 13 is_stmt 1 view .LVU206
 470:quantum/quantum.c ****         }
 922               		.loc 1 470 13 view .LVU207
 469:quantum/quantum.c ****             while (ms--) wait_ms(1);
 923               		.loc 1 469 21 is_stmt 0 view .LVU208
 924 0054 812F      		mov r24,r17
 925               	.LVL93:
 926               	.L78:
 470:quantum/quantum.c ****         }
 927               		.loc 1 470 22 discriminator 1 view .LVU209
 928               	.LVL94:
 929 0056 8150      		subi r24,1
 930 0058 00F0      		brcs .L80
 470:quantum/quantum.c ****         }
 931               		.loc 1 470 26 is_stmt 1 view .LVU210
 932               	.LBB45:
 933               	.LBI45:
 934               		.file 2 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h"
   1:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 935               		.loc 2 166 1 view .LVU211
 936               	.LBB46:
 167:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 937               		.loc 2 168 2 view .LVU212
 169:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 938               		.loc 2 172 2 view .LVU213
 173:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 939               		.loc 2 173 2 view .LVU214
 174:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 940               		.loc 2 174 2 view .LVU215
 175:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 941               		.loc 2 184 3 view .LVU216
 185:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 942               		.loc 2 187 2 view .LVU217
 943 005a EFE9      		ldi r30,lo8(3999)
 944 005c FFE0      		ldi r31,hi8(3999)
 945 005e 3197      	1:	sbiw r30,1
 946 0060 01F4      		brne 1b
 947 0062 00C0      		rjmp .
 948 0064 0000      		nop
 949 0066 00C0      		rjmp .L78
 950               	.LVL95:
 951               	.L71:
 952               		.loc 2 187 2 is_stmt 0 view .LVU218
 953               	.LBE46:
 954               	.LBE45:
 955               	.LBE44:
 448:quantum/quantum.c ****                 // up
 956               		.loc 1 448 20 is_stmt 1 view .LVU219
 448:quantum/quantum.c ****                 // up
 957               		.loc 1 448 23 is_stmt 0 view .LVU220
 958 0068 8330      		cpi r24,lo8(3)
 959 006a 01F4      		brne .L72
 960               	.LBB47:
 450:quantum/quantum.c ****                 unregister_code(keycode);
 961               		.loc 1 450 17 is_stmt 1 view .LVU221
 450:quantum/quantum.c ****                 unregister_code(keycode);
 962               		.loc 1 450 25 is_stmt 0 view .LVU222
 963 006c 7E01      		movw r14,r28
 964 006e E2E0      		ldi r30,2
 965 0070 EE0E      		add r14,r30
 966 0072 F11C      		adc r15,__zero_reg__
 967               	.LVL96:
 451:quantum/quantum.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 968               		.loc 1 451 17 is_stmt 1 view .LVU223
 969 0074 8A81      		ldd r24,Y+2
 970               	.LVL97:
 451:quantum/quantum.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 971               		.loc 1 451 17 is_stmt 0 view .LVU224
 972 0076 00C0      		rjmp .L81
 973               	.LVL98:
 974               	.L72:
 451:quantum/quantum.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 975               		.loc 1 451 17 view .LVU225
 976               	.LBE47:
 452:quantum/quantum.c ****                 // delay
 977               		.loc 1 452 20 is_stmt 1 view .LVU226
 452:quantum/quantum.c ****                 // delay
 978               		.loc 1 452 23 is_stmt 0 view .LVU227
 979 0078 8430      		cpi r24,lo8(4)
 980 007a 01F0      		breq .L73
 981               	.LVL99:
 452:quantum/quantum.c ****                 // delay
 982               		.loc 1 452 23 view .LVU228
 983 007c 2196      		adiw r28,1
 984               	.LVL100:
 452:quantum/quantum.c ****                 // delay
 985               		.loc 1 452 23 view .LVU229
 986 007e 00C0      		rjmp .L70
 987               	.L73:
 988               	.LBB48:
 454:quantum/quantum.c ****                 uint8_t keycode = *(++str);
 989               		.loc 1 454 17 is_stmt 1 view .LVU230
 990               	.LVL101:
 455:quantum/quantum.c ****                 while (isdigit(keycode)) {
 991               		.loc 1 455 17 view .LVU231
 455:quantum/quantum.c ****                 while (isdigit(keycode)) {
 992               		.loc 1 455 25 is_stmt 0 view .LVU232
 993 0080 2A81      		ldd r18,Y+2
 994               	.LVL102:
 456:quantum/quantum.c ****                     ms *= 10;
 995               		.loc 1 456 17 is_stmt 1 view .LVU233
 455:quantum/quantum.c ****                 while (isdigit(keycode)) {
 996               		.loc 1 455 25 is_stmt 0 view .LVU234
 997 0082 2296      		adiw r28,2
 998               	.LVL103:
 454:quantum/quantum.c ****                 uint8_t keycode = *(++str);
 999               		.loc 1 454 25 view .LVU235
 1000 0084 90E0      		ldi r25,0
 1001 0086 80E0      		ldi r24,0
 1002               	.LVL104:
 1003               	.L74:
 454:quantum/quantum.c ****                 uint8_t keycode = *(++str);
 1004               		.loc 1 454 25 view .LVU236
 1005 0088 AE01      		movw r20,r28
 1006 008a 4F5F      		subi r20,-1
 1007 008c 5F4F      		sbci r21,-1
 456:quantum/quantum.c ****                     ms *= 10;
 1008               		.loc 1 456 24 view .LVU237
 1009 008e 2053      		subi r18,48
 1010 0090 330B      		sbc r19,r19
 1011               	.LVL105:
 456:quantum/quantum.c ****                     ms *= 10;
 1012               		.loc 1 456 23 view .LVU238
 1013 0092 2A30      		cpi r18,10
 1014 0094 3105      		cpc r19,__zero_reg__
 1015 0096 00F0      		brlo .L75
 1016               	.L76:
 461:quantum/quantum.c ****             }
 1017               		.loc 1 461 26 discriminator 1 view .LVU239
 1018               	.LVL106:
 1019 0098 0197      		sbiw r24,1
 1020 009a 00F0      		brcs .L70
 461:quantum/quantum.c ****             }
 1021               		.loc 1 461 30 is_stmt 1 view .LVU240
 1022               	.LBB38:
 1023               	.LBI38:
 166:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1024               		.loc 2 166 1 view .LVU241
 1025               	.LBB39:
 168:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1026               		.loc 2 168 2 view .LVU242
 172:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1027               		.loc 2 172 2 view .LVU243
 173:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1028               		.loc 2 173 2 view .LVU244
 174:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1029               		.loc 2 174 2 view .LVU245
 184:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1030               		.loc 2 184 3 view .LVU246
 1031               		.loc 2 187 2 view .LVU247
 1032 009c EFE9      		ldi r30,lo8(3999)
 1033 009e FFE0      		ldi r31,hi8(3999)
 1034 00a0 3197      	1:	sbiw r30,1
 1035 00a2 01F4      		brne 1b
 1036 00a4 00C0      		rjmp .
 1037 00a6 0000      		nop
 1038 00a8 00C0      		rjmp .L76
 1039               	.LVL107:
 1040               	.L75:
 1041               		.loc 2 187 2 is_stmt 0 view .LVU248
 1042               	.LBE39:
 1043               	.LBE38:
 457:quantum/quantum.c ****                     ms += keycode - '0';
 1044               		.loc 1 457 21 is_stmt 1 view .LVU249
 457:quantum/quantum.c ****                     ms += keycode - '0';
 1045               		.loc 1 457 24 is_stmt 0 view .LVU250
 1046 00aa 089F      		mul r16,r24
 1047 00ac B001      		movw r22,r0
 1048 00ae 099F      		mul r16,r25
 1049 00b0 700D      		add r23,r0
 1050 00b2 1124      		clr __zero_reg__
 1051               	.LVL108:
 458:quantum/quantum.c ****                     keycode = *(++str);
 1052               		.loc 1 458 21 is_stmt 1 view .LVU251
 458:quantum/quantum.c ****                     keycode = *(++str);
 1053               		.loc 1 458 24 is_stmt 0 view .LVU252
 1054 00b4 C901      		movw r24,r18
 1055 00b6 860F      		add r24,r22
 1056 00b8 971F      		adc r25,r23
 1057               	.LVL109:
 459:quantum/quantum.c ****                 }
 1058               		.loc 1 459 21 is_stmt 1 view .LVU253
 459:quantum/quantum.c ****                 }
 1059               		.loc 1 459 29 is_stmt 0 view .LVU254
 1060 00ba 2981      		ldd r18,Y+1
 1061               	.LVL110:
 459:quantum/quantum.c ****                 }
 1062               		.loc 1 459 29 view .LVU255
 1063 00bc EA01      		movw r28,r20
 1064 00be 00C0      		rjmp .L74
 1065               	.LVL111:
 1066               	.L68:
 459:quantum/quantum.c ****                 }
 1067               		.loc 1 459 29 view .LVU256
 1068               	.LBE48:
 464:quantum/quantum.c ****         }
 1069               		.loc 1 464 13 is_stmt 1 view .LVU257
 1070 00c0 0E94 0000 		call send_char
 1071               	.LVL112:
 464:quantum/quantum.c ****         }
 1072               		.loc 1 464 13 is_stmt 0 view .LVU258
 1073 00c4 00C0      		rjmp .L70
 1074               	.LVL113:
 1075               	.L66:
 1076               	/* epilogue start */
 464:quantum/quantum.c ****         }
 1077               		.loc 1 464 13 view .LVU259
 1078               	.LBE49:
 473:quantum/quantum.c **** 
 1079               		.loc 1 473 1 view .LVU260
 1080 00c6 DF91      		pop r29
 1081 00c8 CF91      		pop r28
 1082               	.LVL114:
 473:quantum/quantum.c **** 
 1083               		.loc 1 473 1 view .LVU261
 1084 00ca 1F91      		pop r17
 1085               	.LVL115:
 473:quantum/quantum.c **** 
 1086               		.loc 1 473 1 view .LVU262
 1087 00cc 0F91      		pop r16
 1088 00ce FF90      		pop r15
 1089 00d0 EF90      		pop r14
 1090 00d2 0895      		ret
 1091               		.cfi_endproc
 1092               	.LFE35:
 1094               		.section	.text.send_string,"ax",@progbits
 1095               	.global	send_string
 1097               	send_string:
 1098               	.LVL116:
 1099               	.LFB33:
 429:quantum/quantum.c **** 
 1100               		.loc 1 429 35 is_stmt 1 view -0
 1101               		.cfi_startproc
 1102               	/* prologue: function */
 1103               	/* frame size = 0 */
 1104               	/* stack size = 0 */
 1105               	.L__stack_usage = 0
 429:quantum/quantum.c **** 
 1106               		.loc 1 429 37 view .LVU264
 1107 0000 60E0      		ldi r22,0
 1108 0002 0C94 0000 		jmp send_string_with_delay
 1109               	.LVL117:
 429:quantum/quantum.c **** 
 1110               		.loc 1 429 37 is_stmt 0 view .LVU265
 1111               		.cfi_endproc
 1112               	.LFE33:
 1114               		.section	.text.send_string_with_delay_P,"ax",@progbits
 1115               	.global	send_string_with_delay_P
 1117               	send_string_with_delay_P:
 1118               	.LVL118:
 1119               	.LFB36:
 475:quantum/quantum.c ****     while (1) {
 1120               		.loc 1 475 66 is_stmt 1 view -0
 1121               		.cfi_startproc
 475:quantum/quantum.c ****     while (1) {
 1122               		.loc 1 475 66 is_stmt 0 view .LVU267
 1123 0000 EF92      		push r14
 1124               	.LCFI26:
 1125               		.cfi_def_cfa_offset 3
 1126               		.cfi_offset 14, -2
 1127 0002 FF92      		push r15
 1128               	.LCFI27:
 1129               		.cfi_def_cfa_offset 4
 1130               		.cfi_offset 15, -3
 1131 0004 0F93      		push r16
 1132               	.LCFI28:
 1133               		.cfi_def_cfa_offset 5
 1134               		.cfi_offset 16, -4
 1135 0006 1F93      		push r17
 1136               	.LCFI29:
 1137               		.cfi_def_cfa_offset 6
 1138               		.cfi_offset 17, -5
 1139 0008 CF93      		push r28
 1140               	.LCFI30:
 1141               		.cfi_def_cfa_offset 7
 1142               		.cfi_offset 28, -6
 1143 000a DF93      		push r29
 1144               	.LCFI31:
 1145               		.cfi_def_cfa_offset 8
 1146               		.cfi_offset 29, -7
 1147               	/* prologue: function */
 1148               	/* frame size = 0 */
 1149               	/* stack size = 6 */
 1150               	.L__stack_usage = 6
 1151 000c 8C01      		movw r16,r24
 1152 000e F62E      		mov r15,r22
 1153               	.LBB50:
 1154               	.LBB51:
 499:quantum/quantum.c ****                     ms += keycode - '0';
 1155               		.loc 1 499 24 view .LVU268
 1156 0010 8AE0      		ldi r24,lo8(10)
 1157 0012 E82E      		mov r14,r24
 1158               	.LVL119:
 1159               	.L97:
 499:quantum/quantum.c ****                     ms += keycode - '0';
 1160               		.loc 1 499 24 view .LVU269
 1161               	.LBE51:
 1162               	.LBE50:
 476:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 1163               		.loc 1 476 5 is_stmt 1 view .LVU270
 1164               	.LBB70:
 477:quantum/quantum.c ****         if (!ascii_code) break;
 1165               		.loc 1 477 9 view .LVU271
 1166               	.LBB56:
 477:quantum/quantum.c ****         if (!ascii_code) break;
 1167               		.loc 1 477 27 view .LVU272
 477:quantum/quantum.c ****         if (!ascii_code) break;
 1168               		.loc 1 477 27 view .LVU273
 477:quantum/quantum.c ****         if (!ascii_code) break;
 1169               		.loc 1 477 27 view .LVU274
 1170 0014 F801      		movw r30,r16
 1171               	/* #APP */
 1172               	 ;  477 "quantum/quantum.c" 1
 1173 0016 8491      		lpm r24, Z
 1174               		
 1175               	 ;  0 "" 2
 1176               	.LVL120:
 477:quantum/quantum.c ****         if (!ascii_code) break;
 1177               		.loc 1 477 27 view .LVU275
 477:quantum/quantum.c ****         if (!ascii_code) break;
 1178               		.loc 1 477 27 is_stmt 0 view .LVU276
 1179               	/* #NOAPP */
 1180               	.LBE56:
 478:quantum/quantum.c ****         if (ascii_code == SS_QMK_PREFIX) {
 1181               		.loc 1 478 9 is_stmt 1 view .LVU277
 478:quantum/quantum.c ****         if (ascii_code == SS_QMK_PREFIX) {
 1182               		.loc 1 478 12 is_stmt 0 view .LVU278
 1183 0018 8823      		tst r24
 1184 001a 01F4      		brne .+2
 1185 001c 00C0      		rjmp .L84
 479:quantum/quantum.c ****             ascii_code = pgm_read_byte(++str);
 1186               		.loc 1 479 9 is_stmt 1 view .LVU279
 479:quantum/quantum.c ****             ascii_code = pgm_read_byte(++str);
 1187               		.loc 1 479 12 is_stmt 0 view .LVU280
 1188 001e 8130      		cpi r24,lo8(1)
 1189 0020 01F0      		breq .+2
 1190 0022 00C0      		rjmp .L86
 1191 0024 E801      		movw r28,r16
 1192 0026 2196      		adiw r28,1
 480:quantum/quantum.c ****             if (ascii_code == SS_TAP_CODE) {
 1193               		.loc 1 480 13 is_stmt 1 view .LVU281
 1194               	.LBB57:
 480:quantum/quantum.c ****             if (ascii_code == SS_TAP_CODE) {
 1195               		.loc 1 480 26 view .LVU282
 1196               	.LVL121:
 480:quantum/quantum.c ****             if (ascii_code == SS_TAP_CODE) {
 1197               		.loc 1 480 26 view .LVU283
 480:quantum/quantum.c ****             if (ascii_code == SS_TAP_CODE) {
 1198               		.loc 1 480 26 view .LVU284
 1199 0028 FE01      		movw r30,r28
 1200               	/* #APP */
 1201               	 ;  480 "quantum/quantum.c" 1
 1202 002a 8491      		lpm r24, Z
 1203               		
 1204               	 ;  0 "" 2
 1205               	.LVL122:
 480:quantum/quantum.c ****             if (ascii_code == SS_TAP_CODE) {
 1206               		.loc 1 480 26 view .LVU285
 480:quantum/quantum.c ****             if (ascii_code == SS_TAP_CODE) {
 1207               		.loc 1 480 26 is_stmt 0 view .LVU286
 1208               	/* #NOAPP */
 1209               	.LBE57:
 481:quantum/quantum.c ****                 // tap
 1210               		.loc 1 481 13 is_stmt 1 view .LVU287
 481:quantum/quantum.c ****                 // tap
 1211               		.loc 1 481 16 is_stmt 0 view .LVU288
 1212 002c 8130      		cpi r24,lo8(1)
 1213 002e 01F4      		brne .L87
 1214               	.LBB58:
 483:quantum/quantum.c ****                 register_code(keycode);
 1215               		.loc 1 483 17 is_stmt 1 view .LVU289
 1216               	.LBB59:
 483:quantum/quantum.c ****                 register_code(keycode);
 1217               		.loc 1 483 35 view .LVU290
 1218 0030 2196      		adiw r28,1
 1219               	.LVL123:
 483:quantum/quantum.c ****                 register_code(keycode);
 1220               		.loc 1 483 35 view .LVU291
 483:quantum/quantum.c ****                 register_code(keycode);
 1221               		.loc 1 483 35 view .LVU292
 1222 0032 FE01      		movw r30,r28
 1223               	.LVL124:
 483:quantum/quantum.c ****                 register_code(keycode);
 1224               		.loc 1 483 35 is_stmt 0 view .LVU293
 1225               	/* #APP */
 1226               	 ;  483 "quantum/quantum.c" 1
 1227 0034 1491      		lpm r17, Z
 1228               		
 1229               	 ;  0 "" 2
 1230               	.LVL125:
 483:quantum/quantum.c ****                 register_code(keycode);
 1231               		.loc 1 483 35 is_stmt 1 view .LVU294
 483:quantum/quantum.c ****                 register_code(keycode);
 1232               		.loc 1 483 35 is_stmt 0 view .LVU295
 1233               	/* #NOAPP */
 1234               	.LBE59:
 484:quantum/quantum.c ****                 unregister_code(keycode);
 1235               		.loc 1 484 17 is_stmt 1 view .LVU296
 1236 0036 812F      		mov r24,r17
 1237               	.LVL126:
 484:quantum/quantum.c ****                 unregister_code(keycode);
 1238               		.loc 1 484 17 is_stmt 0 view .LVU297
 1239 0038 0E94 0000 		call register_code
 1240               	.LVL127:
 485:quantum/quantum.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 1241               		.loc 1 485 17 is_stmt 1 view .LVU298
 1242 003c 812F      		mov r24,r17
 1243               	.LVL128:
 1244               	.L98:
 485:quantum/quantum.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 1245               		.loc 1 485 17 is_stmt 0 view .LVU299
 1246               	.LBE58:
 1247               	.LBB60:
 1248               	.LBB61:
 492:quantum/quantum.c ****                 unregister_code(keycode);
 1249               		.loc 1 492 35 is_stmt 1 view .LVU300
 492:quantum/quantum.c ****                 unregister_code(keycode);
 1250               		.loc 1 492 35 is_stmt 0 view .LVU301
 1251               	.LBE61:
 493:quantum/quantum.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 1252               		.loc 1 493 17 is_stmt 1 view .LVU302
 1253 003e 0E94 0000 		call unregister_code
 1254               	.LVL129:
 493:quantum/quantum.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 1255               		.loc 1 493 17 is_stmt 0 view .LVU303
 1256               	.LBE60:
 1257 0042 00C0      		rjmp .L88
 1258               	.LVL130:
 1259               	.L87:
 486:quantum/quantum.c ****                 // down
 1260               		.loc 1 486 20 is_stmt 1 view .LVU304
 486:quantum/quantum.c ****                 // down
 1261               		.loc 1 486 23 is_stmt 0 view .LVU305
 1262 0044 8230      		cpi r24,lo8(2)
 1263 0046 01F4      		brne .L89
 1264               	.LBB63:
 488:quantum/quantum.c ****                 register_code(keycode);
 1265               		.loc 1 488 17 is_stmt 1 view .LVU306
 1266               	.LBB64:
 488:quantum/quantum.c ****                 register_code(keycode);
 1267               		.loc 1 488 35 view .LVU307
 1268 0048 E801      		movw r28,r16
 1269               	.LVL131:
 488:quantum/quantum.c ****                 register_code(keycode);
 1270               		.loc 1 488 35 is_stmt 0 view .LVU308
 1271 004a 2296      		adiw r28,2
 1272               	.LVL132:
 488:quantum/quantum.c ****                 register_code(keycode);
 1273               		.loc 1 488 35 is_stmt 1 view .LVU309
 488:quantum/quantum.c ****                 register_code(keycode);
 1274               		.loc 1 488 35 view .LVU310
 1275 004c FE01      		movw r30,r28
 1276               	.LVL133:
 488:quantum/quantum.c ****                 register_code(keycode);
 1277               		.loc 1 488 35 is_stmt 0 view .LVU311
 1278               	/* #APP */
 1279               	 ;  488 "quantum/quantum.c" 1
 1280 004e 8491      		lpm r24, Z
 1281               		
 1282               	 ;  0 "" 2
 1283               	.LVL134:
 488:quantum/quantum.c ****                 register_code(keycode);
 1284               		.loc 1 488 35 is_stmt 1 view .LVU312
 488:quantum/quantum.c ****                 register_code(keycode);
 1285               		.loc 1 488 35 is_stmt 0 view .LVU313
 1286               	/* #NOAPP */
 1287               	.LBE64:
 489:quantum/quantum.c ****             } else if (ascii_code == SS_UP_CODE) {
 1288               		.loc 1 489 17 is_stmt 1 view .LVU314
 1289 0050 0E94 0000 		call register_code
 1290               	.LVL135:
 1291               	.L88:
 489:quantum/quantum.c ****             } else if (ascii_code == SS_UP_CODE) {
 1292               		.loc 1 489 17 is_stmt 0 view .LVU315
 1293               	.LBE63:
 508:quantum/quantum.c ****         // interval
 1294               		.loc 1 508 9 is_stmt 1 view .LVU316
 1295 0054 8E01      		movw r16,r28
 1296               	.LVL136:
 508:quantum/quantum.c ****         // interval
 1297               		.loc 1 508 9 is_stmt 0 view .LVU317
 1298 0056 0F5F      		subi r16,-1
 1299 0058 1F4F      		sbci r17,-1
 1300               	.LVL137:
 1301               	.LBB65:
 511:quantum/quantum.c ****             while (ms--) wait_ms(1);
 1302               		.loc 1 511 13 is_stmt 1 view .LVU318
 512:quantum/quantum.c ****         }
 1303               		.loc 1 512 13 view .LVU319
 511:quantum/quantum.c ****             while (ms--) wait_ms(1);
 1304               		.loc 1 511 21 is_stmt 0 view .LVU320
 1305 005a 8F2D      		mov r24,r15
 1306               	.LVL138:
 1307               	.L95:
 512:quantum/quantum.c ****         }
 1308               		.loc 1 512 22 discriminator 1 view .LVU321
 1309               	.LVL139:
 1310 005c 8150      		subi r24,1
 1311 005e 00F0      		brcs .L97
 512:quantum/quantum.c ****         }
 1312               		.loc 1 512 26 is_stmt 1 view .LVU322
 1313               	.LBB66:
 1314               	.LBI66:
 166:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1315               		.loc 2 166 1 view .LVU323
 1316               	.LBB67:
 168:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1317               		.loc 2 168 2 view .LVU324
 172:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1318               		.loc 2 172 2 view .LVU325
 173:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1319               		.loc 2 173 2 view .LVU326
 174:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1320               		.loc 2 174 2 view .LVU327
 184:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1321               		.loc 2 184 3 view .LVU328
 1322               		.loc 2 187 2 view .LVU329
 1323 0060 EFE9      		ldi r30,lo8(3999)
 1324 0062 FFE0      		ldi r31,hi8(3999)
 1325 0064 3197      	1:	sbiw r30,1
 1326 0066 01F4      		brne 1b
 1327 0068 00C0      		rjmp .
 1328 006a 0000      		nop
 1329 006c 00C0      		rjmp .L95
 1330               	.LVL140:
 1331               	.L89:
 1332               		.loc 2 187 2 is_stmt 0 view .LVU330
 1333               	.LBE67:
 1334               	.LBE66:
 1335               	.LBE65:
 490:quantum/quantum.c ****                 // up
 1336               		.loc 1 490 20 is_stmt 1 view .LVU331
 490:quantum/quantum.c ****                 // up
 1337               		.loc 1 490 23 is_stmt 0 view .LVU332
 1338 006e 8330      		cpi r24,lo8(3)
 1339 0070 01F4      		brne .L90
 1340               	.LBB68:
 492:quantum/quantum.c ****                 unregister_code(keycode);
 1341               		.loc 1 492 17 is_stmt 1 view .LVU333
 1342               	.LBB62:
 492:quantum/quantum.c ****                 unregister_code(keycode);
 1343               		.loc 1 492 35 view .LVU334
 1344 0072 E801      		movw r28,r16
 1345               	.LVL141:
 492:quantum/quantum.c ****                 unregister_code(keycode);
 1346               		.loc 1 492 35 is_stmt 0 view .LVU335
 1347 0074 2296      		adiw r28,2
 1348               	.LVL142:
 492:quantum/quantum.c ****                 unregister_code(keycode);
 1349               		.loc 1 492 35 is_stmt 1 view .LVU336
 492:quantum/quantum.c ****                 unregister_code(keycode);
 1350               		.loc 1 492 35 view .LVU337
 1351 0076 FE01      		movw r30,r28
 1352               	.LVL143:
 492:quantum/quantum.c ****                 unregister_code(keycode);
 1353               		.loc 1 492 35 is_stmt 0 view .LVU338
 1354               	/* #APP */
 1355               	 ;  492 "quantum/quantum.c" 1
 1356 0078 8491      		lpm r24, Z
 1357               		
 1358               	 ;  0 "" 2
 1359               	.LVL144:
 492:quantum/quantum.c ****                 unregister_code(keycode);
 1360               		.loc 1 492 35 view .LVU339
 1361               	/* #NOAPP */
 1362 007a 00C0      		rjmp .L98
 1363               	.LVL145:
 1364               	.L90:
 492:quantum/quantum.c ****                 unregister_code(keycode);
 1365               		.loc 1 492 35 view .LVU340
 1366               	.LBE62:
 1367               	.LBE68:
 494:quantum/quantum.c ****                 // delay
 1368               		.loc 1 494 20 is_stmt 1 view .LVU341
 494:quantum/quantum.c ****                 // delay
 1369               		.loc 1 494 23 is_stmt 0 view .LVU342
 1370 007c 8430      		cpi r24,lo8(4)
 1371 007e 01F4      		brne .L88
 1372               	.LBB69:
 496:quantum/quantum.c ****                 uint8_t keycode = pgm_read_byte(++str);
 1373               		.loc 1 496 17 is_stmt 1 view .LVU343
 1374               	.LVL146:
 497:quantum/quantum.c ****                 while (isdigit(keycode)) {
 1375               		.loc 1 497 17 view .LVU344
 1376               	.LBB52:
 497:quantum/quantum.c ****                 while (isdigit(keycode)) {
 1377               		.loc 1 497 35 view .LVU345
 1378 0080 E801      		movw r28,r16
 1379               	.LVL147:
 497:quantum/quantum.c ****                 while (isdigit(keycode)) {
 1380               		.loc 1 497 35 is_stmt 0 view .LVU346
 1381 0082 2296      		adiw r28,2
 1382               	.LVL148:
 497:quantum/quantum.c ****                 while (isdigit(keycode)) {
 1383               		.loc 1 497 35 is_stmt 1 view .LVU347
 497:quantum/quantum.c ****                 while (isdigit(keycode)) {
 1384               		.loc 1 497 35 view .LVU348
 1385 0084 FE01      		movw r30,r28
 1386               	.LVL149:
 497:quantum/quantum.c ****                 while (isdigit(keycode)) {
 1387               		.loc 1 497 35 is_stmt 0 view .LVU349
 1388               	/* #APP */
 1389               	 ;  497 "quantum/quantum.c" 1
 1390 0086 2491      		lpm r18, Z
 1391               		
 1392               	 ;  0 "" 2
 1393               	.LVL150:
 497:quantum/quantum.c ****                 while (isdigit(keycode)) {
 1394               		.loc 1 497 35 is_stmt 1 view .LVU350
 497:quantum/quantum.c ****                 while (isdigit(keycode)) {
 1395               		.loc 1 497 35 is_stmt 0 view .LVU351
 1396               	/* #NOAPP */
 1397               	.LBE52:
 498:quantum/quantum.c ****                     ms *= 10;
 1398               		.loc 1 498 17 is_stmt 1 view .LVU352
 496:quantum/quantum.c ****                 uint8_t keycode = pgm_read_byte(++str);
 1399               		.loc 1 496 25 is_stmt 0 view .LVU353
 1400 0088 90E0      		ldi r25,0
 1401 008a 80E0      		ldi r24,0
 1402               	.LVL151:
 1403               	.L91:
 496:quantum/quantum.c ****                 uint8_t keycode = pgm_read_byte(++str);
 1404               		.loc 1 496 25 view .LVU354
 1405 008c FE01      		movw r30,r28
 1406 008e 3196      		adiw r30,1
 498:quantum/quantum.c ****                     ms *= 10;
 1407               		.loc 1 498 24 view .LVU355
 1408 0090 2053      		subi r18,48
 1409 0092 330B      		sbc r19,r19
 1410               	.LVL152:
 498:quantum/quantum.c ****                     ms *= 10;
 1411               		.loc 1 498 23 view .LVU356
 1412 0094 2A30      		cpi r18,10
 1413 0096 3105      		cpc r19,__zero_reg__
 1414 0098 00F0      		brlo .L92
 1415               	.L93:
 503:quantum/quantum.c ****             }
 1416               		.loc 1 503 26 discriminator 1 view .LVU357
 1417               	.LVL153:
 1418 009a 0197      		sbiw r24,1
 1419 009c 00F0      		brcs .L88
 503:quantum/quantum.c ****             }
 1420               		.loc 1 503 30 is_stmt 1 view .LVU358
 1421               	.LBB53:
 1422               	.LBI53:
 166:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1423               		.loc 2 166 1 view .LVU359
 1424               	.LBB54:
 168:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1425               		.loc 2 168 2 view .LVU360
 172:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1426               		.loc 2 172 2 view .LVU361
 173:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1427               		.loc 2 173 2 view .LVU362
 174:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1428               		.loc 2 174 2 view .LVU363
 184:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1429               		.loc 2 184 3 view .LVU364
 1430               		.loc 2 187 2 view .LVU365
 1431 009e EFE9      		ldi r30,lo8(3999)
 1432 00a0 FFE0      		ldi r31,hi8(3999)
 1433 00a2 3197      	1:	sbiw r30,1
 1434 00a4 01F4      		brne 1b
 1435 00a6 00C0      		rjmp .
 1436 00a8 0000      		nop
 1437 00aa 00C0      		rjmp .L93
 1438               	.LVL154:
 1439               	.L92:
 1440               		.loc 2 187 2 is_stmt 0 view .LVU366
 1441               	.LBE54:
 1442               	.LBE53:
 499:quantum/quantum.c ****                     ms += keycode - '0';
 1443               		.loc 1 499 21 is_stmt 1 view .LVU367
 499:quantum/quantum.c ****                     ms += keycode - '0';
 1444               		.loc 1 499 24 is_stmt 0 view .LVU368
 1445 00ac E89E      		mul r14,r24
 1446 00ae A001      		movw r20,r0
 1447 00b0 E99E      		mul r14,r25
 1448 00b2 500D      		add r21,r0
 1449 00b4 1124      		clr __zero_reg__
 1450               	.LVL155:
 500:quantum/quantum.c ****                     keycode = pgm_read_byte(++str);
 1451               		.loc 1 500 21 is_stmt 1 view .LVU369
 500:quantum/quantum.c ****                     keycode = pgm_read_byte(++str);
 1452               		.loc 1 500 24 is_stmt 0 view .LVU370
 1453 00b6 C901      		movw r24,r18
 1454 00b8 840F      		add r24,r20
 1455 00ba 951F      		adc r25,r21
 1456               	.LVL156:
 501:quantum/quantum.c ****                 }
 1457               		.loc 1 501 21 is_stmt 1 view .LVU371
 1458               	.LBB55:
 501:quantum/quantum.c ****                 }
 1459               		.loc 1 501 31 view .LVU372
 501:quantum/quantum.c ****                 }
 1460               		.loc 1 501 31 view .LVU373
 501:quantum/quantum.c ****                 }
 1461               		.loc 1 501 31 view .LVU374
 1462               	/* #APP */
 1463               	 ;  501 "quantum/quantum.c" 1
 1464 00bc 2491      		lpm r18, Z
 1465               		
 1466               	 ;  0 "" 2
 1467               	.LVL157:
 501:quantum/quantum.c ****                 }
 1468               		.loc 1 501 31 view .LVU375
 501:quantum/quantum.c ****                 }
 1469               		.loc 1 501 31 is_stmt 0 view .LVU376
 1470               	/* #NOAPP */
 1471 00be EF01      		movw r28,r30
 1472 00c0 00C0      		rjmp .L91
 1473               	.LVL158:
 1474               	.L86:
 501:quantum/quantum.c ****                 }
 1475               		.loc 1 501 31 view .LVU377
 1476               	.LBE55:
 1477               	.LBE69:
 506:quantum/quantum.c ****         }
 1478               		.loc 1 506 13 is_stmt 1 view .LVU378
 1479 00c2 0E94 0000 		call send_char
 1480               	.LVL159:
 506:quantum/quantum.c ****         }
 1481               		.loc 1 506 13 is_stmt 0 view .LVU379
 1482 00c6 E801      		movw r28,r16
 1483 00c8 00C0      		rjmp .L88
 1484               	.LVL160:
 1485               	.L84:
 1486               	/* epilogue start */
 506:quantum/quantum.c ****         }
 1487               		.loc 1 506 13 view .LVU380
 1488               	.LBE70:
 515:quantum/quantum.c **** 
 1489               		.loc 1 515 1 view .LVU381
 1490 00ca DF91      		pop r29
 1491 00cc CF91      		pop r28
 1492 00ce 1F91      		pop r17
 1493 00d0 0F91      		pop r16
 1494               	.LVL161:
 515:quantum/quantum.c **** 
 1495               		.loc 1 515 1 view .LVU382
 1496 00d2 FF90      		pop r15
 1497               	.LVL162:
 515:quantum/quantum.c **** 
 1498               		.loc 1 515 1 view .LVU383
 1499 00d4 EF90      		pop r14
 1500 00d6 0895      		ret
 1501               		.cfi_endproc
 1502               	.LFE36:
 1504               		.section	.text.send_string_P,"ax",@progbits
 1505               	.global	send_string_P
 1507               	send_string_P:
 1508               	.LVL163:
 1509               	.LFB34:
 431:quantum/quantum.c **** 
 1510               		.loc 1 431 37 is_stmt 1 view -0
 1511               		.cfi_startproc
 1512               	/* prologue: function */
 1513               	/* frame size = 0 */
 1514               	/* stack size = 0 */
 1515               	.L__stack_usage = 0
 431:quantum/quantum.c **** 
 1516               		.loc 1 431 39 view .LVU385
 1517 0000 60E0      		ldi r22,0
 1518 0002 0C94 0000 		jmp send_string_with_delay_P
 1519               	.LVL164:
 431:quantum/quantum.c **** 
 1520               		.loc 1 431 39 is_stmt 0 view .LVU386
 1521               		.cfi_endproc
 1522               	.LFE34:
 1524               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1525               	.global	set_single_persistent_default_layer
 1527               	set_single_persistent_default_layer:
 1528               	.LVL165:
 1529               	.LFB38:
 543:quantum/quantum.c **** 
 544:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1530               		.loc 1 544 65 is_stmt 1 view -0
 1531               		.cfi_startproc
 1532               		.loc 1 544 65 is_stmt 0 view .LVU388
 1533 0000 CF93      		push r28
 1534               	.LCFI32:
 1535               		.cfi_def_cfa_offset 3
 1536               		.cfi_offset 28, -2
 1537 0002 DF93      		push r29
 1538               	.LCFI33:
 1539               		.cfi_def_cfa_offset 4
 1540               		.cfi_offset 29, -3
 1541               	/* prologue: function */
 1542               	/* frame size = 0 */
 1543               	/* stack size = 2 */
 1544               	.L__stack_usage = 2
 545:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 546:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 547:quantum/quantum.c **** #endif
 548:quantum/quantum.c ****     eeconfig_update_default_layer(1U << default_layer);
 1545               		.loc 1 548 5 is_stmt 1 view .LVU389
 1546               		.loc 1 548 38 is_stmt 0 view .LVU390
 1547 0004 C1E0      		ldi r28,lo8(1)
 1548 0006 D0E0      		ldi r29,0
 1549 0008 00C0      		rjmp 2f
 1550               		1:
 1551 000a CC0F      		lsl r28
 1552 000c DD1F      		rol r29
 1553               		2:
 1554 000e 8A95      		dec r24
 1555 0010 02F4      		brpl 1b
 1556               		.loc 1 548 5 view .LVU391
 1557 0012 8C2F      		mov r24,r28
 1558               	.LVL166:
 1559               		.loc 1 548 5 view .LVU392
 1560 0014 0E94 0000 		call eeconfig_update_default_layer
 1561               	.LVL167:
 549:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 1562               		.loc 1 549 5 is_stmt 1 view .LVU393
 1563 0018 BE01      		movw r22,r28
 1564 001a 90E0      		ldi r25,0
 1565 001c 80E0      		ldi r24,0
 1566               	/* epilogue start */
 550:quantum/quantum.c **** }
 1567               		.loc 1 550 1 is_stmt 0 view .LVU394
 1568 001e DF91      		pop r29
 1569 0020 CF91      		pop r28
 549:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 1570               		.loc 1 549 5 view .LVU395
 1571 0022 0C94 0000 		jmp default_layer_set
 1572               	.LVL168:
 1573               		.cfi_endproc
 1574               	.LFE38:
 1576               		.section	.text.update_tri_layer_state,"ax",@progbits
 1577               	.global	update_tri_layer_state
 1579               	update_tri_layer_state:
 1580               	.LVL169:
 1581               	.LFB39:
 551:quantum/quantum.c **** 
 552:quantum/quantum.c **** layer_state_t update_tri_layer_state(layer_state_t state, uint8_t layer1, uint8_t layer2, uint8_t l
 1582               		.loc 1 552 107 is_stmt 1 view -0
 1583               		.cfi_startproc
 1584               		.loc 1 552 107 is_stmt 0 view .LVU397
 1585 0000 8F92      		push r8
 1586               	.LCFI34:
 1587               		.cfi_def_cfa_offset 3
 1588               		.cfi_offset 8, -2
 1589 0002 9F92      		push r9
 1590               	.LCFI35:
 1591               		.cfi_def_cfa_offset 4
 1592               		.cfi_offset 9, -3
 1593 0004 AF92      		push r10
 1594               	.LCFI36:
 1595               		.cfi_def_cfa_offset 5
 1596               		.cfi_offset 10, -4
 1597 0006 BF92      		push r11
 1598               	.LCFI37:
 1599               		.cfi_def_cfa_offset 6
 1600               		.cfi_offset 11, -5
 1601 0008 CF92      		push r12
 1602               	.LCFI38:
 1603               		.cfi_def_cfa_offset 7
 1604               		.cfi_offset 12, -6
 1605 000a DF92      		push r13
 1606               	.LCFI39:
 1607               		.cfi_def_cfa_offset 8
 1608               		.cfi_offset 13, -7
 1609 000c EF92      		push r14
 1610               	.LCFI40:
 1611               		.cfi_def_cfa_offset 9
 1612               		.cfi_offset 14, -8
 1613 000e FF92      		push r15
 1614               	.LCFI41:
 1615               		.cfi_def_cfa_offset 10
 1616               		.cfi_offset 15, -9
 1617 0010 0F93      		push r16
 1618               	.LCFI42:
 1619               		.cfi_def_cfa_offset 11
 1620               		.cfi_offset 16, -10
 1621 0012 1F93      		push r17
 1622               	.LCFI43:
 1623               		.cfi_def_cfa_offset 12
 1624               		.cfi_offset 17, -11
 1625               	/* prologue: function */
 1626               	/* frame size = 0 */
 1627               	/* stack size = 10 */
 1628               	.L__stack_usage = 10
 1629 0014 6B01      		movw r12,r22
 1630 0016 7C01      		movw r14,r24
 553:quantum/quantum.c ****     layer_state_t mask12 = (1UL << layer1) | (1UL << layer2);
 1631               		.loc 1 553 5 is_stmt 1 view .LVU398
 1632               		.loc 1 553 33 is_stmt 0 view .LVU399
 1633 0018 81E0      		ldi r24,lo8(1)
 1634 001a 90E0      		ldi r25,0
 1635 001c A0E0      		ldi r26,0
 1636 001e B0E0      		ldi r27,0
 1637 0020 4C01      		movw r8,r24
 1638 0022 5D01      		movw r10,r26
 1639 0024 00C0      		rjmp 2f
 1640               		1:
 1641 0026 880C      		lsl r8
 1642 0028 991C      		rol r9
 1643 002a AA1C      		rol r10
 1644 002c BB1C      		rol r11
 1645               		2:
 1646 002e 4A95      		dec r20
 1647 0030 02F4      		brpl 1b
 1648 0032 B501      		movw r22,r10
 1649               	.LVL170:
 1650               		.loc 1 553 33 view .LVU400
 1651 0034 A401      		movw r20,r8
 1652               	.LVL171:
 1653               		.loc 1 553 51 view .LVU401
 1654 0036 4C01      		movw r8,r24
 1655 0038 5D01      		movw r10,r26
 1656 003a 00C0      		rjmp 2f
 1657               		1:
 1658 003c 880C      		lsl r8
 1659 003e 991C      		rol r9
 1660 0040 AA1C      		rol r10
 1661 0042 BB1C      		rol r11
 1662               		2:
 1663 0044 2A95      		dec r18
 1664 0046 02F4      		brpl 1b
 1665               		.loc 1 553 19 view .LVU402
 1666 0048 4829      		or r20,r8
 1667 004a 5929      		or r21,r9
 1668 004c 6A29      		or r22,r10
 1669 004e 7B29      		or r23,r11
 1670               	.LVL172:
 554:quantum/quantum.c ****     layer_state_t mask3  = 1UL << layer3;
 1671               		.loc 1 554 5 is_stmt 1 view .LVU403
 1672               		.loc 1 554 19 is_stmt 0 view .LVU404
 1673 0050 00C0      		rjmp 2f
 1674               		1:
 1675 0052 880F      		lsl r24
 1676 0054 991F      		rol r25
 1677 0056 AA1F      		rol r26
 1678 0058 BB1F      		rol r27
 1679               		2:
 1680 005a 0A95      		dec r16
 1681 005c 02F4      		brpl 1b
 1682               	.LVL173:
 555:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1683               		.loc 1 555 5 is_stmt 1 view .LVU405
 1684               		.loc 1 555 19 is_stmt 0 view .LVU406
 1685 005e 8A01      		movw r16,r20
 1686               	.LVL174:
 1687               		.loc 1 555 19 view .LVU407
 1688 0060 9B01      		movw r18,r22
 1689               	.LVL175:
 1690               		.loc 1 555 19 view .LVU408
 1691 0062 0C21      		and r16,r12
 1692 0064 1D21      		and r17,r13
 1693 0066 2E21      		and r18,r14
 1694 0068 3F21      		and r19,r15
 1695               		.loc 1 555 57 view .LVU409
 1696 006a 0417      		cp r16,r20
 1697 006c 1507      		cpc r17,r21
 1698 006e 2607      		cpc r18,r22
 1699 0070 3707      		cpc r19,r23
 1700 0072 01F4      		brne .L102
 1701               		.loc 1 555 57 discriminator 1 view .LVU410
 1702 0074 8C29      		or r24,r12
 1703               	.LVL176:
 1704               		.loc 1 555 57 discriminator 1 view .LVU411
 1705 0076 9D29      		or r25,r13
 1706 0078 AE29      		or r26,r14
 1707 007a BF29      		or r27,r15
 1708               	.L101:
 556:quantum/quantum.c **** }
 1709               		.loc 1 556 1 view .LVU412
 1710 007c BC01      		movw r22,r24
 1711 007e CD01      		movw r24,r26
 1712               	/* epilogue start */
 1713 0080 1F91      		pop r17
 1714               	.LVL177:
 1715               		.loc 1 556 1 view .LVU413
 1716 0082 0F91      		pop r16
 1717               	.LVL178:
 1718               		.loc 1 556 1 view .LVU414
 1719 0084 FF90      		pop r15
 1720 0086 EF90      		pop r14
 1721 0088 DF90      		pop r13
 1722 008a CF90      		pop r12
 1723 008c BF90      		pop r11
 1724 008e AF90      		pop r10
 1725 0090 9F90      		pop r9
 1726 0092 8F90      		pop r8
 1727               	.LVL179:
 1728               		.loc 1 556 1 view .LVU415
 1729 0094 0895      		ret
 1730               	.LVL180:
 1731               	.L102:
 555:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1732               		.loc 1 555 68 discriminator 2 view .LVU416
 1733 0096 8095      		com r24
 1734 0098 9095      		com r25
 1735 009a A095      		com r26
 1736 009c B095      		com r27
 1737               	.LVL181:
 555:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1738               		.loc 1 555 57 discriminator 2 view .LVU417
 1739 009e 8C21      		and r24,r12
 1740               	.LVL182:
 555:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1741               		.loc 1 555 57 discriminator 2 view .LVU418
 1742 00a0 9D21      		and r25,r13
 1743 00a2 AE21      		and r26,r14
 1744 00a4 BF21      		and r27,r15
 1745 00a6 00C0      		rjmp .L101
 1746               		.cfi_endproc
 1747               	.LFE39:
 1749               		.section	.text.update_tri_layer,"ax",@progbits
 1750               	.global	update_tri_layer
 1752               	update_tri_layer:
 1753               	.LVL183:
 1754               	.LFB40:
 557:quantum/quantum.c **** 
 558:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) { layer_state_set(update_tri_
 1755               		.loc 1 558 71 is_stmt 1 view -0
 1756               		.cfi_startproc
 1757               		.loc 1 558 71 is_stmt 0 view .LVU420
 1758 0000 0F93      		push r16
 1759               	.LCFI44:
 1760               		.cfi_def_cfa_offset 3
 1761               		.cfi_offset 16, -2
 1762               	/* prologue: function */
 1763               	/* frame size = 0 */
 1764               	/* stack size = 1 */
 1765               	.L__stack_usage = 1
 1766 0002 382F      		mov r19,r24
 1767 0004 262F      		mov r18,r22
 1768               		.loc 1 558 73 is_stmt 1 view .LVU421
 1769 0006 6091 0000 		lds r22,layer_state
 1770 000a 7091 0000 		lds r23,layer_state+1
 1771 000e 8091 0000 		lds r24,layer_state+2
 1772 0012 9091 0000 		lds r25,layer_state+3
 1773               	.LVL184:
 1774               		.loc 1 558 73 is_stmt 0 view .LVU422
 1775 0016 042F      		mov r16,r20
 1776 0018 432F      		mov r20,r19
 1777               	.LVL185:
 1778               		.loc 1 558 73 view .LVU423
 1779 001a 0E94 0000 		call update_tri_layer_state
 1780               	.LVL186:
 1781               	/* epilogue start */
 1782               		.loc 1 558 1 view .LVU424
 1783 001e 0F91      		pop r16
 1784               	.LVL187:
 1785               		.loc 1 558 73 view .LVU425
 1786 0020 0C94 0000 		jmp layer_state_set
 1787               	.LVL188:
 1788               		.cfi_endproc
 1789               	.LFE40:
 1791               		.section	.text.tap_random_base64,"ax",@progbits
 1792               	.global	tap_random_base64
 1794               	tap_random_base64:
 1795               	.LFB41:
 559:quantum/quantum.c **** 
 560:quantum/quantum.c **** void tap_random_base64(void) {
 1796               		.loc 1 560 30 is_stmt 1 view -0
 1797               		.cfi_startproc
 1798 0000 CF93      		push r28
 1799               	.LCFI45:
 1800               		.cfi_def_cfa_offset 3
 1801               		.cfi_offset 28, -2
 1802 0002 DF93      		push r29
 1803               	.LCFI46:
 1804               		.cfi_def_cfa_offset 4
 1805               		.cfi_offset 29, -3
 1806               	/* prologue: function */
 1807               	/* frame size = 0 */
 1808               	/* stack size = 2 */
 1809               	.L__stack_usage = 2
 561:quantum/quantum.c **** #if defined(__AVR_ATmega32U4__)
 562:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1810               		.loc 1 562 5 view .LVU427
 1811               		.loc 1 562 20 is_stmt 0 view .LVU428
 1812 0004 46B5      		in r20,0x26
 1813               		.loc 1 562 28 view .LVU429
 1814 0006 2091 8400 		lds r18,132
 1815 000a 3091 8500 		lds r19,132+1
 1816               		.loc 1 562 36 view .LVU430
 1817 000e C091 9400 		lds r28,148
 1818 0012 D091 9500 		lds r29,148+1
 1819               		.loc 1 562 44 view .LVU431
 1820 0016 8091 BE00 		lds r24,190
 1821 001a 9091 BF00 		lds r25,190+1
 1822               		.loc 1 562 34 view .LVU432
 1823 001e C20F      		add r28,r18
 1824 0020 C40F      		add r28,r20
 1825               		.loc 1 562 42 view .LVU433
 1826 0022 C80F      		add r28,r24
 1827               		.loc 1 562 13 view .LVU434
 1828 0024 CF73      		andi r28,lo8(63)
 1829               	.LVL189:
 563:quantum/quantum.c **** #else
 564:quantum/quantum.c ****     uint8_t key = rand() % 64;
 565:quantum/quantum.c **** #endif
 566:quantum/quantum.c ****     switch (key) {
 1830               		.loc 1 566 5 is_stmt 1 view .LVU435
 1831 0026 CE33      		cpi r28,lo8(62)
 1832 0028 00F4      		brsh .L106
 1833 002a C533      		cpi r28,lo8(53)
 1834 002c 00F4      		brsh .L107
 1835 002e CA31      		cpi r28,lo8(26)
 1836 0030 00F0      		brlo .L108
 1837 0032 C433      		cpi r28,lo8(52)
 1838 0034 00F4      		brsh .L113
 567:quantum/quantum.c ****         case 0 ... 25:
 568:quantum/quantum.c ****             register_code(KC_LSFT);
 569:quantum/quantum.c ****             register_code(key + KC_A);
 570:quantum/quantum.c ****             unregister_code(key + KC_A);
 571:quantum/quantum.c ****             unregister_code(KC_LSFT);
 572:quantum/quantum.c ****             break;
 573:quantum/quantum.c ****         case 26 ... 51:
 574:quantum/quantum.c ****             register_code(key - 26 + KC_A);
 1839               		.loc 1 574 13 view .LVU436
 1840 0036 C651      		subi r28,lo8(-(-22))
 1841               	.LVL190:
 1842               	.L116:
 575:quantum/quantum.c ****             unregister_code(key - 26 + KC_A);
 576:quantum/quantum.c ****             break;
 577:quantum/quantum.c ****         case 52:
 578:quantum/quantum.c ****             register_code(KC_0);
 579:quantum/quantum.c ****             unregister_code(KC_0);
 580:quantum/quantum.c ****             break;
 581:quantum/quantum.c ****         case 53 ... 61:
 582:quantum/quantum.c ****             register_code(key - 53 + KC_1);
 1843               		.loc 1 582 13 is_stmt 0 view .LVU437
 1844 0038 8C2F      		mov r24,r28
 1845 003a 0E94 0000 		call register_code
 1846               	.LVL191:
 583:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1847               		.loc 1 583 13 is_stmt 1 view .LVU438
 1848 003e 8C2F      		mov r24,r28
 1849 0040 00C0      		rjmp .L114
 1850               	.LVL192:
 1851               	.L106:
 566:quantum/quantum.c ****         case 0 ... 25:
 1852               		.loc 1 566 5 is_stmt 0 view .LVU439
 1853 0042 CE33      		cpi r28,lo8(62)
 1854 0044 01F0      		breq .L111
 1855 0046 CF33      		cpi r28,lo8(63)
 1856 0048 01F0      		breq .L112
 1857               	.L108:
 568:quantum/quantum.c ****             register_code(key + KC_A);
 1858               		.loc 1 568 13 is_stmt 1 view .LVU440
 1859 004a 81EE      		ldi r24,lo8(-31)
 1860 004c 0E94 0000 		call register_code
 1861               	.LVL193:
 569:quantum/quantum.c ****             unregister_code(key + KC_A);
 1862               		.loc 1 569 13 view .LVU441
 1863 0050 CC5F      		subi r28,lo8(-(4))
 1864               	.LVL194:
 569:quantum/quantum.c ****             unregister_code(key + KC_A);
 1865               		.loc 1 569 13 is_stmt 0 view .LVU442
 1866 0052 8C2F      		mov r24,r28
 1867 0054 0E94 0000 		call register_code
 1868               	.LVL195:
 570:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1869               		.loc 1 570 13 is_stmt 1 view .LVU443
 1870 0058 8C2F      		mov r24,r28
 1871               	.LVL196:
 1872               	.L115:
 584:quantum/quantum.c ****             break;
 585:quantum/quantum.c ****         case 62:
 586:quantum/quantum.c ****             register_code(KC_LSFT);
 587:quantum/quantum.c ****             register_code(KC_EQL);
 588:quantum/quantum.c ****             unregister_code(KC_EQL);
 1873               		.loc 1 588 13 is_stmt 0 view .LVU444
 1874 005a 0E94 0000 		call unregister_code
 1875               	.LVL197:
 589:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1876               		.loc 1 589 13 is_stmt 1 view .LVU445
 1877 005e 81EE      		ldi r24,lo8(-31)
 1878 0060 00C0      		rjmp .L114
 1879               	.LVL198:
 1880               	.L113:
 578:quantum/quantum.c ****             unregister_code(KC_0);
 1881               		.loc 1 578 13 view .LVU446
 1882 0062 87E2      		ldi r24,lo8(39)
 1883 0064 0E94 0000 		call register_code
 1884               	.LVL199:
 579:quantum/quantum.c ****             break;
 1885               		.loc 1 579 13 view .LVU447
 1886 0068 87E2      		ldi r24,lo8(39)
 1887               	.LVL200:
 1888               	.L114:
 1889               	/* epilogue start */
 590:quantum/quantum.c ****             break;
 591:quantum/quantum.c ****         case 63:
 592:quantum/quantum.c ****             register_code(KC_SLSH);
 593:quantum/quantum.c ****             unregister_code(KC_SLSH);
 594:quantum/quantum.c ****             break;
 595:quantum/quantum.c ****     }
 596:quantum/quantum.c **** }
 1890               		.loc 1 596 1 is_stmt 0 view .LVU448
 1891 006a DF91      		pop r29
 1892 006c CF91      		pop r28
 593:quantum/quantum.c ****             break;
 1893               		.loc 1 593 13 view .LVU449
 1894 006e 0C94 0000 		jmp unregister_code
 1895               	.LVL201:
 1896               	.L107:
 582:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1897               		.loc 1 582 13 is_stmt 1 view .LVU450
 1898 0072 C751      		subi r28,lo8(-(-23))
 1899               	.LVL202:
 582:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1900               		.loc 1 582 13 is_stmt 0 view .LVU451
 1901 0074 00C0      		rjmp .L116
 1902               	.LVL203:
 1903               	.L111:
 586:quantum/quantum.c ****             register_code(KC_EQL);
 1904               		.loc 1 586 13 is_stmt 1 view .LVU452
 1905 0076 81EE      		ldi r24,lo8(-31)
 1906 0078 0E94 0000 		call register_code
 1907               	.LVL204:
 587:quantum/quantum.c ****             unregister_code(KC_EQL);
 1908               		.loc 1 587 13 view .LVU453
 1909 007c 8EE2      		ldi r24,lo8(46)
 1910 007e 0E94 0000 		call register_code
 1911               	.LVL205:
 588:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1912               		.loc 1 588 13 view .LVU454
 1913 0082 8EE2      		ldi r24,lo8(46)
 1914 0084 00C0      		rjmp .L115
 1915               	.L112:
 592:quantum/quantum.c ****             unregister_code(KC_SLSH);
 1916               		.loc 1 592 13 view .LVU455
 1917 0086 88E3      		ldi r24,lo8(56)
 1918 0088 0E94 0000 		call register_code
 1919               	.LVL206:
 593:quantum/quantum.c ****             break;
 1920               		.loc 1 593 13 view .LVU456
 1921 008c 88E3      		ldi r24,lo8(56)
 1922 008e 00C0      		rjmp .L114
 1923               		.cfi_endproc
 1924               	.LFE41:
 1926               		.section	.text.matrix_init_quantum,"ax",@progbits
 1927               	.global	matrix_init_quantum
 1929               	matrix_init_quantum:
 1930               	.LFB42:
 597:quantum/quantum.c **** 
 598:quantum/quantum.c **** void matrix_init_quantum() {
 1931               		.loc 1 598 28 view -0
 1932               		.cfi_startproc
 1933               	/* prologue: function */
 1934               	/* frame size = 0 */
 1935               	/* stack size = 0 */
 1936               	.L__stack_usage = 0
 599:quantum/quantum.c **** #ifdef BOOTMAGIC_LITE
 600:quantum/quantum.c ****     bootmagic_lite();
 601:quantum/quantum.c **** #endif
 602:quantum/quantum.c ****     if (!eeconfig_is_enabled()) {
 1937               		.loc 1 602 5 view .LVU458
 1938               		.loc 1 602 10 is_stmt 0 view .LVU459
 1939 0000 0E94 0000 		call eeconfig_is_enabled
 1940               	.LVL207:
 1941               		.loc 1 602 8 view .LVU460
 1942 0004 8111      		cpse r24,__zero_reg__
 1943 0006 00C0      		rjmp .L118
 603:quantum/quantum.c ****         eeconfig_init();
 1944               		.loc 1 603 9 is_stmt 1 view .LVU461
 1945 0008 0E94 0000 		call eeconfig_init
 1946               	.LVL208:
 1947               	.L118:
 604:quantum/quantum.c ****     }
 605:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
 606:quantum/quantum.c **** #    ifdef LED_MATRIX_ENABLE
 607:quantum/quantum.c ****     led_matrix_init();
 608:quantum/quantum.c **** #    else
 609:quantum/quantum.c ****     backlight_init_ports();
 610:quantum/quantum.c **** #    endif
 611:quantum/quantum.c **** #endif
 612:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 613:quantum/quantum.c ****     audio_init();
 614:quantum/quantum.c **** #endif
 615:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 616:quantum/quantum.c ****     rgb_matrix_init();
 617:quantum/quantum.c **** #endif
 618:quantum/quantum.c **** #ifdef ENCODER_ENABLE
 619:quantum/quantum.c ****     encoder_init();
 1948               		.loc 1 619 5 view .LVU462
 1949 000c 0E94 0000 		call encoder_init
 1950               	.LVL209:
 620:quantum/quantum.c **** #endif
 621:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 622:quantum/quantum.c ****     unicode_input_mode_init();
 623:quantum/quantum.c **** #endif
 624:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 625:quantum/quantum.c ****     haptic_init();
 626:quantum/quantum.c **** #endif
 627:quantum/quantum.c **** #ifdef OUTPUT_AUTO_ENABLE
 628:quantum/quantum.c ****     set_output(OUTPUT_AUTO);
 629:quantum/quantum.c **** #endif
 630:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
 631:quantum/quantum.c ****     dip_switch_init();
 632:quantum/quantum.c **** #endif
 633:quantum/quantum.c **** 
 634:quantum/quantum.c ****     matrix_init_kb();
 1951               		.loc 1 634 5 view .LVU463
 1952 0010 0C94 0000 		jmp matrix_init_kb
 1953               	.LVL210:
 1954               		.cfi_endproc
 1955               	.LFE42:
 1957               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1958               	.global	matrix_scan_quantum
 1960               	matrix_scan_quantum:
 1961               	.LFB43:
 635:quantum/quantum.c **** }
 636:quantum/quantum.c **** 
 637:quantum/quantum.c **** void matrix_scan_quantum() {
 1962               		.loc 1 637 28 view -0
 1963               		.cfi_startproc
 1964               	/* prologue: function */
 1965               	/* frame size = 0 */
 1966               	/* stack size = 0 */
 1967               	.L__stack_usage = 0
 638:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 639:quantum/quantum.c ****     matrix_scan_music();
 640:quantum/quantum.c **** #endif
 641:quantum/quantum.c **** 
 642:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 643:quantum/quantum.c ****     matrix_scan_tap_dance();
 644:quantum/quantum.c **** #endif
 645:quantum/quantum.c **** 
 646:quantum/quantum.c **** #ifdef COMBO_ENABLE
 647:quantum/quantum.c ****     matrix_scan_combo();
 648:quantum/quantum.c **** #endif
 649:quantum/quantum.c **** 
 650:quantum/quantum.c **** #ifdef LED_MATRIX_ENABLE
 651:quantum/quantum.c ****     led_matrix_task();
 652:quantum/quantum.c **** #endif
 653:quantum/quantum.c **** 
 654:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 655:quantum/quantum.c ****     rgb_matrix_task();
 656:quantum/quantum.c **** #endif
 657:quantum/quantum.c **** 
 658:quantum/quantum.c **** #ifdef ENCODER_ENABLE
 659:quantum/quantum.c ****     encoder_read();
 1968               		.loc 1 659 5 view .LVU465
 1969 0000 0E94 0000 		call encoder_read
 1970               	.LVL211:
 660:quantum/quantum.c **** #endif
 661:quantum/quantum.c **** 
 662:quantum/quantum.c **** #ifdef WPM_ENABLE
 663:quantum/quantum.c ****     decay_wpm();
 664:quantum/quantum.c **** #endif
 665:quantum/quantum.c **** 
 666:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 667:quantum/quantum.c ****     haptic_task();
 668:quantum/quantum.c **** #endif
 669:quantum/quantum.c **** 
 670:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
 671:quantum/quantum.c ****     dip_switch_read(false);
 672:quantum/quantum.c **** #endif
 673:quantum/quantum.c **** 
 674:quantum/quantum.c ****     matrix_scan_kb();
 1971               		.loc 1 674 5 view .LVU466
 1972 0004 0C94 0000 		jmp matrix_scan_kb
 1973               	.LVL212:
 1974               		.cfi_endproc
 1975               	.LFE43:
 1977               		.section	.text.send_nibble,"ax",@progbits
 1978               	.global	send_nibble
 1980               	send_nibble:
 1981               	.LVL213:
 1982               	.LFB47:
 675:quantum/quantum.c **** }
 676:quantum/quantum.c **** 
 677:quantum/quantum.c **** #ifdef HD44780_ENABLED
 678:quantum/quantum.c **** #    include "hd44780.h"
 679:quantum/quantum.c **** #endif
 680:quantum/quantum.c **** 
 681:quantum/quantum.c **** // Functions for spitting out values
 682:quantum/quantum.c **** //
 683:quantum/quantum.c **** 
 684:quantum/quantum.c **** void send_dword(uint32_t number) {
 685:quantum/quantum.c ****     uint16_t word = (number >> 16);
 686:quantum/quantum.c ****     send_word(word);
 687:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 688:quantum/quantum.c **** }
 689:quantum/quantum.c **** 
 690:quantum/quantum.c **** void send_word(uint16_t number) {
 691:quantum/quantum.c ****     uint8_t byte = number >> 8;
 692:quantum/quantum.c ****     send_byte(byte);
 693:quantum/quantum.c ****     send_byte(number & 0xFF);
 694:quantum/quantum.c **** }
 695:quantum/quantum.c **** 
 696:quantum/quantum.c **** void send_byte(uint8_t number) {
 697:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 698:quantum/quantum.c ****     send_nibble(nibble);
 699:quantum/quantum.c ****     send_nibble(number & 0xF);
 700:quantum/quantum.c **** }
 701:quantum/quantum.c **** 
 702:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1983               		.loc 1 702 34 view -0
 1984               		.cfi_startproc
 1985               		.loc 1 702 34 is_stmt 0 view .LVU468
 1986 0000 CF93      		push r28
 1987               	.LCFI47:
 1988               		.cfi_def_cfa_offset 3
 1989               		.cfi_offset 28, -2
 1990               	/* prologue: function */
 1991               	/* frame size = 0 */
 1992               	/* stack size = 1 */
 1993               	.L__stack_usage = 1
 703:quantum/quantum.c ****     switch (number) {
 1994               		.loc 1 703 5 is_stmt 1 view .LVU469
 1995 0002 8A30      		cpi r24,lo8(10)
 1996 0004 00F4      		brsh .L121
 1997 0006 8823      		tst r24
 1998 0008 01F0      		breq .L126
 704:quantum/quantum.c ****         case 0:
 705:quantum/quantum.c ****             register_code(KC_0);
 706:quantum/quantum.c ****             unregister_code(KC_0);
 707:quantum/quantum.c ****             break;
 708:quantum/quantum.c ****         case 1 ... 9:
 709:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1999               		.loc 1 709 13 view .LVU470
 2000 000a CDE1      		ldi r28,lo8(29)
 2001               	.L129:
 710:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 711:quantum/quantum.c ****             break;
 712:quantum/quantum.c ****         case 0xA ... 0xF:
 713:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 2002               		.loc 1 713 13 is_stmt 0 view .LVU471
 2003 000c C80F      		add r28,r24
 2004 000e 8C2F      		mov r24,r28
 2005               	.LVL214:
 2006               		.loc 1 713 13 view .LVU472
 2007 0010 0E94 0000 		call register_code
 2008               	.LVL215:
 714:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2009               		.loc 1 714 13 is_stmt 1 view .LVU473
 2010 0014 8C2F      		mov r24,r28
 2011 0016 00C0      		rjmp .L128
 2012               	.LVL216:
 2013               	.L121:
 713:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2014               		.loc 1 713 13 is_stmt 0 view .LVU474
 2015 0018 CAEF      		ldi r28,lo8(-6)
 703:quantum/quantum.c ****         case 0:
 2016               		.loc 1 703 5 view .LVU475
 2017 001a 8031      		cpi r24,lo8(16)
 2018 001c 00F0      		brlo .L129
 2019               	/* epilogue start */
 715:quantum/quantum.c ****             break;
 716:quantum/quantum.c ****     }
 717:quantum/quantum.c **** }
 2020               		.loc 1 717 1 view .LVU476
 2021 001e CF91      		pop r28
 2022 0020 0895      		ret
 2023               	.L126:
 705:quantum/quantum.c ****             unregister_code(KC_0);
 2024               		.loc 1 705 13 is_stmt 1 view .LVU477
 2025 0022 87E2      		ldi r24,lo8(39)
 2026               	.LVL217:
 705:quantum/quantum.c ****             unregister_code(KC_0);
 2027               		.loc 1 705 13 is_stmt 0 view .LVU478
 2028 0024 0E94 0000 		call register_code
 2029               	.LVL218:
 706:quantum/quantum.c ****             break;
 2030               		.loc 1 706 13 is_stmt 1 view .LVU479
 2031 0028 87E2      		ldi r24,lo8(39)
 2032               	.L128:
 2033               	/* epilogue start */
 2034               		.loc 1 717 1 is_stmt 0 view .LVU480
 2035 002a CF91      		pop r28
 714:quantum/quantum.c ****             break;
 2036               		.loc 1 714 13 view .LVU481
 2037 002c 0C94 0000 		jmp unregister_code
 2038               	.LVL219:
 2039               		.cfi_endproc
 2040               	.LFE47:
 2042               		.section	.text.send_byte,"ax",@progbits
 2043               	.global	send_byte
 2045               	send_byte:
 2046               	.LVL220:
 2047               	.LFB46:
 696:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2048               		.loc 1 696 32 is_stmt 1 view -0
 2049               		.cfi_startproc
 696:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2050               		.loc 1 696 32 is_stmt 0 view .LVU483
 2051 0000 CF93      		push r28
 2052               	.LCFI48:
 2053               		.cfi_def_cfa_offset 3
 2054               		.cfi_offset 28, -2
 2055               	/* prologue: function */
 2056               	/* frame size = 0 */
 2057               	/* stack size = 1 */
 2058               	.L__stack_usage = 1
 2059 0002 C82F      		mov r28,r24
 697:quantum/quantum.c ****     send_nibble(nibble);
 2060               		.loc 1 697 5 is_stmt 1 view .LVU484
 2061               	.LVL221:
 698:quantum/quantum.c ****     send_nibble(number & 0xF);
 2062               		.loc 1 698 5 view .LVU485
 2063 0004 8295      		swap r24
 2064               	.LVL222:
 698:quantum/quantum.c ****     send_nibble(number & 0xF);
 2065               		.loc 1 698 5 is_stmt 0 view .LVU486
 2066 0006 8F70      		andi r24,lo8(15)
 2067 0008 0E94 0000 		call send_nibble
 2068               	.LVL223:
 699:quantum/quantum.c **** }
 2069               		.loc 1 699 5 is_stmt 1 view .LVU487
 2070 000c 8C2F      		mov r24,r28
 2071 000e 8F70      		andi r24,lo8(15)
 2072               	/* epilogue start */
 700:quantum/quantum.c **** 
 2073               		.loc 1 700 1 is_stmt 0 view .LVU488
 2074 0010 CF91      		pop r28
 2075               	.LVL224:
 699:quantum/quantum.c **** }
 2076               		.loc 1 699 5 view .LVU489
 2077 0012 0C94 0000 		jmp send_nibble
 2078               	.LVL225:
 2079               		.cfi_endproc
 2080               	.LFE46:
 2082               		.section	.text.send_word,"ax",@progbits
 2083               	.global	send_word
 2085               	send_word:
 2086               	.LVL226:
 2087               	.LFB45:
 690:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2088               		.loc 1 690 33 is_stmt 1 view -0
 2089               		.cfi_startproc
 690:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2090               		.loc 1 690 33 is_stmt 0 view .LVU491
 2091 0000 CF93      		push r28
 2092               	.LCFI49:
 2093               		.cfi_def_cfa_offset 3
 2094               		.cfi_offset 28, -2
 2095               	/* prologue: function */
 2096               	/* frame size = 0 */
 2097               	/* stack size = 1 */
 2098               	.L__stack_usage = 1
 2099 0002 C82F      		mov r28,r24
 691:quantum/quantum.c ****     send_byte(byte);
 2100               		.loc 1 691 5 is_stmt 1 view .LVU492
 2101               	.LVL227:
 692:quantum/quantum.c ****     send_byte(number & 0xFF);
 2102               		.loc 1 692 5 view .LVU493
 2103 0004 892F      		mov r24,r25
 2104               	.LVL228:
 692:quantum/quantum.c ****     send_byte(number & 0xFF);
 2105               		.loc 1 692 5 is_stmt 0 view .LVU494
 2106 0006 0E94 0000 		call send_byte
 2107               	.LVL229:
 693:quantum/quantum.c **** }
 2108               		.loc 1 693 5 is_stmt 1 view .LVU495
 2109 000a 8C2F      		mov r24,r28
 2110               	/* epilogue start */
 694:quantum/quantum.c **** 
 2111               		.loc 1 694 1 is_stmt 0 view .LVU496
 2112 000c CF91      		pop r28
 693:quantum/quantum.c **** }
 2113               		.loc 1 693 5 view .LVU497
 2114 000e 0C94 0000 		jmp send_byte
 2115               	.LVL230:
 2116               		.cfi_endproc
 2117               	.LFE45:
 2119               		.section	.text.send_dword,"ax",@progbits
 2120               	.global	send_dword
 2122               	send_dword:
 2123               	.LVL231:
 2124               	.LFB44:
 684:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2125               		.loc 1 684 34 is_stmt 1 view -0
 2126               		.cfi_startproc
 684:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2127               		.loc 1 684 34 is_stmt 0 view .LVU499
 2128 0000 CF92      		push r12
 2129               	.LCFI50:
 2130               		.cfi_def_cfa_offset 3
 2131               		.cfi_offset 12, -2
 2132 0002 DF92      		push r13
 2133               	.LCFI51:
 2134               		.cfi_def_cfa_offset 4
 2135               		.cfi_offset 13, -3
 2136 0004 EF92      		push r14
 2137               	.LCFI52:
 2138               		.cfi_def_cfa_offset 5
 2139               		.cfi_offset 14, -4
 2140 0006 FF92      		push r15
 2141               	.LCFI53:
 2142               		.cfi_def_cfa_offset 6
 2143               		.cfi_offset 15, -5
 2144               	/* prologue: function */
 2145               	/* frame size = 0 */
 2146               	/* stack size = 4 */
 2147               	.L__stack_usage = 4
 2148 0008 6B01      		movw r12,r22
 685:quantum/quantum.c ****     send_word(word);
 2149               		.loc 1 685 5 is_stmt 1 view .LVU500
 686:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 2150               		.loc 1 686 5 view .LVU501
 2151 000a 0E94 0000 		call send_word
 2152               	.LVL232:
 687:quantum/quantum.c **** }
 2153               		.loc 1 687 5 view .LVU502
 2154 000e C601      		movw r24,r12
 2155               	/* epilogue start */
 688:quantum/quantum.c **** 
 2156               		.loc 1 688 1 is_stmt 0 view .LVU503
 2157 0010 FF90      		pop r15
 2158 0012 EF90      		pop r14
 2159 0014 DF90      		pop r13
 2160 0016 CF90      		pop r12
 687:quantum/quantum.c **** }
 2161               		.loc 1 687 5 view .LVU504
 2162 0018 0C94 0000 		jmp send_word
 2163               	.LVL233:
 2164               		.cfi_endproc
 2165               	.LFE44:
 2167               		.section	.text.hex_to_keycode,"ax",@progbits
 2168               		.weak	hex_to_keycode
 2170               	hex_to_keycode:
 2171               	.LVL234:
 2172               	.LFB48:
 718:quantum/quantum.c **** 
 719:quantum/quantum.c **** __attribute__((weak)) uint16_t hex_to_keycode(uint8_t hex) {
 2173               		.loc 1 719 60 is_stmt 1 view -0
 2174               		.cfi_startproc
 2175               	/* prologue: function */
 2176               	/* frame size = 0 */
 2177               	/* stack size = 0 */
 2178               	.L__stack_usage = 0
 720:quantum/quantum.c ****     hex = hex & 0xF;
 2179               		.loc 1 720 5 view .LVU506
 2180               		.loc 1 720 9 is_stmt 0 view .LVU507
 2181 0000 282F      		mov r18,r24
 2182 0002 2F70      		andi r18,lo8(15)
 2183               	.LVL235:
 721:quantum/quantum.c ****     if (hex == 0x0) {
 2184               		.loc 1 721 5 is_stmt 1 view .LVU508
 2185               		.loc 1 721 8 is_stmt 0 view .LVU509
 2186 0004 01F0      		breq .L136
 722:quantum/quantum.c ****         return KC_0;
 723:quantum/quantum.c ****     } else if (hex < 0xA) {
 2187               		.loc 1 723 12 is_stmt 1 view .LVU510
 2188 0006 822F      		mov r24,r18
 2189 0008 90E0      		ldi r25,0
 2190               		.loc 1 723 15 is_stmt 0 view .LVU511
 2191 000a 2A30      		cpi r18,lo8(10)
 2192 000c 00F4      		brsh .L135
 724:quantum/quantum.c ****         return KC_1 + (hex - 0x1);
 2193               		.loc 1 724 9 is_stmt 1 view .LVU512
 2194               		.loc 1 724 21 is_stmt 0 view .LVU513
 2195 000e 4D96      		adiw r24,29
 2196 0010 0895      		ret
 2197               	.L135:
 725:quantum/quantum.c ****     } else {
 726:quantum/quantum.c ****         return KC_A + (hex - 0xA);
 2198               		.loc 1 726 9 is_stmt 1 view .LVU514
 2199               		.loc 1 726 21 is_stmt 0 view .LVU515
 2200 0012 0697      		sbiw r24,6
 2201 0014 0895      		ret
 2202               	.L136:
 722:quantum/quantum.c ****     } else if (hex < 0xA) {
 2203               		.loc 1 722 16 view .LVU516
 2204 0016 87E2      		ldi r24,lo8(39)
 2205 0018 90E0      		ldi r25,0
 2206               	/* epilogue start */
 727:quantum/quantum.c ****     }
 728:quantum/quantum.c **** }
 2207               		.loc 1 728 1 view .LVU517
 2208 001a 0895      		ret
 2209               		.cfi_endproc
 2210               	.LFE48:
 2212               		.section	.text.api_send_unicode,"ax",@progbits
 2213               	.global	api_send_unicode
 2215               	api_send_unicode:
 2216               	.LVL236:
 2217               	.LFB49:
 729:quantum/quantum.c **** 
 730:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 2218               		.loc 1 730 41 is_stmt 1 view -0
 2219               		.cfi_startproc
 2220               	/* prologue: function */
 2221               	/* frame size = 0 */
 2222               	/* stack size = 0 */
 2223               	.L__stack_usage = 0
 731:quantum/quantum.c **** #ifdef API_ENABLE
 732:quantum/quantum.c ****     uint8_t chunk[4];
 733:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
 734:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
 735:quantum/quantum.c **** #endif
 736:quantum/quantum.c **** }
 2224               		.loc 1 736 1 view .LVU519
 2225               	/* epilogue start */
 2226 0000 0895      		ret
 2227               		.cfi_endproc
 2228               	.LFE49:
 2230               		.section	.text.led_set_user,"ax",@progbits
 2231               		.weak	led_set_user
 2233               	led_set_user:
 2234               	.LVL237:
 2235               	.LFB50:
 737:quantum/quantum.c **** 
 738:quantum/quantum.c **** /** \brief Lock LED set callback - keymap/user level
 739:quantum/quantum.c ****  *
 740:quantum/quantum.c ****  * \deprecated Use led_update_user() instead.
 741:quantum/quantum.c ****  */
 742:quantum/quantum.c **** __attribute__((weak)) void led_set_user(uint8_t usb_led) {}
 2236               		.loc 1 742 58 view -0
 2237               		.cfi_startproc
 2238               	/* prologue: function */
 2239               	/* frame size = 0 */
 2240               	/* stack size = 0 */
 2241               	.L__stack_usage = 0
 2242               		.loc 1 742 59 view .LVU521
 2243               	/* epilogue start */
 2244               		.loc 1 742 1 is_stmt 0 view .LVU522
 2245 0000 0895      		ret
 2246               		.cfi_endproc
 2247               	.LFE50:
 2249               		.section	.text.led_set_kb,"ax",@progbits
 2250               		.weak	led_set_kb
 2252               	led_set_kb:
 2253               	.LVL238:
 2254               	.LFB51:
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** /** \brief Lock LED set callback - keyboard level
 745:quantum/quantum.c ****  *
 746:quantum/quantum.c ****  * \deprecated Use led_update_kb() instead.
 747:quantum/quantum.c ****  */
 748:quantum/quantum.c **** __attribute__((weak)) void led_set_kb(uint8_t usb_led) { led_set_user(usb_led); }
 2255               		.loc 1 748 56 is_stmt 1 view -0
 2256               		.cfi_startproc
 2257               	/* prologue: function */
 2258               	/* frame size = 0 */
 2259               	/* stack size = 0 */
 2260               	.L__stack_usage = 0
 2261               		.loc 1 748 58 view .LVU524
 2262 0000 0C94 0000 		jmp led_set_user
 2263               	.LVL239:
 2264               		.loc 1 748 58 is_stmt 0 view .LVU525
 2265               		.cfi_endproc
 2266               	.LFE51:
 2268               		.section	.text.led_update_user,"ax",@progbits
 2269               		.weak	led_update_user
 2271               	led_update_user:
 2272               	.LVL240:
 2273               	.LFB52:
 749:quantum/quantum.c **** 
 750:quantum/quantum.c **** /** \brief Lock LED update callback - keymap/user level
 751:quantum/quantum.c ****  *
 752:quantum/quantum.c ****  * \return True if led_update_kb() should run its own code, false otherwise.
 753:quantum/quantum.c ****  */
 754:quantum/quantum.c **** __attribute__((weak)) bool led_update_user(led_t led_state) { return true; }
 2274               		.loc 1 754 61 is_stmt 1 view -0
 2275               		.cfi_startproc
 2276               	/* prologue: function */
 2277               	/* frame size = 0 */
 2278               	/* stack size = 0 */
 2279               	.L__stack_usage = 0
 2280               		.loc 1 754 63 view .LVU527
 2281               		.loc 1 754 1 is_stmt 0 view .LVU528
 2282 0000 81E0      		ldi r24,lo8(1)
 2283               	.LVL241:
 2284               	/* epilogue start */
 2285               		.loc 1 754 1 view .LVU529
 2286 0002 0895      		ret
 2287               		.cfi_endproc
 2288               	.LFE52:
 2290               		.section	.text.led_update_kb,"ax",@progbits
 2291               		.weak	led_update_kb
 2293               	led_update_kb:
 2294               	.LVL242:
 2295               	.LFB53:
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** /** \brief Lock LED update callback - keyboard level
 757:quantum/quantum.c ****  *
 758:quantum/quantum.c ****  * \return Ignored for now.
 759:quantum/quantum.c ****  */
 760:quantum/quantum.c **** __attribute__((weak)) bool led_update_kb(led_t led_state) { return led_update_user(led_state); }
 2296               		.loc 1 760 59 is_stmt 1 view -0
 2297               		.cfi_startproc
 2298               	/* prologue: function */
 2299               	/* frame size = 0 */
 2300               	/* stack size = 0 */
 2301               	.L__stack_usage = 0
 2302               		.loc 1 760 61 view .LVU531
 2303               		.loc 1 760 68 is_stmt 0 view .LVU532
 2304 0000 0C94 0000 		jmp led_update_user
 2305               	.LVL243:
 2306               		.loc 1 760 68 view .LVU533
 2307               		.cfi_endproc
 2308               	.LFE53:
 2310               		.section	.text.led_init_ports,"ax",@progbits
 2311               		.weak	led_init_ports
 2313               	led_init_ports:
 2314               	.LFB54:
 761:quantum/quantum.c **** 
 762:quantum/quantum.c **** __attribute__((weak)) void led_init_ports(void) {}
 2315               		.loc 1 762 49 is_stmt 1 view -0
 2316               		.cfi_startproc
 2317               	/* prologue: function */
 2318               	/* frame size = 0 */
 2319               	/* stack size = 0 */
 2320               	.L__stack_usage = 0
 2321               		.loc 1 762 50 view .LVU535
 2322               	/* epilogue start */
 2323               		.loc 1 762 1 is_stmt 0 view .LVU536
 2324 0000 0895      		ret
 2325               		.cfi_endproc
 2326               	.LFE54:
 2328               		.section	.text.led_set,"ax",@progbits
 2329               		.weak	led_set
 2331               	led_set:
 2332               	.LVL244:
 2333               	.LFB55:
 763:quantum/quantum.c **** 
 764:quantum/quantum.c **** __attribute__((weak)) void led_set(uint8_t usb_led) {
 2334               		.loc 1 764 53 is_stmt 1 view -0
 2335               		.cfi_startproc
 2336               		.loc 1 764 53 is_stmt 0 view .LVU538
 2337 0000 CF93      		push r28
 2338               	.LCFI54:
 2339               		.cfi_def_cfa_offset 3
 2340               		.cfi_offset 28, -2
 2341               	/* prologue: function */
 2342               	/* frame size = 0 */
 2343               	/* stack size = 1 */
 2344               	.L__stack_usage = 1
 2345 0002 C82F      		mov r28,r24
 765:quantum/quantum.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 766:quantum/quantum.c ****     // Use backlight as Caps Lock indicator
 767:quantum/quantum.c ****     uint8_t bl_toggle_lvl = 0;
 768:quantum/quantum.c **** 
 769:quantum/quantum.c ****     if (IS_LED_ON(usb_led, USB_LED_CAPS_LOCK) && !backlight_config.enable) {
 770:quantum/quantum.c ****         // Turning Caps Lock ON and backlight is disabled in config
 771:quantum/quantum.c ****         // Toggling backlight to the brightest level
 772:quantum/quantum.c ****         bl_toggle_lvl = BACKLIGHT_LEVELS;
 773:quantum/quantum.c ****     } else if (IS_LED_OFF(usb_led, USB_LED_CAPS_LOCK) && backlight_config.enable) {
 774:quantum/quantum.c ****         // Turning Caps Lock OFF and backlight is enabled in config
 775:quantum/quantum.c ****         // Toggling backlight and restoring config level
 776:quantum/quantum.c ****         bl_toggle_lvl = backlight_config.level;
 777:quantum/quantum.c ****     }
 778:quantum/quantum.c **** 
 779:quantum/quantum.c ****     // Set level without modify backlight_config to keep ability to restore state
 780:quantum/quantum.c ****     backlight_set(bl_toggle_lvl);
 781:quantum/quantum.c **** #endif
 782:quantum/quantum.c **** 
 783:quantum/quantum.c ****     led_set_kb(usb_led);
 2346               		.loc 1 783 5 is_stmt 1 view .LVU539
 2347 0004 0E94 0000 		call led_set_kb
 2348               	.LVL245:
 784:quantum/quantum.c ****     led_update_kb((led_t)usb_led);
 2349               		.loc 1 784 5 view .LVU540
 2350 0008 8C2F      		mov r24,r28
 2351               	/* epilogue start */
 785:quantum/quantum.c **** }
 2352               		.loc 1 785 1 is_stmt 0 view .LVU541
 2353 000a CF91      		pop r28
 2354               	.LVL246:
 784:quantum/quantum.c ****     led_update_kb((led_t)usb_led);
 2355               		.loc 1 784 5 view .LVU542
 2356 000c 0C94 0000 		jmp led_update_kb
 2357               	.LVL247:
 784:quantum/quantum.c ****     led_update_kb((led_t)usb_led);
 2358               		.loc 1 784 5 view .LVU543
 2359               		.cfi_endproc
 2360               	.LFE55:
 2362               		.section	.text.startup_user,"ax",@progbits
 2363               		.weak	startup_user
 2365               	startup_user:
 2366               	.LFB59:
 2367               		.cfi_startproc
 2368               	/* prologue: function */
 2369               	/* frame size = 0 */
 2370               	/* stack size = 0 */
 2371               	.L__stack_usage = 0
 2372               	/* epilogue start */
 2373 0000 0895      		ret
 2374               		.cfi_endproc
 2375               	.LFE59:
 2377               		.section	.text.shutdown_user,"ax",@progbits
 2378               		.weak	shutdown_user
 2380               	shutdown_user:
 2381               	.LFB61:
 2382               		.cfi_startproc
 2383               	/* prologue: function */
 2384               	/* frame size = 0 */
 2385               	/* stack size = 0 */
 2386               	.L__stack_usage = 0
 2387               	/* epilogue start */
 2388 0000 0895      		ret
 2389               		.cfi_endproc
 2390               	.LFE61:
 2392               		.section	.text.reset_keyboard,"ax",@progbits
 2393               	.global	reset_keyboard
 2395               	reset_keyboard:
 2396               	.LFB28:
 127:quantum/quantum.c ****     clear_keyboard();
 2397               		.loc 1 127 27 is_stmt 1 view -0
 2398               		.cfi_startproc
 2399               	/* prologue: function */
 2400               	/* frame size = 0 */
 2401               	/* stack size = 0 */
 2402               	.L__stack_usage = 0
 128:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 2403               		.loc 1 128 5 view .LVU545
 2404 0000 0E94 0000 		call clear_keyboard
 2405               	.LVL248:
 142:quantum/quantum.c ****     wait_ms(250);
 2406               		.loc 1 142 5 view .LVU546
 2407 0004 0E94 0000 		call shutdown_user
 2408               	.LVL249:
 143:quantum/quantum.c **** #endif
 2409               		.loc 1 143 5 view .LVU547
 2410               	.LBB71:
 2411               	.LBI71:
 166:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 2412               		.loc 2 166 1 view .LVU548
 2413               	.LBB72:
 168:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 2414               		.loc 2 168 2 view .LVU549
 172:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 2415               		.loc 2 172 2 view .LVU550
 173:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 2416               		.loc 2 173 2 view .LVU551
 174:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 2417               		.loc 2 174 2 view .LVU552
 184:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 2418               		.loc 2 184 3 view .LVU553
 2419               		.loc 2 187 2 view .LVU554
 2420 0008 2FEF      		ldi r18,lo8(799999)
 2421 000a 84E3      		ldi r24,hi8(799999)
 2422 000c 9CE0      		ldi r25,hlo8(799999)
 2423 000e 2150      	1:	subi r18,1
 2424 0010 8040      		sbci r24,0
 2425 0012 9040      		sbci r25,0
 2426 0014 01F4      		brne 1b
 2427 0016 00C0      		rjmp .
 2428 0018 0000      		nop
 2429               	.LVL250:
 2430               		.loc 2 187 2 is_stmt 0 view .LVU555
 2431               	.LBE72:
 2432               	.LBE71:
 148:quantum/quantum.c **** }
 2433               		.loc 1 148 5 is_stmt 1 view .LVU556
 2434 001a 0C94 0000 		jmp bootloader_jump
 2435               	.LVL251:
 2436               		.cfi_endproc
 2437               	.LFE28:
 2439               		.section	.text.process_record_quantum,"ax",@progbits
 2440               	.global	process_record_quantum
 2442               	process_record_quantum:
 2443               	.LVL252:
 2444               	.LFB32:
 184:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2445               		.loc 1 184 50 view -0
 2446               		.cfi_startproc
 184:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2447               		.loc 1 184 50 is_stmt 0 view .LVU558
 2448 0000 0F93      		push r16
 2449               	.LCFI55:
 2450               		.cfi_def_cfa_offset 3
 2451               		.cfi_offset 16, -2
 2452 0002 1F93      		push r17
 2453               	.LCFI56:
 2454               		.cfi_def_cfa_offset 4
 2455               		.cfi_offset 17, -3
 2456 0004 CF93      		push r28
 2457               	.LCFI57:
 2458               		.cfi_def_cfa_offset 5
 2459               		.cfi_offset 28, -4
 2460 0006 DF93      		push r29
 2461               	.LCFI58:
 2462               		.cfi_def_cfa_offset 6
 2463               		.cfi_offset 29, -5
 2464               	/* prologue: function */
 2465               	/* frame size = 0 */
 2466               	/* stack size = 4 */
 2467               	.L__stack_usage = 4
 2468 0008 EC01      		movw r28,r24
 185:quantum/quantum.c **** 
 2469               		.loc 1 185 5 is_stmt 1 view .LVU559
 185:quantum/quantum.c **** 
 2470               		.loc 1 185 24 is_stmt 0 view .LVU560
 2471 000a 0E94 0000 		call get_record_keycode
 2472               	.LVL253:
 185:quantum/quantum.c **** 
 2473               		.loc 1 185 24 view .LVU561
 2474 000e 8C01      		movw r16,r24
 2475               	.LVL254:
 211:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 2476               		.loc 1 211 5 is_stmt 1 view .LVU562
 232:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2477               		.loc 1 232 13 is_stmt 0 view .LVU563
 2478 0010 BE01      		movw r22,r28
 2479 0012 0E94 0000 		call process_record_kb
 2480               	.LVL255:
 276:quantum/quantum.c **** #endif
 2481               		.loc 1 276 48 view .LVU564
 2482 0016 8823      		tst r24
 2483 0018 01F0      		breq .L147
 270:quantum/quantum.c **** #endif
 2484               		.loc 1 270 13 view .LVU565
 2485 001a BE01      		movw r22,r28
 2486 001c C801      		movw r24,r16
 2487 001e 0E94 0000 		call process_space_cadet
 2488               	.LVL256:
 232:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2489               		.loc 1 232 48 view .LVU566
 2490 0022 8823      		tst r24
 2491 0024 01F0      		breq .L147
 273:quantum/quantum.c **** #endif
 2492               		.loc 1 273 13 view .LVU567
 2493 0026 BE01      		movw r22,r28
 2494 0028 C801      		movw r24,r16
 2495 002a 0E94 0000 		call process_magic
 2496               	.LVL257:
 270:quantum/quantum.c **** #endif
 2497               		.loc 1 270 50 view .LVU568
 2498 002e 8823      		tst r24
 2499 0030 01F0      		breq .L147
 276:quantum/quantum.c **** #endif
 2500               		.loc 1 276 13 view .LVU569
 2501 0032 BE01      		movw r22,r28
 2502 0034 C801      		movw r24,r16
 2503 0036 0E94 0000 		call process_grave_esc
 2504               	.LVL258:
 273:quantum/quantum.c **** #endif
 2505               		.loc 1 273 44 view .LVU570
 2506 003a 8823      		tst r24
 2507 003c 01F0      		breq .L147
 279:quantum/quantum.c **** #endif
 2508               		.loc 1 279 13 discriminator 2 view .LVU571
 2509 003e BE01      		movw r22,r28
 2510 0040 C801      		movw r24,r16
 2511 0042 0E94 0000 		call process_rgb
 2512               	.LVL259:
 276:quantum/quantum.c **** #endif
 2513               		.loc 1 276 48 discriminator 2 view .LVU572
 2514 0046 8823      		tst r24
 2515 0048 01F0      		breq .L147
 285:quantum/quantum.c ****         switch (keycode) {
 2516               		.loc 1 285 5 is_stmt 1 view .LVU573
 285:quantum/quantum.c ****         switch (keycode) {
 2517               		.loc 1 285 8 is_stmt 0 view .LVU574
 2518 004a 8A81      		ldd r24,Y+2
 2519 004c 8823      		tst r24
 2520 004e 01F0      		breq .L151
 286:quantum/quantum.c **** #ifndef NO_RESET
 2521               		.loc 1 286 9 is_stmt 1 view .LVU575
 2522 0050 0115      		cp r16,__zero_reg__
 2523 0052 8CE5      		ldi r24,92
 2524 0054 1807      		cpc r17,r24
 2525 0056 01F0      		breq .L152
 2526 0058 0E3D      		cpi r16,-34
 2527 005a 1C45      		sbci r17,92
 2528 005c 01F0      		breq .L153
 2529               	.L151:
 335:quantum/quantum.c **** }
 2530               		.loc 1 335 5 view .LVU576
 335:quantum/quantum.c **** }
 2531               		.loc 1 335 12 is_stmt 0 view .LVU577
 2532 005e CE01      		movw r24,r28
 2533               	/* epilogue start */
 336:quantum/quantum.c **** 
 2534               		.loc 1 336 1 view .LVU578
 2535 0060 DF91      		pop r29
 2536 0062 CF91      		pop r28
 2537               	.LVL260:
 336:quantum/quantum.c **** 
 2538               		.loc 1 336 1 view .LVU579
 2539 0064 1F91      		pop r17
 2540 0066 0F91      		pop r16
 2541               	.LVL261:
 335:quantum/quantum.c **** }
 2542               		.loc 1 335 12 view .LVU580
 2543 0068 0C94 0000 		jmp process_action_kb
 2544               	.LVL262:
 2545               	.L152:
 289:quantum/quantum.c ****                 return false;
 2546               		.loc 1 289 17 is_stmt 1 view .LVU581
 2547 006c 0E94 0000 		call reset_keyboard
 2548               	.LVL263:
 290:quantum/quantum.c **** #endif
 2549               		.loc 1 290 17 view .LVU582
 2550               	.L147:
 336:quantum/quantum.c **** 
 2551               		.loc 1 336 1 is_stmt 0 view .LVU583
 2552 0070 80E0      		ldi r24,0
 2553               	/* epilogue start */
 2554 0072 DF91      		pop r29
 2555 0074 CF91      		pop r28
 2556               	.LVL264:
 336:quantum/quantum.c **** 
 2557               		.loc 1 336 1 view .LVU584
 2558 0076 1F91      		pop r17
 2559 0078 0F91      		pop r16
 2560               	.LVL265:
 336:quantum/quantum.c **** 
 2561               		.loc 1 336 1 view .LVU585
 2562 007a 0895      		ret
 2563               	.LVL266:
 2564               	.L153:
 303:quantum/quantum.c ****                 return false;
 2565               		.loc 1 303 17 is_stmt 1 view .LVU586
 2566 007c 0E94 0000 		call eeconfig_init
 2567               	.LVL267:
 304:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
 2568               		.loc 1 304 17 view .LVU587
 304:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
 2569               		.loc 1 304 24 is_stmt 0 view .LVU588
 2570 0080 00C0      		rjmp .L147
 2571               		.cfi_endproc
 2572               	.LFE32:
 2574               		.weak	ascii_to_keycode_lut
 2575               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 2578               	ascii_to_keycode_lut:
 2579 0000 00        		.byte	0
 2580 0001 00        		.byte	0
 2581 0002 00        		.byte	0
 2582 0003 00        		.byte	0
 2583 0004 00        		.byte	0
 2584 0005 00        		.byte	0
 2585 0006 00        		.byte	0
 2586 0007 00        		.byte	0
 2587 0008 2A        		.byte	42
 2588 0009 2B        		.byte	43
 2589 000a 28        		.byte	40
 2590 000b 00        		.byte	0
 2591 000c 00        		.byte	0
 2592 000d 00        		.byte	0
 2593 000e 00        		.byte	0
 2594 000f 00        		.byte	0
 2595 0010 00        		.byte	0
 2596 0011 00        		.byte	0
 2597 0012 00        		.byte	0
 2598 0013 00        		.byte	0
 2599 0014 00        		.byte	0
 2600 0015 00        		.byte	0
 2601 0016 00        		.byte	0
 2602 0017 00        		.byte	0
 2603 0018 00        		.byte	0
 2604 0019 00        		.byte	0
 2605 001a 00        		.byte	0
 2606 001b 29        		.byte	41
 2607 001c 00        		.byte	0
 2608 001d 00        		.byte	0
 2609 001e 00        		.byte	0
 2610 001f 00        		.byte	0
 2611 0020 2C        		.byte	44
 2612 0021 1E        		.byte	30
 2613 0022 34        		.byte	52
 2614 0023 20        		.byte	32
 2615 0024 21        		.byte	33
 2616 0025 22        		.byte	34
 2617 0026 24        		.byte	36
 2618 0027 34        		.byte	52
 2619 0028 26        		.byte	38
 2620 0029 27        		.byte	39
 2621 002a 25        		.byte	37
 2622 002b 2E        		.byte	46
 2623 002c 36        		.byte	54
 2624 002d 2D        		.byte	45
 2625 002e 37        		.byte	55
 2626 002f 38        		.byte	56
 2627 0030 27        		.byte	39
 2628 0031 1E        		.byte	30
 2629 0032 1F        		.byte	31
 2630 0033 20        		.byte	32
 2631 0034 21        		.byte	33
 2632 0035 22        		.byte	34
 2633 0036 23        		.byte	35
 2634 0037 24        		.byte	36
 2635 0038 25        		.byte	37
 2636 0039 26        		.byte	38
 2637 003a 33        		.byte	51
 2638 003b 33        		.byte	51
 2639 003c 36        		.byte	54
 2640 003d 2E        		.byte	46
 2641 003e 37        		.byte	55
 2642 003f 38        		.byte	56
 2643 0040 1F        		.byte	31
 2644 0041 04        		.byte	4
 2645 0042 05        		.byte	5
 2646 0043 06        		.byte	6
 2647 0044 07        		.byte	7
 2648 0045 08        		.byte	8
 2649 0046 09        		.byte	9
 2650 0047 0A        		.byte	10
 2651 0048 0B        		.byte	11
 2652 0049 0C        		.byte	12
 2653 004a 0D        		.byte	13
 2654 004b 0E        		.byte	14
 2655 004c 0F        		.byte	15
 2656 004d 10        		.byte	16
 2657 004e 11        		.byte	17
 2658 004f 12        		.byte	18
 2659 0050 13        		.byte	19
 2660 0051 14        		.byte	20
 2661 0052 15        		.byte	21
 2662 0053 16        		.byte	22
 2663 0054 17        		.byte	23
 2664 0055 18        		.byte	24
 2665 0056 19        		.byte	25
 2666 0057 1A        		.byte	26
 2667 0058 1B        		.byte	27
 2668 0059 1C        		.byte	28
 2669 005a 1D        		.byte	29
 2670 005b 2F        		.byte	47
 2671 005c 31        		.byte	49
 2672 005d 30        		.byte	48
 2673 005e 23        		.byte	35
 2674 005f 2D        		.byte	45
 2675 0060 35        		.byte	53
 2676 0061 04        		.byte	4
 2677 0062 05        		.byte	5
 2678 0063 06        		.byte	6
 2679 0064 07        		.byte	7
 2680 0065 08        		.byte	8
 2681 0066 09        		.byte	9
 2682 0067 0A        		.byte	10
 2683 0068 0B        		.byte	11
 2684 0069 0C        		.byte	12
 2685 006a 0D        		.byte	13
 2686 006b 0E        		.byte	14
 2687 006c 0F        		.byte	15
 2688 006d 10        		.byte	16
 2689 006e 11        		.byte	17
 2690 006f 12        		.byte	18
 2691 0070 13        		.byte	19
 2692 0071 14        		.byte	20
 2693 0072 15        		.byte	21
 2694 0073 16        		.byte	22
 2695 0074 17        		.byte	23
 2696 0075 18        		.byte	24
 2697 0076 19        		.byte	25
 2698 0077 1A        		.byte	26
 2699 0078 1B        		.byte	27
 2700 0079 1C        		.byte	28
 2701 007a 1D        		.byte	29
 2702 007b 2F        		.byte	47
 2703 007c 31        		.byte	49
 2704 007d 30        		.byte	48
 2705 007e 35        		.byte	53
 2706 007f 4C        		.byte	76
 2707               		.weak	ascii_to_altgr_lut
 2708               		.section	.progmem.data.ascii_to_altgr_lut,"a"
 2711               	ascii_to_altgr_lut:
 2712 0000 0000 0000 		.zero	16
 2712      0000 0000 
 2712      0000 0000 
 2712      0000 0000 
 2713               		.weak	ascii_to_shift_lut
 2714               		.section	.progmem.data.ascii_to_shift_lut,"a"
 2717               	ascii_to_shift_lut:
 2718 0000 00        		.byte	0
 2719 0001 00        		.byte	0
 2720 0002 00        		.byte	0
 2721 0003 00        		.byte	0
 2722 0004 7E        		.byte	126
 2723 0005 0F        		.byte	15
 2724 0006 00        		.byte	0
 2725 0007 D4        		.byte	-44
 2726 0008 FF        		.byte	-1
 2727 0009 FF        		.byte	-1
 2728 000a FF        		.byte	-1
 2729 000b C7        		.byte	-57
 2730 000c 00        		.byte	0
 2731 000d 00        		.byte	0
 2732 000e 00        		.byte	0
 2733 000f 78        		.byte	120
 2734               		.text
 2735               	.Letext0:
 2736               		.file 3 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 2737               		.file 4 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\lib\\gcc\\avr\\8.3.0\\include\\st
 2738               		.file 5 "tmk_core/common/keyboard.h"
 2739               		.file 6 "tmk_core/common/action.h"
 2740               		.file 7 "tmk_core/common/report.h"
 2741               		.file 8 "tmk_core/common/led.h"
 2742               		.file 9 "tmk_core/common/host.h"
 2743               		.file 10 "tmk_core/common/debug.h"
 2744               		.file 11 "quantum/keycode_config.h"
 2745               		.file 12 "tmk_core/common/keycode.h"
 2746               		.file 13 "quantum/quantum_keycodes.h"
 2747               		.file 14 "quantum/keymap.h"
 2748               		.file 15 "./quantum/color.h"
 2749               		.file 16 "quantum/rgblight.h"
 2750               		.file 17 "tmk_core/common/action_layer.h"
 2751               		.file 18 "tmk_core/common/timer.h"
 2752               		.file 19 "tmk_core/common/action_util.h"
 2753               		.file 20 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdlib.h"
 2754               		.file 21 "quantum/quantum.h"
 2755               		.file 22 "quantum/encoder.h"
 2756               		.file 23 "tmk_core/common/eeconfig.h"
 2757               		.file 24 "quantum/process_keycode/process_space_cadet.h"
 2758               		.file 25 "quantum/process_keycode/process_magic.h"
 2759               		.file 26 "quantum/process_keycode/process_grave_esc.h"
 2760               		.file 27 "quantum/process_keycode/process_rgb.h"
 2761               		.file 28 "tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:00000000 quantum.c
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2      *ABS*:0000003e __SP_H__
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:3      *ABS*:0000003d __SP_L__
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:4      *ABS*:0000003f __SREG__
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:6      *ABS*:00000001 __zero_reg__
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:12     .text.do_code16:00000000 do_code16
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:155    .text.register_code16:00000000 register_code16
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:213    .text.unregister_code16:00000000 unregister_code16
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:271    .text.tap_code16:00000000 tap_code16
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:310    .text.process_action_kb:00000000 process_action_kb
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:332    .text.process_record_user:00000000 process_record_user
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:354    .text.process_record_kb:00000000 process_record_kb
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:374    .text.post_process_record_user:00000000 post_process_record_user
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:393    .text.post_process_record_kb:00000000 post_process_record_kb
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:412    .text.get_event_keycode:00000000 get_event_keycode
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:519    .text.get_record_keycode:00000000 get_record_keycode
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:548    .text.post_process_record_quantum:00000000 post_process_record_quantum
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:588    .text.send_char:00000000 send_char
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2578   .progmem.data.ascii_to_keycode_lut:00000000 ascii_to_keycode_lut
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2717   .progmem.data.ascii_to_shift_lut:00000000 ascii_to_shift_lut
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2711   .progmem.data.ascii_to_altgr_lut:00000000 ascii_to_altgr_lut
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:788    .text.send_string_with_delay:00000000 send_string_with_delay
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:1097   .text.send_string:00000000 send_string
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:1117   .text.send_string_with_delay_P:00000000 send_string_with_delay_P
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:1507   .text.send_string_P:00000000 send_string_P
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:1527   .text.set_single_persistent_default_layer:00000000 set_single_persistent_default_layer
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:1579   .text.update_tri_layer_state:00000000 update_tri_layer_state
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:1752   .text.update_tri_layer:00000000 update_tri_layer
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:1794   .text.tap_random_base64:00000000 tap_random_base64
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:1929   .text.matrix_init_quantum:00000000 matrix_init_quantum
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:1960   .text.matrix_scan_quantum:00000000 matrix_scan_quantum
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:1980   .text.send_nibble:00000000 send_nibble
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2045   .text.send_byte:00000000 send_byte
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2085   .text.send_word:00000000 send_word
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2122   .text.send_dword:00000000 send_dword
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2170   .text.hex_to_keycode:00000000 hex_to_keycode
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2215   .text.api_send_unicode:00000000 api_send_unicode
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2233   .text.led_set_user:00000000 led_set_user
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2252   .text.led_set_kb:00000000 led_set_kb
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2271   .text.led_update_user:00000000 led_update_user
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2293   .text.led_update_kb:00000000 led_update_kb
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2313   .text.led_init_ports:00000000 led_init_ports
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2331   .text.led_set:00000000 led_set
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2365   .text.startup_user:00000000 startup_user
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2380   .text.shutdown_user:00000000 shutdown_user
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2395   .text.reset_keyboard:00000000 reset_keyboard
C:\Users\kyleo\AppData\Local\Temp\ccM1Zg6r.s:2442   .text.process_record_quantum:00000000 process_record_quantum

UNDEFINED SYMBOLS
register_weak_mods
register_mods
register_code
unregister_code
unregister_weak_mods
unregister_mods
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
read_source_layers_cache
tap_code
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
eeconfig_is_enabled
eeconfig_init
encoder_init
matrix_init_kb
encoder_read
matrix_scan_kb
clear_keyboard
bootloader_jump
process_space_cadet
process_magic
process_grave_esc
process_rgb
