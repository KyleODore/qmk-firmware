   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.unselect_rows,"ax",@progbits
  12               	unselect_rows:
  13               	.LFB40:
  14               		.file 1 "keyboards/lily58/rev1/matrix.c"
   1:keyboards/lily58/rev1/matrix.c **** /*
   2:keyboards/lily58/rev1/matrix.c **** Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:keyboards/lily58/rev1/matrix.c **** 
   4:keyboards/lily58/rev1/matrix.c **** This program is free software: you can redistribute it and/or modify
   5:keyboards/lily58/rev1/matrix.c **** it under the terms of the GNU General Public License as published by
   6:keyboards/lily58/rev1/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   7:keyboards/lily58/rev1/matrix.c **** (at your option) any later version.
   8:keyboards/lily58/rev1/matrix.c **** 
   9:keyboards/lily58/rev1/matrix.c **** This program is distributed in the hope that it will be useful,
  10:keyboards/lily58/rev1/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:keyboards/lily58/rev1/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:keyboards/lily58/rev1/matrix.c **** GNU General Public License for more details.
  13:keyboards/lily58/rev1/matrix.c **** 
  14:keyboards/lily58/rev1/matrix.c **** You should have received a copy of the GNU General Public License
  15:keyboards/lily58/rev1/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:keyboards/lily58/rev1/matrix.c **** */
  17:keyboards/lily58/rev1/matrix.c **** 
  18:keyboards/lily58/rev1/matrix.c **** /*
  19:keyboards/lily58/rev1/matrix.c ****  * scan matrix
  20:keyboards/lily58/rev1/matrix.c ****  */
  21:keyboards/lily58/rev1/matrix.c **** #include <stdint.h>
  22:keyboards/lily58/rev1/matrix.c **** #include <stdbool.h>
  23:keyboards/lily58/rev1/matrix.c **** #include <string.h>
  24:keyboards/lily58/rev1/matrix.c **** #include <avr/io.h>
  25:keyboards/lily58/rev1/matrix.c **** #include <avr/wdt.h>
  26:keyboards/lily58/rev1/matrix.c **** #include <avr/interrupt.h>
  27:keyboards/lily58/rev1/matrix.c **** #include <util/delay.h>
  28:keyboards/lily58/rev1/matrix.c **** #include "print.h"
  29:keyboards/lily58/rev1/matrix.c **** #include "debug.h"
  30:keyboards/lily58/rev1/matrix.c **** #include "util.h"
  31:keyboards/lily58/rev1/matrix.c **** #include "matrix.h"
  32:keyboards/lily58/rev1/matrix.c **** #include "split_util.h"
  33:keyboards/lily58/rev1/matrix.c **** #include "quantum.h"
  34:keyboards/lily58/rev1/matrix.c **** 
  35:keyboards/lily58/rev1/matrix.c **** #ifdef USE_MATRIX_I2C
  36:keyboards/lily58/rev1/matrix.c **** #  include "i2c.h"
  37:keyboards/lily58/rev1/matrix.c **** #else // USE_SERIAL
  38:keyboards/lily58/rev1/matrix.c **** #  include "split_scomm.h"
  39:keyboards/lily58/rev1/matrix.c **** #endif
  40:keyboards/lily58/rev1/matrix.c **** 
  41:keyboards/lily58/rev1/matrix.c **** #ifndef DEBOUNCE
  42:keyboards/lily58/rev1/matrix.c **** #  define DEBOUNCE	5
  43:keyboards/lily58/rev1/matrix.c **** #endif
  44:keyboards/lily58/rev1/matrix.c **** 
  45:keyboards/lily58/rev1/matrix.c **** #define ERROR_DISCONNECT_COUNT 5
  46:keyboards/lily58/rev1/matrix.c **** 
  47:keyboards/lily58/rev1/matrix.c **** static uint8_t debouncing = DEBOUNCE;
  48:keyboards/lily58/rev1/matrix.c **** static const int ROWS_PER_HAND = MATRIX_ROWS/2;
  49:keyboards/lily58/rev1/matrix.c **** static uint8_t error_count = 0;
  50:keyboards/lily58/rev1/matrix.c **** uint8_t is_master = 0 ;
  51:keyboards/lily58/rev1/matrix.c **** 
  52:keyboards/lily58/rev1/matrix.c **** static const uint8_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  53:keyboards/lily58/rev1/matrix.c **** static const uint8_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  54:keyboards/lily58/rev1/matrix.c **** 
  55:keyboards/lily58/rev1/matrix.c **** /* matrix state(1:on, 0:off) */
  56:keyboards/lily58/rev1/matrix.c **** static matrix_row_t matrix[MATRIX_ROWS];
  57:keyboards/lily58/rev1/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  58:keyboards/lily58/rev1/matrix.c **** 
  59:keyboards/lily58/rev1/matrix.c **** static matrix_row_t read_cols(void);
  60:keyboards/lily58/rev1/matrix.c **** static void init_cols(void);
  61:keyboards/lily58/rev1/matrix.c **** static void unselect_rows(void);
  62:keyboards/lily58/rev1/matrix.c **** static void select_row(uint8_t row);
  63:keyboards/lily58/rev1/matrix.c **** static uint8_t matrix_master_scan(void);
  64:keyboards/lily58/rev1/matrix.c **** 
  65:keyboards/lily58/rev1/matrix.c **** 
  66:keyboards/lily58/rev1/matrix.c **** __attribute__ ((weak))
  67:keyboards/lily58/rev1/matrix.c **** void matrix_init_kb(void) {
  68:keyboards/lily58/rev1/matrix.c ****     matrix_init_user();
  69:keyboards/lily58/rev1/matrix.c **** }
  70:keyboards/lily58/rev1/matrix.c **** 
  71:keyboards/lily58/rev1/matrix.c **** __attribute__ ((weak))
  72:keyboards/lily58/rev1/matrix.c **** void matrix_scan_kb(void) {
  73:keyboards/lily58/rev1/matrix.c ****     matrix_scan_user();
  74:keyboards/lily58/rev1/matrix.c **** }
  75:keyboards/lily58/rev1/matrix.c **** 
  76:keyboards/lily58/rev1/matrix.c **** __attribute__ ((weak))
  77:keyboards/lily58/rev1/matrix.c **** void matrix_init_user(void) {
  78:keyboards/lily58/rev1/matrix.c **** }
  79:keyboards/lily58/rev1/matrix.c **** 
  80:keyboards/lily58/rev1/matrix.c **** __attribute__ ((weak))
  81:keyboards/lily58/rev1/matrix.c **** void matrix_scan_user(void) {
  82:keyboards/lily58/rev1/matrix.c **** }
  83:keyboards/lily58/rev1/matrix.c **** 
  84:keyboards/lily58/rev1/matrix.c **** inline
  85:keyboards/lily58/rev1/matrix.c **** uint8_t matrix_rows(void)
  86:keyboards/lily58/rev1/matrix.c **** {
  87:keyboards/lily58/rev1/matrix.c ****     return MATRIX_ROWS;
  88:keyboards/lily58/rev1/matrix.c **** }
  89:keyboards/lily58/rev1/matrix.c **** 
  90:keyboards/lily58/rev1/matrix.c **** inline
  91:keyboards/lily58/rev1/matrix.c **** uint8_t matrix_cols(void)
  92:keyboards/lily58/rev1/matrix.c **** {
  93:keyboards/lily58/rev1/matrix.c ****     return MATRIX_COLS;
  94:keyboards/lily58/rev1/matrix.c **** }
  95:keyboards/lily58/rev1/matrix.c **** 
  96:keyboards/lily58/rev1/matrix.c **** void matrix_init(void)
  97:keyboards/lily58/rev1/matrix.c **** {
  98:keyboards/lily58/rev1/matrix.c ****     split_keyboard_setup();
  99:keyboards/lily58/rev1/matrix.c **** 
 100:keyboards/lily58/rev1/matrix.c ****     // initialize row and col
 101:keyboards/lily58/rev1/matrix.c ****     unselect_rows();
 102:keyboards/lily58/rev1/matrix.c ****     init_cols();
 103:keyboards/lily58/rev1/matrix.c **** 
 104:keyboards/lily58/rev1/matrix.c ****     setPinOutput(B0);
 105:keyboards/lily58/rev1/matrix.c ****     setPinOutput(D5);
 106:keyboards/lily58/rev1/matrix.c ****     writePinHigh(B0);
 107:keyboards/lily58/rev1/matrix.c ****     writePinHigh(D5);
 108:keyboards/lily58/rev1/matrix.c **** 
 109:keyboards/lily58/rev1/matrix.c ****     // initialize matrix state: all keys off
 110:keyboards/lily58/rev1/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 111:keyboards/lily58/rev1/matrix.c ****         matrix[i] = 0;
 112:keyboards/lily58/rev1/matrix.c ****         matrix_debouncing[i] = 0;
 113:keyboards/lily58/rev1/matrix.c ****     }
 114:keyboards/lily58/rev1/matrix.c **** 
 115:keyboards/lily58/rev1/matrix.c ****     is_master = has_usb();
 116:keyboards/lily58/rev1/matrix.c **** 
 117:keyboards/lily58/rev1/matrix.c ****     matrix_init_quantum();
 118:keyboards/lily58/rev1/matrix.c **** }
 119:keyboards/lily58/rev1/matrix.c **** 
 120:keyboards/lily58/rev1/matrix.c **** uint8_t _matrix_scan(void)
 121:keyboards/lily58/rev1/matrix.c **** {
 122:keyboards/lily58/rev1/matrix.c ****     // Right hand is stored after the left in the matirx so, we need to offset it
 123:keyboards/lily58/rev1/matrix.c ****     int offset = isLeftHand ? 0 : (ROWS_PER_HAND);
 124:keyboards/lily58/rev1/matrix.c **** 
 125:keyboards/lily58/rev1/matrix.c ****     for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 126:keyboards/lily58/rev1/matrix.c ****         select_row(i);
 127:keyboards/lily58/rev1/matrix.c ****         _delay_us(30);  // without this wait read unstable value.
 128:keyboards/lily58/rev1/matrix.c ****         matrix_row_t cols = read_cols();
 129:keyboards/lily58/rev1/matrix.c ****         if (matrix_debouncing[i+offset] != cols) {
 130:keyboards/lily58/rev1/matrix.c ****             matrix_debouncing[i+offset] = cols;
 131:keyboards/lily58/rev1/matrix.c ****             debouncing = DEBOUNCE;
 132:keyboards/lily58/rev1/matrix.c ****         }
 133:keyboards/lily58/rev1/matrix.c ****         unselect_rows();
 134:keyboards/lily58/rev1/matrix.c ****     }
 135:keyboards/lily58/rev1/matrix.c **** 
 136:keyboards/lily58/rev1/matrix.c ****     if (debouncing) {
 137:keyboards/lily58/rev1/matrix.c ****         if (--debouncing) {
 138:keyboards/lily58/rev1/matrix.c ****             _delay_ms(1);
 139:keyboards/lily58/rev1/matrix.c ****         } else {
 140:keyboards/lily58/rev1/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 141:keyboards/lily58/rev1/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 142:keyboards/lily58/rev1/matrix.c ****             }
 143:keyboards/lily58/rev1/matrix.c ****         }
 144:keyboards/lily58/rev1/matrix.c ****     }
 145:keyboards/lily58/rev1/matrix.c **** 
 146:keyboards/lily58/rev1/matrix.c ****     return 1;
 147:keyboards/lily58/rev1/matrix.c **** }
 148:keyboards/lily58/rev1/matrix.c **** 
 149:keyboards/lily58/rev1/matrix.c **** #ifdef USE_MATRIX_I2C
 150:keyboards/lily58/rev1/matrix.c **** 
 151:keyboards/lily58/rev1/matrix.c **** // Get rows from other half over i2c
 152:keyboards/lily58/rev1/matrix.c **** int i2c_transaction(void) {
 153:keyboards/lily58/rev1/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 154:keyboards/lily58/rev1/matrix.c **** 
 155:keyboards/lily58/rev1/matrix.c ****     int err = i2c_master_start(SLAVE_I2C_ADDRESS + I2C_WRITE);
 156:keyboards/lily58/rev1/matrix.c ****     if (err) goto i2c_error;
 157:keyboards/lily58/rev1/matrix.c **** 
 158:keyboards/lily58/rev1/matrix.c ****     // start of matrix stored at 0x00
 159:keyboards/lily58/rev1/matrix.c ****     err = i2c_master_write(0x00);
 160:keyboards/lily58/rev1/matrix.c ****     if (err) goto i2c_error;
 161:keyboards/lily58/rev1/matrix.c **** 
 162:keyboards/lily58/rev1/matrix.c ****     // Start read
 163:keyboards/lily58/rev1/matrix.c ****     err = i2c_master_start(SLAVE_I2C_ADDRESS + I2C_READ);
 164:keyboards/lily58/rev1/matrix.c ****     if (err) goto i2c_error;
 165:keyboards/lily58/rev1/matrix.c **** 
 166:keyboards/lily58/rev1/matrix.c ****     if (!err) {
 167:keyboards/lily58/rev1/matrix.c ****         int i;
 168:keyboards/lily58/rev1/matrix.c ****         for (i = 0; i < ROWS_PER_HAND-1; ++i) {
 169:keyboards/lily58/rev1/matrix.c ****             matrix[slaveOffset+i] = i2c_master_read(I2C_ACK);
 170:keyboards/lily58/rev1/matrix.c ****         }
 171:keyboards/lily58/rev1/matrix.c ****         matrix[slaveOffset+i] = i2c_master_read(I2C_NACK);
 172:keyboards/lily58/rev1/matrix.c ****         i2c_master_stop();
 173:keyboards/lily58/rev1/matrix.c ****     } else {
 174:keyboards/lily58/rev1/matrix.c **** i2c_error: // the cable is disconnceted, or something else went wrong
 175:keyboards/lily58/rev1/matrix.c ****         i2c_reset_state();
 176:keyboards/lily58/rev1/matrix.c ****         return err;
 177:keyboards/lily58/rev1/matrix.c ****     }
 178:keyboards/lily58/rev1/matrix.c **** 
 179:keyboards/lily58/rev1/matrix.c ****     return 0;
 180:keyboards/lily58/rev1/matrix.c **** }
 181:keyboards/lily58/rev1/matrix.c **** 
 182:keyboards/lily58/rev1/matrix.c **** #else // USE_SERIAL
 183:keyboards/lily58/rev1/matrix.c **** 
 184:keyboards/lily58/rev1/matrix.c **** int serial_transaction(int master_changed) {
 185:keyboards/lily58/rev1/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 186:keyboards/lily58/rev1/matrix.c **** #ifdef SERIAL_USE_MULTI_TRANSACTION
 187:keyboards/lily58/rev1/matrix.c ****     int ret=serial_update_buffers(master_changed);
 188:keyboards/lily58/rev1/matrix.c **** #else
 189:keyboards/lily58/rev1/matrix.c ****     int ret=serial_update_buffers();
 190:keyboards/lily58/rev1/matrix.c **** #endif
 191:keyboards/lily58/rev1/matrix.c ****     if (ret ) {
 192:keyboards/lily58/rev1/matrix.c ****         if(ret==2) writePinLow(B0);
 193:keyboards/lily58/rev1/matrix.c ****         return 1;
 194:keyboards/lily58/rev1/matrix.c ****     }
 195:keyboards/lily58/rev1/matrix.c ****     writePinHigh(B0);
 196:keyboards/lily58/rev1/matrix.c ****     memcpy(&matrix[slaveOffset],
 197:keyboards/lily58/rev1/matrix.c ****         (void *)serial_slave_buffer, SERIAL_SLAVE_BUFFER_LENGTH);
 198:keyboards/lily58/rev1/matrix.c ****     return 0;
 199:keyboards/lily58/rev1/matrix.c **** }
 200:keyboards/lily58/rev1/matrix.c **** #endif
 201:keyboards/lily58/rev1/matrix.c **** 
 202:keyboards/lily58/rev1/matrix.c **** uint8_t matrix_scan(void)
 203:keyboards/lily58/rev1/matrix.c **** {
 204:keyboards/lily58/rev1/matrix.c ****     if (is_master) {
 205:keyboards/lily58/rev1/matrix.c ****         matrix_master_scan();
 206:keyboards/lily58/rev1/matrix.c ****     }else{
 207:keyboards/lily58/rev1/matrix.c ****         matrix_slave_scan();
 208:keyboards/lily58/rev1/matrix.c ****         int offset = (isLeftHand) ? ROWS_PER_HAND : 0;
 209:keyboards/lily58/rev1/matrix.c ****         memcpy(&matrix[offset],
 210:keyboards/lily58/rev1/matrix.c ****                (void *)serial_master_buffer, SERIAL_MASTER_BUFFER_LENGTH);
 211:keyboards/lily58/rev1/matrix.c ****         matrix_scan_quantum();
 212:keyboards/lily58/rev1/matrix.c ****     }
 213:keyboards/lily58/rev1/matrix.c ****     return 1;
 214:keyboards/lily58/rev1/matrix.c **** }
 215:keyboards/lily58/rev1/matrix.c **** 
 216:keyboards/lily58/rev1/matrix.c **** 
 217:keyboards/lily58/rev1/matrix.c **** uint8_t matrix_master_scan(void) {
 218:keyboards/lily58/rev1/matrix.c **** 
 219:keyboards/lily58/rev1/matrix.c ****     int ret = _matrix_scan();
 220:keyboards/lily58/rev1/matrix.c ****     int mchanged = 1;
 221:keyboards/lily58/rev1/matrix.c **** 
 222:keyboards/lily58/rev1/matrix.c ****     int offset = (isLeftHand) ? 0 : ROWS_PER_HAND;
 223:keyboards/lily58/rev1/matrix.c **** 
 224:keyboards/lily58/rev1/matrix.c **** #ifdef USE_MATRIX_I2C
 225:keyboards/lily58/rev1/matrix.c **** //    for (int i = 0; i < ROWS_PER_HAND; ++i) {
 226:keyboards/lily58/rev1/matrix.c ****         /* i2c_slave_buffer[i] = matrix[offset+i]; */
 227:keyboards/lily58/rev1/matrix.c **** //        i2c_slave_buffer[i] = matrix[offset+i];
 228:keyboards/lily58/rev1/matrix.c **** //    }
 229:keyboards/lily58/rev1/matrix.c **** #else // USE_SERIAL
 230:keyboards/lily58/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 231:keyboards/lily58/rev1/matrix.c ****     mchanged = memcmp((void *)serial_master_buffer,
 232:keyboards/lily58/rev1/matrix.c **** 		      &matrix[offset], SERIAL_MASTER_BUFFER_LENGTH);
 233:keyboards/lily58/rev1/matrix.c ****   #endif
 234:keyboards/lily58/rev1/matrix.c ****     memcpy((void *)serial_master_buffer,
 235:keyboards/lily58/rev1/matrix.c **** 	   &matrix[offset], SERIAL_MASTER_BUFFER_LENGTH);
 236:keyboards/lily58/rev1/matrix.c **** #endif
 237:keyboards/lily58/rev1/matrix.c **** 
 238:keyboards/lily58/rev1/matrix.c **** #ifdef USE_MATRIX_I2C
 239:keyboards/lily58/rev1/matrix.c ****     if( i2c_transaction() ) {
 240:keyboards/lily58/rev1/matrix.c **** #else // USE_SERIAL
 241:keyboards/lily58/rev1/matrix.c ****     if( serial_transaction(mchanged) ) {
 242:keyboards/lily58/rev1/matrix.c **** #endif
 243:keyboards/lily58/rev1/matrix.c ****         // turn on the indicator led when halves are disconnected
 244:keyboards/lily58/rev1/matrix.c ****         writePinLow(D5);
 245:keyboards/lily58/rev1/matrix.c **** 
 246:keyboards/lily58/rev1/matrix.c ****         error_count++;
 247:keyboards/lily58/rev1/matrix.c **** 
 248:keyboards/lily58/rev1/matrix.c ****         if (error_count > ERROR_DISCONNECT_COUNT) {
 249:keyboards/lily58/rev1/matrix.c ****             // reset other half if disconnected
 250:keyboards/lily58/rev1/matrix.c ****             int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 251:keyboards/lily58/rev1/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 252:keyboards/lily58/rev1/matrix.c ****                 matrix[slaveOffset+i] = 0;
 253:keyboards/lily58/rev1/matrix.c ****             }
 254:keyboards/lily58/rev1/matrix.c ****         }
 255:keyboards/lily58/rev1/matrix.c ****     } else {
 256:keyboards/lily58/rev1/matrix.c ****         // turn off the indicator led on no error
 257:keyboards/lily58/rev1/matrix.c ****         writePinHigh(D5);
 258:keyboards/lily58/rev1/matrix.c ****         error_count = 0;
 259:keyboards/lily58/rev1/matrix.c ****     }
 260:keyboards/lily58/rev1/matrix.c ****     matrix_scan_quantum();
 261:keyboards/lily58/rev1/matrix.c ****     return ret;
 262:keyboards/lily58/rev1/matrix.c **** }
 263:keyboards/lily58/rev1/matrix.c **** 
 264:keyboards/lily58/rev1/matrix.c **** void matrix_slave_scan(void) {
 265:keyboards/lily58/rev1/matrix.c ****     _matrix_scan();
 266:keyboards/lily58/rev1/matrix.c **** 
 267:keyboards/lily58/rev1/matrix.c ****     int offset = (isLeftHand) ? 0 : ROWS_PER_HAND;
 268:keyboards/lily58/rev1/matrix.c **** 
 269:keyboards/lily58/rev1/matrix.c **** #ifdef USE_MATRIX_I2C
 270:keyboards/lily58/rev1/matrix.c ****     for (int i = 0; i < ROWS_PER_HAND; ++i) {
 271:keyboards/lily58/rev1/matrix.c ****         /* i2c_slave_buffer[i] = matrix[offset+i]; */
 272:keyboards/lily58/rev1/matrix.c ****         i2c_slave_buffer[i] = matrix[offset+i];
 273:keyboards/lily58/rev1/matrix.c ****     }
 274:keyboards/lily58/rev1/matrix.c **** #else // USE_SERIAL
 275:keyboards/lily58/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 276:keyboards/lily58/rev1/matrix.c ****     int change = 0;
 277:keyboards/lily58/rev1/matrix.c ****   #endif
 278:keyboards/lily58/rev1/matrix.c ****     for (int i = 0; i < ROWS_PER_HAND; ++i) {
 279:keyboards/lily58/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 280:keyboards/lily58/rev1/matrix.c ****         if( serial_slave_buffer[i] != matrix[offset+i] )
 281:keyboards/lily58/rev1/matrix.c **** 	    change = 1;
 282:keyboards/lily58/rev1/matrix.c ****   #endif
 283:keyboards/lily58/rev1/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 284:keyboards/lily58/rev1/matrix.c ****     }
 285:keyboards/lily58/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 286:keyboards/lily58/rev1/matrix.c ****     slave_buffer_change_count += change;
 287:keyboards/lily58/rev1/matrix.c ****   #endif
 288:keyboards/lily58/rev1/matrix.c **** #endif
 289:keyboards/lily58/rev1/matrix.c **** }
 290:keyboards/lily58/rev1/matrix.c **** 
 291:keyboards/lily58/rev1/matrix.c **** bool matrix_is_modified(void)
 292:keyboards/lily58/rev1/matrix.c **** {
 293:keyboards/lily58/rev1/matrix.c ****     if (debouncing) return false;
 294:keyboards/lily58/rev1/matrix.c ****     return true;
 295:keyboards/lily58/rev1/matrix.c **** }
 296:keyboards/lily58/rev1/matrix.c **** 
 297:keyboards/lily58/rev1/matrix.c **** inline
 298:keyboards/lily58/rev1/matrix.c **** bool matrix_is_on(uint8_t row, uint8_t col)
 299:keyboards/lily58/rev1/matrix.c **** {
 300:keyboards/lily58/rev1/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<<col));
 301:keyboards/lily58/rev1/matrix.c **** }
 302:keyboards/lily58/rev1/matrix.c **** 
 303:keyboards/lily58/rev1/matrix.c **** inline
 304:keyboards/lily58/rev1/matrix.c **** matrix_row_t matrix_get_row(uint8_t row)
 305:keyboards/lily58/rev1/matrix.c **** {
 306:keyboards/lily58/rev1/matrix.c ****     return matrix[row];
 307:keyboards/lily58/rev1/matrix.c **** }
 308:keyboards/lily58/rev1/matrix.c **** 
 309:keyboards/lily58/rev1/matrix.c **** void matrix_print(void)
 310:keyboards/lily58/rev1/matrix.c **** {
 311:keyboards/lily58/rev1/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 312:keyboards/lily58/rev1/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 313:keyboards/lily58/rev1/matrix.c ****         phex(row); print(": ");
 314:keyboards/lily58/rev1/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 315:keyboards/lily58/rev1/matrix.c ****         print("\n");
 316:keyboards/lily58/rev1/matrix.c ****     }
 317:keyboards/lily58/rev1/matrix.c **** }
 318:keyboards/lily58/rev1/matrix.c **** 
 319:keyboards/lily58/rev1/matrix.c **** uint8_t matrix_key_count(void)
 320:keyboards/lily58/rev1/matrix.c **** {
 321:keyboards/lily58/rev1/matrix.c ****     uint8_t count = 0;
 322:keyboards/lily58/rev1/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 323:keyboards/lily58/rev1/matrix.c ****         count += bitpop16(matrix[i]);
 324:keyboards/lily58/rev1/matrix.c ****     }
 325:keyboards/lily58/rev1/matrix.c ****     return count;
 326:keyboards/lily58/rev1/matrix.c **** }
 327:keyboards/lily58/rev1/matrix.c **** 
 328:keyboards/lily58/rev1/matrix.c **** static void  init_cols(void)
 329:keyboards/lily58/rev1/matrix.c **** {
 330:keyboards/lily58/rev1/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {
 331:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 332:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 333:keyboards/lily58/rev1/matrix.c ****     }
 334:keyboards/lily58/rev1/matrix.c **** }
 335:keyboards/lily58/rev1/matrix.c **** 
 336:keyboards/lily58/rev1/matrix.c **** static matrix_row_t read_cols(void)
 337:keyboards/lily58/rev1/matrix.c **** {
 338:keyboards/lily58/rev1/matrix.c ****     matrix_row_t result = 0;
 339:keyboards/lily58/rev1/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {
 340:keyboards/lily58/rev1/matrix.c ****         result |= (_SFR_IO8(col_pins[x] >> 4) & _BV(col_pins[x] & 0xF)) ? 0 : (1 << x);
 341:keyboards/lily58/rev1/matrix.c ****     }
 342:keyboards/lily58/rev1/matrix.c ****     return result;
 343:keyboards/lily58/rev1/matrix.c **** }
 344:keyboards/lily58/rev1/matrix.c **** 
 345:keyboards/lily58/rev1/matrix.c **** static void unselect_rows(void)
 346:keyboards/lily58/rev1/matrix.c **** {
  15               		.loc 1 346 1 view -0
  16               		.cfi_startproc
  17 0000 CF93      		push r28
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 28, -2
  21 0002 DF93      		push r29
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 29, -3
  25               	/* prologue: function */
  26               	/* frame size = 0 */
  27               	/* stack size = 2 */
  28               	.L__stack_usage = 2
 347:keyboards/lily58/rev1/matrix.c ****     for(int x = 0; x < ROWS_PER_HAND; x++) {
  29               		.loc 1 347 5 view .LVU1
  30               	.LBB9:
  31               		.loc 1 347 9 view .LVU2
  32               	.LVL0:
  33               		.loc 1 347 9 is_stmt 0 view .LVU3
  34 0004 A0E0      		ldi r26,lo8(row_pins)
  35 0006 B0E0      		ldi r27,hi8(row_pins)
  36 0008 40E0      		ldi r20,lo8(row_pins+5)
  37 000a 50E0      		ldi r21,hi8(row_pins+5)
 348:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((row_pins[x] >> 4) + 1) &=  ~_BV(row_pins[x] & 0xF);
  38               		.loc 1 348 47 view .LVU4
  39 000c C1E0      		ldi r28,lo8(1)
  40 000e D0E0      		ldi r29,0
  41               	.LVL1:
  42               	.L2:
  43               		.loc 1 348 9 is_stmt 1 discriminator 3 view .LVU5
  44 0010 8D91      		ld r24,X+
  45               	.LVL2:
  46               		.loc 1 348 9 is_stmt 0 discriminator 3 view .LVU6
  47 0012 E82F      		mov r30,r24
  48 0014 E295      		swap r30
  49 0016 EF70      		andi r30,lo8(15)
  50 0018 F0E0      		ldi r31,0
  51               		.loc 1 348 42 discriminator 3 view .LVU7
  52 001a 61A1      		ldd r22,Z+33
  53               		.loc 1 348 47 discriminator 3 view .LVU8
  54 001c 8F70      		andi r24,lo8(15)
  55 001e 9E01      		movw r18,r28
  56 0020 00C0      		rjmp 2f
  57               		1:
  58 0022 220F      		lsl r18
  59               		2:
  60 0024 8A95      		dec r24
  61 0026 02F4      		brpl 1b
  62               		.loc 1 348 42 discriminator 3 view .LVU9
  63 0028 922F      		mov r25,r18
  64 002a 9095      		com r25
  65 002c 9623      		and r25,r22
  66 002e 91A3      		std Z+33,r25
 349:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((row_pins[x] >> 4) + 2) |= _BV(row_pins[x] & 0xF);
  67               		.loc 1 349 9 is_stmt 1 discriminator 3 view .LVU10
  68               		.loc 1 349 42 is_stmt 0 discriminator 3 view .LVU11
  69 0030 82A1      		ldd r24,Z+34
  70 0032 822B      		or r24,r18
  71 0034 82A3      		std Z+34,r24
  72               	.LVL3:
 347:keyboards/lily58/rev1/matrix.c ****     for(int x = 0; x < ROWS_PER_HAND; x++) {
  73               		.loc 1 347 5 discriminator 3 view .LVU12
  74 0036 4A17      		cp r20,r26
  75 0038 5B07      		cpc r21,r27
  76 003a 01F4      		brne .L2
  77               	/* epilogue start */
  78               	.LBE9:
 350:keyboards/lily58/rev1/matrix.c ****     }
 351:keyboards/lily58/rev1/matrix.c **** }
  79               		.loc 1 351 1 view .LVU13
  80 003c DF91      		pop r29
  81 003e CF91      		pop r28
  82 0040 0895      		ret
  83               		.cfi_endproc
  84               	.LFE40:
  86               		.section	.text.matrix_init_user,"ax",@progbits
  87               		.weak	matrix_init_user
  89               	matrix_init_user:
  90               	.LFB23:
  77:keyboards/lily58/rev1/matrix.c **** }
  91               		.loc 1 77 29 is_stmt 1 view -0
  92               		.cfi_startproc
  93               	/* prologue: function */
  94               	/* frame size = 0 */
  95               	/* stack size = 0 */
  96               	.L__stack_usage = 0
  78:keyboards/lily58/rev1/matrix.c **** 
  97               		.loc 1 78 1 view .LVU15
  98               	/* epilogue start */
  99 0000 0895      		ret
 100               		.cfi_endproc
 101               	.LFE23:
 103               		.set	matrix_init_user.localalias.0,matrix_init_user
 104               		.section	.text.matrix_init_kb,"ax",@progbits
 105               		.weak	matrix_init_kb
 107               	matrix_init_kb:
 108               	.LFB21:
  67:keyboards/lily58/rev1/matrix.c ****     matrix_init_user();
 109               		.loc 1 67 27 view -0
 110               		.cfi_startproc
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
  68:keyboards/lily58/rev1/matrix.c **** }
 115               		.loc 1 68 5 view .LVU17
 116 0000 0C94 0000 		jmp matrix_init_user
 117               	.LVL4:
 118               		.cfi_endproc
 119               	.LFE21:
 121               		.section	.text.matrix_scan_user,"ax",@progbits
 122               		.weak	matrix_scan_user
 124               	matrix_scan_user:
 125               	.LFB43:
 126               		.cfi_startproc
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 0 */
 130               	.L__stack_usage = 0
 131               	/* epilogue start */
 132 0000 0895      		ret
 133               		.cfi_endproc
 134               	.LFE43:
 136               		.section	.text.matrix_scan_kb,"ax",@progbits
 137               		.weak	matrix_scan_kb
 139               	matrix_scan_kb:
 140               	.LFB22:
  72:keyboards/lily58/rev1/matrix.c ****     matrix_scan_user();
 141               		.loc 1 72 27 view -0
 142               		.cfi_startproc
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 145               	/* stack size = 0 */
 146               	.L__stack_usage = 0
  73:keyboards/lily58/rev1/matrix.c **** }
 147               		.loc 1 73 5 view .LVU19
 148 0000 0C94 0000 		jmp matrix_scan_user
 149               	.LVL5:
 150               		.cfi_endproc
 151               	.LFE22:
 153               		.section	.text.matrix_rows,"ax",@progbits
 154               	.global	matrix_rows
 156               	matrix_rows:
 157               	.LFB25:
  86:keyboards/lily58/rev1/matrix.c ****     return MATRIX_ROWS;
 158               		.loc 1 86 1 view -0
 159               		.cfi_startproc
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 0 */
 163               	.L__stack_usage = 0
  87:keyboards/lily58/rev1/matrix.c **** }
 164               		.loc 1 87 5 view .LVU21
  88:keyboards/lily58/rev1/matrix.c **** 
 165               		.loc 1 88 1 is_stmt 0 view .LVU22
 166 0000 8AE0      		ldi r24,lo8(10)
 167               	/* epilogue start */
 168 0002 0895      		ret
 169               		.cfi_endproc
 170               	.LFE25:
 172               		.section	.text.matrix_cols,"ax",@progbits
 173               	.global	matrix_cols
 175               	matrix_cols:
 176               	.LFB26:
  92:keyboards/lily58/rev1/matrix.c ****     return MATRIX_COLS;
 177               		.loc 1 92 1 is_stmt 1 view -0
 178               		.cfi_startproc
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 0 */
 182               	.L__stack_usage = 0
  93:keyboards/lily58/rev1/matrix.c **** }
 183               		.loc 1 93 5 view .LVU24
  94:keyboards/lily58/rev1/matrix.c **** 
 184               		.loc 1 94 1 is_stmt 0 view .LVU25
 185 0000 86E0      		ldi r24,lo8(6)
 186               	/* epilogue start */
 187 0002 0895      		ret
 188               		.cfi_endproc
 189               	.LFE26:
 191               		.section	.text.matrix_init,"ax",@progbits
 192               	.global	matrix_init
 194               	matrix_init:
 195               	.LFB27:
  97:keyboards/lily58/rev1/matrix.c ****     split_keyboard_setup();
 196               		.loc 1 97 1 is_stmt 1 view -0
 197               		.cfi_startproc
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 0 */
 201               	.L__stack_usage = 0
  98:keyboards/lily58/rev1/matrix.c **** 
 202               		.loc 1 98 5 view .LVU27
 203 0000 0E94 0000 		call split_keyboard_setup
 204               	.LVL6:
 101:keyboards/lily58/rev1/matrix.c ****     init_cols();
 205               		.loc 1 101 5 view .LVU28
 206 0004 0E94 0000 		call unselect_rows
 207               	.LVL7:
 102:keyboards/lily58/rev1/matrix.c **** 
 208               		.loc 1 102 5 view .LVU29
 209               	.LBB14:
 210               	.LBI14:
 328:keyboards/lily58/rev1/matrix.c **** {
 211               		.loc 1 328 14 view .LVU30
 212               	.LBE14:
 330:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 213               		.loc 1 330 5 view .LVU31
 214               	.LBB16:
 215               	.LBB15:
 330:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 216               		.loc 1 330 9 view .LVU32
 330:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 217               		.loc 1 330 9 is_stmt 0 view .LVU33
 218 0008 A0E0      		ldi r26,lo8(col_pins)
 219 000a B0E0      		ldi r27,hi8(col_pins)
 331:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 220               		.loc 1 331 47 view .LVU34
 221 000c 61E0      		ldi r22,lo8(1)
 222 000e 70E0      		ldi r23,0
 223               	.LVL8:
 224               	.L11:
 331:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 225               		.loc 1 331 9 is_stmt 1 view .LVU35
 226 0010 8D91      		ld r24,X+
 227               	.LVL9:
 331:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 228               		.loc 1 331 9 is_stmt 0 view .LVU36
 229 0012 E82F      		mov r30,r24
 230 0014 E295      		swap r30
 231 0016 EF70      		andi r30,lo8(15)
 232 0018 F0E0      		ldi r31,0
 331:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 233               		.loc 1 331 42 view .LVU37
 234 001a 41A1      		ldd r20,Z+33
 331:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 235               		.loc 1 331 47 view .LVU38
 236 001c 8F70      		andi r24,lo8(15)
 237 001e 9B01      		movw r18,r22
 238 0020 00C0      		rjmp 2f
 239               		1:
 240 0022 220F      		lsl r18
 241               		2:
 242 0024 8A95      		dec r24
 243 0026 02F4      		brpl 1b
 331:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 244               		.loc 1 331 42 view .LVU39
 245 0028 922F      		mov r25,r18
 246 002a 9095      		com r25
 247 002c 9423      		and r25,r20
 248 002e 91A3      		std Z+33,r25
 332:keyboards/lily58/rev1/matrix.c ****     }
 249               		.loc 1 332 9 is_stmt 1 view .LVU40
 332:keyboards/lily58/rev1/matrix.c ****     }
 250               		.loc 1 332 42 is_stmt 0 view .LVU41
 251 0030 82A1      		ldd r24,Z+34
 252 0032 822B      		or r24,r18
 253 0034 82A3      		std Z+34,r24
 254               	.LVL10:
 330:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 255               		.loc 1 330 5 view .LVU42
 256 0036 80E0      		ldi r24,hi8(col_pins+6)
 257 0038 A030      		cpi r26,lo8(col_pins+6)
 258 003a B807      		cpc r27,r24
 259 003c 01F4      		brne .L11
 260               	.LVL11:
 330:keyboards/lily58/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 261               		.loc 1 330 5 view .LVU43
 262               	.LBE15:
 263               	.LBE16:
 104:keyboards/lily58/rev1/matrix.c ****     setPinOutput(D5);
 264               		.loc 1 104 5 is_stmt 1 view .LVU44
 265 003e 209A      		sbi 0x4,0
 105:keyboards/lily58/rev1/matrix.c ****     writePinHigh(B0);
 266               		.loc 1 105 5 view .LVU45
 267 0040 559A      		sbi 0xa,5
 106:keyboards/lily58/rev1/matrix.c ****     writePinHigh(D5);
 268               		.loc 1 106 5 view .LVU46
 269 0042 289A      		sbi 0x5,0
 107:keyboards/lily58/rev1/matrix.c **** 
 270               		.loc 1 107 5 view .LVU47
 271 0044 5D9A      		sbi 0xb,5
 110:keyboards/lily58/rev1/matrix.c ****         matrix[i] = 0;
 272               		.loc 1 110 5 view .LVU48
 273               	.LBB17:
 110:keyboards/lily58/rev1/matrix.c ****         matrix[i] = 0;
 274               		.loc 1 110 10 view .LVU49
 275               	.LVL12:
 110:keyboards/lily58/rev1/matrix.c ****         matrix[i] = 0;
 276               		.loc 1 110 10 is_stmt 0 view .LVU50
 277 0046 E0E0      		ldi r30,lo8(matrix)
 278 0048 F0E0      		ldi r31,hi8(matrix)
 279 004a A0E0      		ldi r26,lo8(matrix_debouncing)
 280 004c B0E0      		ldi r27,hi8(matrix_debouncing)
 281               	.LVL13:
 282               	.L12:
 111:keyboards/lily58/rev1/matrix.c ****         matrix_debouncing[i] = 0;
 283               		.loc 1 111 9 is_stmt 1 discriminator 3 view .LVU51
 111:keyboards/lily58/rev1/matrix.c ****         matrix_debouncing[i] = 0;
 284               		.loc 1 111 19 is_stmt 0 discriminator 3 view .LVU52
 285 004e 1192      		st Z+,__zero_reg__
 286               	.LVL14:
 112:keyboards/lily58/rev1/matrix.c ****     }
 287               		.loc 1 112 9 is_stmt 1 discriminator 3 view .LVU53
 112:keyboards/lily58/rev1/matrix.c ****     }
 288               		.loc 1 112 30 is_stmt 0 discriminator 3 view .LVU54
 289 0050 1D92      		st X+,__zero_reg__
 290               	.LVL15:
 110:keyboards/lily58/rev1/matrix.c ****         matrix[i] = 0;
 291               		.loc 1 110 5 discriminator 3 view .LVU55
 292 0052 80E0      		ldi r24,hi8(matrix+10)
 293 0054 E030      		cpi r30,lo8(matrix+10)
 294 0056 F807      		cpc r31,r24
 295 0058 01F4      		brne .L12
 296               	.LBE17:
 115:keyboards/lily58/rev1/matrix.c **** 
 297               		.loc 1 115 5 is_stmt 1 view .LVU56
 115:keyboards/lily58/rev1/matrix.c **** 
 298               		.loc 1 115 17 is_stmt 0 view .LVU57
 299 005a 0E94 0000 		call has_usb
 300               	.LVL16:
 115:keyboards/lily58/rev1/matrix.c **** 
 301               		.loc 1 115 15 view .LVU58
 302 005e 8093 0000 		sts is_master,r24
 117:keyboards/lily58/rev1/matrix.c **** }
 303               		.loc 1 117 5 is_stmt 1 view .LVU59
 304 0062 0C94 0000 		jmp matrix_init_quantum
 305               	.LVL17:
 306               		.cfi_endproc
 307               	.LFE27:
 309               		.section	.text._matrix_scan,"ax",@progbits
 310               	.global	_matrix_scan
 312               	_matrix_scan:
 313               	.LFB28:
 121:keyboards/lily58/rev1/matrix.c ****     // Right hand is stored after the left in the matirx so, we need to offset it
 314               		.loc 1 121 1 view -0
 315               		.cfi_startproc
 316 0000 9F92      		push r9
 317               	.LCFI2:
 318               		.cfi_def_cfa_offset 3
 319               		.cfi_offset 9, -2
 320 0002 AF92      		push r10
 321               	.LCFI3:
 322               		.cfi_def_cfa_offset 4
 323               		.cfi_offset 10, -3
 324 0004 BF92      		push r11
 325               	.LCFI4:
 326               		.cfi_def_cfa_offset 5
 327               		.cfi_offset 11, -4
 328 0006 CF92      		push r12
 329               	.LCFI5:
 330               		.cfi_def_cfa_offset 6
 331               		.cfi_offset 12, -5
 332 0008 DF92      		push r13
 333               	.LCFI6:
 334               		.cfi_def_cfa_offset 7
 335               		.cfi_offset 13, -6
 336 000a EF92      		push r14
 337               	.LCFI7:
 338               		.cfi_def_cfa_offset 8
 339               		.cfi_offset 14, -7
 340 000c FF92      		push r15
 341               	.LCFI8:
 342               		.cfi_def_cfa_offset 9
 343               		.cfi_offset 15, -8
 344 000e 0F93      		push r16
 345               	.LCFI9:
 346               		.cfi_def_cfa_offset 10
 347               		.cfi_offset 16, -9
 348 0010 1F93      		push r17
 349               	.LCFI10:
 350               		.cfi_def_cfa_offset 11
 351               		.cfi_offset 17, -10
 352 0012 CF93      		push r28
 353               	.LCFI11:
 354               		.cfi_def_cfa_offset 12
 355               		.cfi_offset 28, -11
 356 0014 DF93      		push r29
 357               	.LCFI12:
 358               		.cfi_def_cfa_offset 13
 359               		.cfi_offset 29, -12
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 11 */
 363               	.L__stack_usage = 11
 123:keyboards/lily58/rev1/matrix.c **** 
 364               		.loc 1 123 5 view .LVU61
 123:keyboards/lily58/rev1/matrix.c **** 
 365               		.loc 1 123 29 is_stmt 0 view .LVU62
 366 0016 8091 0000 		lds r24,isLeftHand
 123:keyboards/lily58/rev1/matrix.c **** 
 367               		.loc 1 123 33 view .LVU63
 368 001a C5E0      		ldi r28,lo8(5)
 369 001c D0E0      		ldi r29,0
 370 001e 8823      		tst r24
 371 0020 01F0      		breq .L16
 372 0022 D0E0      		ldi r29,0
 373 0024 C0E0      		ldi r28,0
 374               	.L16:
 375               	.LVL18:
 125:keyboards/lily58/rev1/matrix.c ****         select_row(i);
 376               		.loc 1 125 5 is_stmt 1 discriminator 4 view .LVU64
 377               	.LBB30:
 125:keyboards/lily58/rev1/matrix.c ****         select_row(i);
 378               		.loc 1 125 10 discriminator 4 view .LVU65
 125:keyboards/lily58/rev1/matrix.c ****         select_row(i);
 379               		.loc 1 125 10 is_stmt 0 discriminator 4 view .LVU66
 380 0026 80E0      		ldi r24,lo8(row_pins)
 381 0028 C82E      		mov r12,r24
 382 002a 80E0      		ldi r24,hi8(row_pins)
 383 002c D82E      		mov r13,r24
 384 002e AE01      		movw r20,r28
 385 0030 4050      		subi r20,lo8(-(matrix_debouncing))
 386 0032 5040      		sbci r21,hi8(-(matrix_debouncing))
 387 0034 7A01      		movw r14,r20
 388               	.LBE30:
 123:keyboards/lily58/rev1/matrix.c **** 
 389               		.loc 1 123 33 discriminator 4 view .LVU67
 390 0036 8A01      		movw r16,r20
 391               	.LBB45:
 392               	.LBB31:
 393               	.LBB32:
 394               	.LBB33:
 352:keyboards/lily58/rev1/matrix.c **** 
 353:keyboards/lily58/rev1/matrix.c **** static void select_row(uint8_t row)
 354:keyboards/lily58/rev1/matrix.c **** {
 355:keyboards/lily58/rev1/matrix.c ****     _SFR_IO8((row_pins[row] >> 4) + 1) |=  _BV(row_pins[row] & 0xF);
 395               		.loc 1 355 44 discriminator 4 view .LVU68
 396 0038 AA24      		clr r10
 397 003a A394      		inc r10
 398 003c B12C      		mov r11,__zero_reg__
 399               	.LBE33:
 400               	.LBE32:
 131:keyboards/lily58/rev1/matrix.c ****         }
 401               		.loc 1 131 24 discriminator 4 view .LVU69
 402 003e 25E0      		ldi r18,lo8(5)
 403 0040 922E      		mov r9,r18
 404               	.LVL19:
 405               	.L20:
 126:keyboards/lily58/rev1/matrix.c ****         _delay_us(30);  // without this wait read unstable value.
 406               		.loc 1 126 9 is_stmt 1 view .LVU70
 407               	.LBB35:
 408               	.LBI32:
 353:keyboards/lily58/rev1/matrix.c **** {
 409               		.loc 1 353 13 view .LVU71
 410               	.LBB34:
 411               		.loc 1 355 5 view .LVU72
 412 0042 F601      		movw r30,r12
 413 0044 8191      		ld r24,Z+
 414 0046 6F01      		movw r12,r30
 415               	.LVL20:
 416               		.loc 1 355 5 is_stmt 0 view .LVU73
 417 0048 E82F      		mov r30,r24
 418 004a E295      		swap r30
 419 004c EF70      		andi r30,lo8(15)
 420 004e F0E0      		ldi r31,0
 421               		.loc 1 355 40 view .LVU74
 422 0050 21A1      		ldd r18,Z+33
 423               		.loc 1 355 44 view .LVU75
 424 0052 8F70      		andi r24,lo8(15)
 425 0054 A501      		movw r20,r10
 426 0056 00C0      		rjmp 2f
 427               		1:
 428 0058 440F      		lsl r20
 429 005a 551F      		rol r21
 430               		2:
 431 005c 8A95      		dec r24
 432 005e 02F4      		brpl 1b
 433 0060 CA01      		movw r24,r20
 434               		.loc 1 355 40 view .LVU76
 435 0062 922F      		mov r25,r18
 436 0064 982B      		or r25,r24
 437 0066 91A3      		std Z+33,r25
 356:keyboards/lily58/rev1/matrix.c ****     _SFR_IO8((row_pins[row] >> 4) + 2) &= ~_BV(row_pins[row] & 0xF);
 438               		.loc 1 356 5 is_stmt 1 view .LVU77
 439               		.loc 1 356 40 is_stmt 0 view .LVU78
 440 0068 92A1      		ldd r25,Z+34
 441 006a 8095      		com r24
 442 006c 8923      		and r24,r25
 443 006e 82A3      		std Z+34,r24
 444               	.LVL21:
 445               		.loc 1 356 40 view .LVU79
 446               	.LBE34:
 447               	.LBE35:
 127:keyboards/lily58/rev1/matrix.c ****         matrix_row_t cols = read_cols();
 448               		.loc 1 127 9 is_stmt 1 view .LVU80
 449               	.LBB36:
 450               	.LBI36:
 451               		.file 2 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h"
   1:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 452               		.loc 2 255 1 view .LVU81
 453               	.LBB37:
 256:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 454               		.loc 2 257 2 view .LVU82
 258:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 455               		.loc 2 261 2 view .LVU83
 262:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 456               		.loc 2 262 2 view .LVU84
 263:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 457               		.loc 2 263 2 view .LVU85
 264:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 458               		.loc 2 273 3 view .LVU86
 274:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 459               		.loc 2 276 2 view .LVU87
 460 0070 50EA      		ldi r21,lo8(-96)
 461 0072 5A95      	1:	dec r21
 462 0074 01F4      		brne 1b
 463               	.LVL22:
 464               		.loc 2 276 2 is_stmt 0 view .LVU88
 465               	.LBE37:
 466               	.LBE36:
 128:keyboards/lily58/rev1/matrix.c ****         if (matrix_debouncing[i+offset] != cols) {
 467               		.loc 1 128 9 is_stmt 1 view .LVU89
 468               	.LBB38:
 469               	.LBI38:
 336:keyboards/lily58/rev1/matrix.c **** {
 470               		.loc 1 336 21 view .LVU90
 336:keyboards/lily58/rev1/matrix.c **** {
 471               		.loc 1 336 21 is_stmt 0 view .LVU91
 472 0076 E0E0      		ldi r30,lo8(col_pins)
 473 0078 F0E0      		ldi r31,hi8(col_pins)
 474               	.LBB39:
 338:keyboards/lily58/rev1/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {
 475               		.loc 1 338 18 view .LVU92
 476 007a 20E0      		ldi r18,0
 477               	.LBB40:
 339:keyboards/lily58/rev1/matrix.c ****         result |= (_SFR_IO8(col_pins[x] >> 4) & _BV(col_pins[x] & 0xF)) ? 0 : (1 << x);
 478               		.loc 1 339 13 view .LVU93
 479 007c 50E0      		ldi r21,0
 480 007e 40E0      		ldi r20,0
 481               	.LVL23:
 482               	.L18:
 340:keyboards/lily58/rev1/matrix.c ****     }
 483               		.loc 1 340 9 is_stmt 1 view .LVU94
 340:keyboards/lily58/rev1/matrix.c ****     }
 484               		.loc 1 340 20 is_stmt 0 view .LVU95
 485 0080 3191      		ld r19,Z+
 486 0082 A32F      		mov r26,r19
 487 0084 A295      		swap r26
 488 0086 AF70      		andi r26,lo8(15)
 489 0088 B0E0      		ldi r27,0
 490 008a 9096      		adiw r26,32
 491 008c 8C91      		ld r24,X
 492 008e 90E0      		ldi r25,0
 340:keyboards/lily58/rev1/matrix.c ****     }
 493               		.loc 1 340 49 view .LVU96
 494 0090 3F70      		andi r19,lo8(15)
 340:keyboards/lily58/rev1/matrix.c ****     }
 495               		.loc 1 340 73 view .LVU97
 496 0092 00C0      		rjmp 2f
 497               		1:
 498 0094 9595      		asr r25
 499 0096 8795      		ror r24
 500               		2:
 501 0098 3A95      		dec r19
 502 009a 02F4      		brpl 1b
 340:keyboards/lily58/rev1/matrix.c ****     }
 503               		.loc 1 340 77 view .LVU98
 504 009c 80FD      		sbrc r24,0
 505 009e 00C0      		rjmp .L26
 506 00a0 C501      		movw r24,r10
 507 00a2 042E      		mov r0,r20
 508 00a4 00C0      		rjmp 2f
 509               		1:
 510 00a6 880F      		lsl r24
 511               		2:
 512 00a8 0A94      		dec r0
 513 00aa 02F4      		brpl 1b
 514               	.L17:
 340:keyboards/lily58/rev1/matrix.c ****     }
 515               		.loc 1 340 16 view .LVU99
 516 00ac 282B      		or r18,r24
 517               	.LVL24:
 339:keyboards/lily58/rev1/matrix.c ****         result |= (_SFR_IO8(col_pins[x] >> 4) & _BV(col_pins[x] & 0xF)) ? 0 : (1 << x);
 518               		.loc 1 339 38 view .LVU100
 519 00ae 4F5F      		subi r20,-1
 520 00b0 5F4F      		sbci r21,-1
 521               	.LVL25:
 339:keyboards/lily58/rev1/matrix.c ****         result |= (_SFR_IO8(col_pins[x] >> 4) & _BV(col_pins[x] & 0xF)) ? 0 : (1 << x);
 522               		.loc 1 339 5 view .LVU101
 523 00b2 4630      		cpi r20,6
 524 00b4 5105      		cpc r21,__zero_reg__
 525 00b6 01F4      		brne .L18
 526               	.LBE40:
 342:keyboards/lily58/rev1/matrix.c **** }
 527               		.loc 1 342 5 is_stmt 1 view .LVU102
 528               	.LVL26:
 342:keyboards/lily58/rev1/matrix.c **** }
 529               		.loc 1 342 5 is_stmt 0 view .LVU103
 530               	.LBE39:
 531               	.LBE38:
 129:keyboards/lily58/rev1/matrix.c ****             matrix_debouncing[i+offset] = cols;
 532               		.loc 1 129 9 is_stmt 1 view .LVU104
 129:keyboards/lily58/rev1/matrix.c ****             matrix_debouncing[i+offset] = cols;
 533               		.loc 1 129 12 is_stmt 0 view .LVU105
 534 00b8 F801      		movw r30,r16
 535 00ba 8081      		ld r24,Z
 536 00bc 8217      		cp r24,r18
 537 00be 01F0      		breq .L19
 130:keyboards/lily58/rev1/matrix.c ****             debouncing = DEBOUNCE;
 538               		.loc 1 130 13 is_stmt 1 view .LVU106
 130:keyboards/lily58/rev1/matrix.c ****             debouncing = DEBOUNCE;
 539               		.loc 1 130 41 is_stmt 0 view .LVU107
 540 00c0 2083      		st Z,r18
 131:keyboards/lily58/rev1/matrix.c ****         }
 541               		.loc 1 131 13 is_stmt 1 view .LVU108
 131:keyboards/lily58/rev1/matrix.c ****         }
 542               		.loc 1 131 24 is_stmt 0 view .LVU109
 543 00c2 9092 0000 		sts debouncing,r9
 544               	.L19:
 133:keyboards/lily58/rev1/matrix.c ****     }
 545               		.loc 1 133 9 is_stmt 1 discriminator 2 view .LVU110
 546 00c6 0E94 0000 		call unselect_rows
 547               	.LVL27:
 133:keyboards/lily58/rev1/matrix.c ****     }
 548               		.loc 1 133 9 is_stmt 0 discriminator 2 view .LVU111
 549 00ca 0F5F      		subi r16,-1
 550 00cc 1F4F      		sbci r17,-1
 551               	.LBE31:
 125:keyboards/lily58/rev1/matrix.c ****         select_row(i);
 552               		.loc 1 125 5 discriminator 2 view .LVU112
 553 00ce F0E0      		ldi r31,lo8(row_pins+5)
 554 00d0 CF16      		cp r12,r31
 555 00d2 F0E0      		ldi r31,hi8(row_pins+5)
 556 00d4 DF06      		cpc r13,r31
 557 00d6 01F0      		breq .+2
 558 00d8 00C0      		rjmp .L20
 559               	.LBE45:
 136:keyboards/lily58/rev1/matrix.c ****         if (--debouncing) {
 560               		.loc 1 136 5 is_stmt 1 view .LVU113
 136:keyboards/lily58/rev1/matrix.c ****         if (--debouncing) {
 561               		.loc 1 136 9 is_stmt 0 view .LVU114
 562 00da 8091 0000 		lds r24,debouncing
 136:keyboards/lily58/rev1/matrix.c ****         if (--debouncing) {
 563               		.loc 1 136 8 view .LVU115
 564 00de 8823      		tst r24
 565 00e0 01F0      		breq .L23
 137:keyboards/lily58/rev1/matrix.c ****             _delay_ms(1);
 566               		.loc 1 137 9 is_stmt 1 view .LVU116
 137:keyboards/lily58/rev1/matrix.c ****             _delay_ms(1);
 567               		.loc 1 137 13 is_stmt 0 view .LVU117
 568 00e2 8150      		subi r24,lo8(-(-1))
 137:keyboards/lily58/rev1/matrix.c ****             _delay_ms(1);
 569               		.loc 1 137 12 view .LVU118
 570 00e4 8093 0000 		sts debouncing,r24
 571 00e8 8823      		tst r24
 572 00ea 01F0      		breq .L22
 138:keyboards/lily58/rev1/matrix.c ****         } else {
 573               		.loc 1 138 13 is_stmt 1 view .LVU119
 574               	.LVL28:
 575               	.LBB46:
 576               	.LBI46:
 166:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 577               		.loc 2 166 1 view .LVU120
 578               	.LBB47:
 168:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 579               		.loc 2 168 2 view .LVU121
 172:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 580               		.loc 2 172 2 view .LVU122
 173:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 581               		.loc 2 173 2 view .LVU123
 174:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 582               		.loc 2 174 2 view .LVU124
 184:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 583               		.loc 2 184 3 view .LVU125
 187:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 584               		.loc 2 187 2 view .LVU126
 585 00ec 8FE9      		ldi r24,lo8(3999)
 586 00ee 9FE0      		ldi r25,hi8(3999)
 587 00f0 0197      	1:	sbiw r24,1
 588 00f2 01F4      		brne 1b
 589 00f4 00C0      		rjmp .
 590 00f6 0000      		nop
 591               	.LVL29:
 592               	.L23:
 187:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 593               		.loc 2 187 2 is_stmt 0 view .LVU127
 594               	.LBE47:
 595               	.LBE46:
 146:keyboards/lily58/rev1/matrix.c **** }
 596               		.loc 1 146 5 is_stmt 1 view .LVU128
 147:keyboards/lily58/rev1/matrix.c **** 
 597               		.loc 1 147 1 is_stmt 0 view .LVU129
 598 00f8 81E0      		ldi r24,lo8(1)
 599               	/* epilogue start */
 600 00fa DF91      		pop r29
 601 00fc CF91      		pop r28
 602 00fe 1F91      		pop r17
 603 0100 0F91      		pop r16
 604 0102 FF90      		pop r15
 605 0104 EF90      		pop r14
 606 0106 DF90      		pop r13
 607 0108 CF90      		pop r12
 608               	.LVL30:
 147:keyboards/lily58/rev1/matrix.c **** 
 609               		.loc 1 147 1 view .LVU130
 610 010a BF90      		pop r11
 611 010c AF90      		pop r10
 612 010e 9F90      		pop r9
 613 0110 0895      		ret
 614               	.LVL31:
 615               	.L26:
 616               	.LBB48:
 617               	.LBB44:
 618               	.LBB43:
 619               	.LBB42:
 620               	.LBB41:
 340:keyboards/lily58/rev1/matrix.c ****     }
 621               		.loc 1 340 77 view .LVU131
 622 0112 80E0      		ldi r24,0
 623 0114 00C0      		rjmp .L17
 624               	.LVL32:
 625               	.L22:
 340:keyboards/lily58/rev1/matrix.c ****     }
 626               		.loc 1 340 77 view .LVU132
 627 0116 C050      		subi r28,lo8(-(matrix))
 628 0118 D040      		sbci r29,hi8(-(matrix))
 629               	.LVL33:
 630               	.L24:
 340:keyboards/lily58/rev1/matrix.c ****     }
 631               		.loc 1 340 77 view .LVU133
 632               	.LBE41:
 633               	.LBE42:
 634               	.LBE43:
 635               	.LBE44:
 636               	.LBE48:
 637               	.LBB49:
 141:keyboards/lily58/rev1/matrix.c ****             }
 638               		.loc 1 141 17 is_stmt 1 discriminator 3 view .LVU134
 141:keyboards/lily58/rev1/matrix.c ****             }
 639               		.loc 1 141 53 is_stmt 0 discriminator 3 view .LVU135
 640 011a F701      		movw r30,r14
 641 011c 9191      		ld r25,Z+
 642 011e 7F01      		movw r14,r30
 141:keyboards/lily58/rev1/matrix.c ****             }
 643               		.loc 1 141 34 discriminator 3 view .LVU136
 644 0120 9993      		st Y+,r25
 140:keyboards/lily58/rev1/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 645               		.loc 1 140 53 discriminator 3 view .LVU137
 646 0122 8F5F      		subi r24,lo8(-(1))
 647               	.LVL34:
 140:keyboards/lily58/rev1/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 648               		.loc 1 140 13 discriminator 3 view .LVU138
 649 0124 8530      		cpi r24,lo8(5)
 650 0126 01F4      		brne .L24
 651 0128 00C0      		rjmp .L23
 652               	.LBE49:
 653               		.cfi_endproc
 654               	.LFE28:
 656               		.section	.text.serial_transaction,"ax",@progbits
 657               	.global	serial_transaction
 659               	serial_transaction:
 660               	.LVL35:
 661               	.LFB29:
 184:keyboards/lily58/rev1/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 662               		.loc 1 184 44 is_stmt 1 view -0
 663               		.cfi_startproc
 184:keyboards/lily58/rev1/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 664               		.loc 1 184 44 is_stmt 0 view .LVU140
 665 0000 CF93      		push r28
 666               	.LCFI13:
 667               		.cfi_def_cfa_offset 3
 668               		.cfi_offset 28, -2
 669 0002 DF93      		push r29
 670               	.LCFI14:
 671               		.cfi_def_cfa_offset 4
 672               		.cfi_offset 29, -3
 673               	/* prologue: function */
 674               	/* frame size = 0 */
 675               	/* stack size = 2 */
 676               	.L__stack_usage = 2
 185:keyboards/lily58/rev1/matrix.c **** #ifdef SERIAL_USE_MULTI_TRANSACTION
 677               		.loc 1 185 5 is_stmt 1 view .LVU141
 185:keyboards/lily58/rev1/matrix.c **** #ifdef SERIAL_USE_MULTI_TRANSACTION
 678               		.loc 1 185 36 is_stmt 0 view .LVU142
 679 0004 2091 0000 		lds r18,isLeftHand
 185:keyboards/lily58/rev1/matrix.c **** #ifdef SERIAL_USE_MULTI_TRANSACTION
 680               		.loc 1 185 54 view .LVU143
 681 0008 D0E0      		ldi r29,0
 682 000a C0E0      		ldi r28,0
 683 000c 2223      		tst r18
 684 000e 01F0      		breq .L34
 685 0010 C5E0      		ldi r28,lo8(5)
 686 0012 D0E0      		ldi r29,0
 687               	.L34:
 688               	.LVL36:
 187:keyboards/lily58/rev1/matrix.c **** #else
 689               		.loc 1 187 5 is_stmt 1 discriminator 4 view .LVU144
 187:keyboards/lily58/rev1/matrix.c **** #else
 690               		.loc 1 187 13 is_stmt 0 discriminator 4 view .LVU145
 691 0014 0E94 0000 		call serial_update_buffers
 692               	.LVL37:
 191:keyboards/lily58/rev1/matrix.c ****         if(ret==2) writePinLow(B0);
 693               		.loc 1 191 5 is_stmt 1 discriminator 4 view .LVU146
 191:keyboards/lily58/rev1/matrix.c ****         if(ret==2) writePinLow(B0);
 694               		.loc 1 191 8 is_stmt 0 discriminator 4 view .LVU147
 695 0018 0097      		sbiw r24,0
 696 001a 01F0      		breq .L35
 192:keyboards/lily58/rev1/matrix.c ****         return 1;
 697               		.loc 1 192 9 is_stmt 1 view .LVU148
 192:keyboards/lily58/rev1/matrix.c ****         return 1;
 698               		.loc 1 192 11 is_stmt 0 view .LVU149
 699 001c 0297      		sbiw r24,2
 700 001e 01F4      		brne .L38
 192:keyboards/lily58/rev1/matrix.c ****         return 1;
 701               		.loc 1 192 20 is_stmt 1 discriminator 1 view .LVU150
 702 0020 2898      		cbi 0x5,0
 703               	.L38:
 193:keyboards/lily58/rev1/matrix.c ****     }
 704               		.loc 1 193 16 is_stmt 0 view .LVU151
 705 0022 81E0      		ldi r24,lo8(1)
 706 0024 90E0      		ldi r25,0
 707               	.LVL38:
 193:keyboards/lily58/rev1/matrix.c ****     }
 708               		.loc 1 193 16 view .LVU152
 709 0026 00C0      		rjmp .L33
 710               	.LVL39:
 711               	.L35:
 195:keyboards/lily58/rev1/matrix.c ****     memcpy(&matrix[slaveOffset],
 712               		.loc 1 195 5 is_stmt 1 view .LVU153
 713 0028 289A      		sbi 0x5,0
 196:keyboards/lily58/rev1/matrix.c ****         (void *)serial_slave_buffer, SERIAL_SLAVE_BUFFER_LENGTH);
 714               		.loc 1 196 5 view .LVU154
 196:keyboards/lily58/rev1/matrix.c ****         (void *)serial_slave_buffer, SERIAL_SLAVE_BUFFER_LENGTH);
 715               		.loc 1 196 12 is_stmt 0 view .LVU155
 716 002a DE01      		movw r26,r28
 717 002c A050      		subi r26,lo8(-(matrix))
 718 002e B040      		sbci r27,hi8(-(matrix))
 196:keyboards/lily58/rev1/matrix.c ****         (void *)serial_slave_buffer, SERIAL_SLAVE_BUFFER_LENGTH);
 719               		.loc 1 196 5 view .LVU156
 720 0030 25E0      		ldi r18,lo8(5)
 721 0032 E0E0      		ldi r30,lo8(serial_slave_buffer)
 722 0034 F0E0      		ldi r31,hi8(serial_slave_buffer)
 723               		0:
 724 0036 0190      		ld r0,Z+
 725 0038 0D92      		st X+,r0
 726 003a 2A95      		dec r18
 727 003c 01F4      		brne 0b
 198:keyboards/lily58/rev1/matrix.c **** }
 728               		.loc 1 198 5 is_stmt 1 view .LVU157
 729               	.LVL40:
 730               	.L33:
 731               	/* epilogue start */
 199:keyboards/lily58/rev1/matrix.c **** #endif
 732               		.loc 1 199 1 is_stmt 0 view .LVU158
 733 003e DF91      		pop r29
 734 0040 CF91      		pop r28
 735               	.LVL41:
 199:keyboards/lily58/rev1/matrix.c **** #endif
 736               		.loc 1 199 1 view .LVU159
 737 0042 0895      		ret
 738               		.cfi_endproc
 739               	.LFE29:
 741               		.section	.text.matrix_slave_scan,"ax",@progbits
 742               	.global	matrix_slave_scan
 744               	matrix_slave_scan:
 745               	.LFB32:
 264:keyboards/lily58/rev1/matrix.c ****     _matrix_scan();
 746               		.loc 1 264 30 is_stmt 1 view -0
 747               		.cfi_startproc
 748               	/* prologue: function */
 749               	/* frame size = 0 */
 750               	/* stack size = 0 */
 751               	.L__stack_usage = 0
 265:keyboards/lily58/rev1/matrix.c **** 
 752               		.loc 1 265 5 view .LVU161
 753 0000 0E94 0000 		call _matrix_scan
 754               	.LVL42:
 267:keyboards/lily58/rev1/matrix.c **** 
 755               		.loc 1 267 5 view .LVU162
 267:keyboards/lily58/rev1/matrix.c **** 
 756               		.loc 1 267 31 is_stmt 0 view .LVU163
 757 0004 8091 0000 		lds r24,isLeftHand
 267:keyboards/lily58/rev1/matrix.c **** 
 758               		.loc 1 267 35 view .LVU164
 759 0008 E5E0      		ldi r30,lo8(5)
 760 000a F0E0      		ldi r31,0
 761 000c 8823      		tst r24
 762 000e 01F0      		breq .L40
 763 0010 F0E0      		ldi r31,0
 764 0012 E0E0      		ldi r30,0
 765               	.L40:
 766               	.LVL43:
 276:keyboards/lily58/rev1/matrix.c ****   #endif
 767               		.loc 1 276 5 is_stmt 1 discriminator 4 view .LVU165
 278:keyboards/lily58/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 768               		.loc 1 278 5 discriminator 4 view .LVU166
 769               	.LBB50:
 278:keyboards/lily58/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 770               		.loc 1 278 10 discriminator 4 view .LVU167
 278:keyboards/lily58/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 771               		.loc 1 278 10 is_stmt 0 discriminator 4 view .LVU168
 772 0014 E050      		subi r30,lo8(-(matrix))
 773 0016 F040      		sbci r31,hi8(-(matrix))
 774               	.LVL44:
 278:keyboards/lily58/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 775               		.loc 1 278 14 discriminator 4 view .LVU169
 776 0018 90E0      		ldi r25,0
 777 001a 80E0      		ldi r24,0
 778               	.LBE50:
 276:keyboards/lily58/rev1/matrix.c ****   #endif
 779               		.loc 1 276 9 discriminator 4 view .LVU170
 780 001c 20E0      		ldi r18,0
 781               	.LVL45:
 782               	.L42:
 783               	.LBB51:
 280:keyboards/lily58/rev1/matrix.c **** 	    change = 1;
 784               		.loc 1 280 9 is_stmt 1 view .LVU171
 280:keyboards/lily58/rev1/matrix.c **** 	    change = 1;
 785               		.loc 1 280 32 is_stmt 0 view .LVU172
 786 001e DC01      		movw r26,r24
 787 0020 A050      		subi r26,lo8(-(serial_slave_buffer))
 788 0022 B040      		sbci r27,hi8(-(serial_slave_buffer))
 789 0024 4C91      		ld r20,X
 280:keyboards/lily58/rev1/matrix.c **** 	    change = 1;
 790               		.loc 1 280 45 view .LVU173
 791 0026 3191      		ld r19,Z+
 280:keyboards/lily58/rev1/matrix.c **** 	    change = 1;
 792               		.loc 1 280 11 view .LVU174
 793 0028 4313      		cpse r20,r19
 281:keyboards/lily58/rev1/matrix.c ****   #endif
 794               		.loc 1 281 13 view .LVU175
 795 002a 21E0      		ldi r18,lo8(1)
 796               	.LVL46:
 797               	.L41:
 283:keyboards/lily58/rev1/matrix.c ****     }
 798               		.loc 1 283 9 is_stmt 1 discriminator 2 view .LVU176
 283:keyboards/lily58/rev1/matrix.c ****     }
 799               		.loc 1 283 32 is_stmt 0 discriminator 2 view .LVU177
 800 002c 3C93      		st X,r19
 278:keyboards/lily58/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 801               		.loc 1 278 40 discriminator 2 view .LVU178
 802 002e 0196      		adiw r24,1
 803               	.LVL47:
 278:keyboards/lily58/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 804               		.loc 1 278 5 discriminator 2 view .LVU179
 805 0030 8530      		cpi r24,5
 806 0032 9105      		cpc r25,__zero_reg__
 807 0034 01F4      		brne .L42
 808               	.LBE51:
 286:keyboards/lily58/rev1/matrix.c ****   #endif
 809               		.loc 1 286 5 is_stmt 1 view .LVU180
 286:keyboards/lily58/rev1/matrix.c ****   #endif
 810               		.loc 1 286 31 is_stmt 0 view .LVU181
 811 0036 8091 0000 		lds r24,slave_buffer_change_count
 812               	.LVL48:
 286:keyboards/lily58/rev1/matrix.c ****   #endif
 813               		.loc 1 286 31 view .LVU182
 814 003a 820F      		add r24,r18
 815 003c 8093 0000 		sts slave_buffer_change_count,r24
 816               	/* epilogue start */
 289:keyboards/lily58/rev1/matrix.c **** 
 817               		.loc 1 289 1 view .LVU183
 818 0040 0895      		ret
 819               		.cfi_endproc
 820               	.LFE32:
 822               		.section	.text.matrix_scan,"ax",@progbits
 823               	.global	matrix_scan
 825               	matrix_scan:
 826               	.LFB30:
 203:keyboards/lily58/rev1/matrix.c ****     if (is_master) {
 827               		.loc 1 203 1 is_stmt 1 view -0
 828               		.cfi_startproc
 829 0000 CF93      		push r28
 830               	.LCFI15:
 831               		.cfi_def_cfa_offset 3
 832               		.cfi_offset 28, -2
 833 0002 DF93      		push r29
 834               	.LCFI16:
 835               		.cfi_def_cfa_offset 4
 836               		.cfi_offset 29, -3
 837               	/* prologue: function */
 838               	/* frame size = 0 */
 839               	/* stack size = 2 */
 840               	.L__stack_usage = 2
 204:keyboards/lily58/rev1/matrix.c ****         matrix_master_scan();
 841               		.loc 1 204 5 view .LVU185
 204:keyboards/lily58/rev1/matrix.c ****         matrix_master_scan();
 842               		.loc 1 204 8 is_stmt 0 view .LVU186
 843 0004 8091 0000 		lds r24,is_master
 844 0008 8823      		tst r24
 845 000a 01F4      		brne .+2
 846 000c 00C0      		rjmp .L46
 205:keyboards/lily58/rev1/matrix.c ****     }else{
 847               		.loc 1 205 9 is_stmt 1 view .LVU187
 848               	.LBB57:
 849               	.LBI57:
 217:keyboards/lily58/rev1/matrix.c **** 
 850               		.loc 1 217 9 view .LVU188
 851               	.LBB58:
 219:keyboards/lily58/rev1/matrix.c ****     int mchanged = 1;
 852               		.loc 1 219 5 view .LVU189
 219:keyboards/lily58/rev1/matrix.c ****     int mchanged = 1;
 853               		.loc 1 219 15 is_stmt 0 view .LVU190
 854 000e 0E94 0000 		call _matrix_scan
 855               	.LVL49:
 220:keyboards/lily58/rev1/matrix.c **** 
 856               		.loc 1 220 5 is_stmt 1 view .LVU191
 222:keyboards/lily58/rev1/matrix.c **** 
 857               		.loc 1 222 5 view .LVU192
 222:keyboards/lily58/rev1/matrix.c **** 
 858               		.loc 1 222 31 is_stmt 0 view .LVU193
 859 0012 8091 0000 		lds r24,isLeftHand
 222:keyboards/lily58/rev1/matrix.c **** 
 860               		.loc 1 222 35 view .LVU194
 861 0016 C5E0      		ldi r28,lo8(5)
 862 0018 D0E0      		ldi r29,0
 863 001a 8823      		tst r24
 864 001c 01F0      		breq .L47
 865 001e D0E0      		ldi r29,0
 866 0020 C0E0      		ldi r28,0
 867               	.L47:
 868               	.LVL50:
 231:keyboards/lily58/rev1/matrix.c **** 		      &matrix[offset], SERIAL_MASTER_BUFFER_LENGTH);
 869               		.loc 1 231 5 is_stmt 1 view .LVU195
 232:keyboards/lily58/rev1/matrix.c ****   #endif
 870               		.loc 1 232 9 is_stmt 0 view .LVU196
 871 0022 C050      		subi r28,lo8(-(matrix))
 872 0024 D040      		sbci r29,hi8(-(matrix))
 873               	.LVL51:
 231:keyboards/lily58/rev1/matrix.c **** 		      &matrix[offset], SERIAL_MASTER_BUFFER_LENGTH);
 874               		.loc 1 231 16 view .LVU197
 875 0026 45E0      		ldi r20,lo8(5)
 876 0028 50E0      		ldi r21,0
 877 002a BE01      		movw r22,r28
 878 002c 80E0      		ldi r24,lo8(serial_master_buffer)
 879 002e 90E0      		ldi r25,hi8(serial_master_buffer)
 880 0030 0E94 0000 		call memcmp
 881               	.LVL52:
 234:keyboards/lily58/rev1/matrix.c **** 	   &matrix[offset], SERIAL_MASTER_BUFFER_LENGTH);
 882               		.loc 1 234 5 is_stmt 1 view .LVU198
 883 0034 25E0      		ldi r18,lo8(5)
 884 0036 FE01      		movw r30,r28
 885 0038 A0E0      		ldi r26,lo8(serial_master_buffer)
 886 003a B0E0      		ldi r27,hi8(serial_master_buffer)
 887               		0:
 888 003c 0190      		ld r0,Z+
 889 003e 0D92      		st X+,r0
 890 0040 2A95      		dec r18
 891 0042 01F4      		brne 0b
 241:keyboards/lily58/rev1/matrix.c **** #endif
 892               		.loc 1 241 5 view .LVU199
 241:keyboards/lily58/rev1/matrix.c **** #endif
 893               		.loc 1 241 9 is_stmt 0 view .LVU200
 894 0044 0E94 0000 		call serial_transaction
 895               	.LVL53:
 241:keyboards/lily58/rev1/matrix.c **** #endif
 896               		.loc 1 241 7 view .LVU201
 897 0048 892B      		or r24,r25
 898 004a 01F0      		breq .L48
 244:keyboards/lily58/rev1/matrix.c **** 
 899               		.loc 1 244 9 is_stmt 1 view .LVU202
 900 004c 5D98      		cbi 0xb,5
 246:keyboards/lily58/rev1/matrix.c **** 
 901               		.loc 1 246 9 view .LVU203
 246:keyboards/lily58/rev1/matrix.c **** 
 902               		.loc 1 246 20 is_stmt 0 view .LVU204
 903 004e 8091 0000 		lds r24,error_count
 904 0052 8F5F      		subi r24,lo8(-(1))
 905 0054 8093 0000 		sts error_count,r24
 248:keyboards/lily58/rev1/matrix.c ****             // reset other half if disconnected
 906               		.loc 1 248 9 is_stmt 1 view .LVU205
 248:keyboards/lily58/rev1/matrix.c ****             // reset other half if disconnected
 907               		.loc 1 248 12 is_stmt 0 view .LVU206
 908 0058 8630      		cpi r24,lo8(6)
 909 005a 00F0      		brlo .L58
 910               	.LBB59:
 250:keyboards/lily58/rev1/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 911               		.loc 1 250 13 is_stmt 1 view .LVU207
 250:keyboards/lily58/rev1/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 912               		.loc 1 250 44 is_stmt 0 view .LVU208
 913 005c 8091 0000 		lds r24,isLeftHand
 250:keyboards/lily58/rev1/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 914               		.loc 1 250 62 view .LVU209
 915 0060 F0E0      		ldi r31,0
 916 0062 E0E0      		ldi r30,0
 917 0064 8823      		tst r24
 918 0066 01F0      		breq .L51
 919 0068 E5E0      		ldi r30,lo8(5)
 920 006a F0E0      		ldi r31,0
 921               	.L51:
 922               	.LVL54:
 251:keyboards/lily58/rev1/matrix.c ****                 matrix[slaveOffset+i] = 0;
 923               		.loc 1 251 13 is_stmt 1 view .LVU210
 924               	.LBB60:
 251:keyboards/lily58/rev1/matrix.c ****                 matrix[slaveOffset+i] = 0;
 925               		.loc 1 251 18 view .LVU211
 252:keyboards/lily58/rev1/matrix.c ****             }
 926               		.loc 1 252 17 view .LVU212
 252:keyboards/lily58/rev1/matrix.c ****             }
 927               		.loc 1 252 39 is_stmt 0 view .LVU213
 928 006c E050      		subi r30,lo8(-(matrix))
 929 006e F040      		sbci r31,hi8(-(matrix))
 930               	.LVL55:
 252:keyboards/lily58/rev1/matrix.c ****             }
 931               		.loc 1 252 39 view .LVU214
 932 0070 1082      		st Z,__zero_reg__
 933               	.LVL56:
 252:keyboards/lily58/rev1/matrix.c ****             }
 934               		.loc 1 252 17 is_stmt 1 view .LVU215
 252:keyboards/lily58/rev1/matrix.c ****             }
 935               		.loc 1 252 39 is_stmt 0 view .LVU216
 936 0072 1182      		std Z+1,__zero_reg__
 937               	.LVL57:
 252:keyboards/lily58/rev1/matrix.c ****             }
 938               		.loc 1 252 17 is_stmt 1 view .LVU217
 252:keyboards/lily58/rev1/matrix.c ****             }
 939               		.loc 1 252 39 is_stmt 0 view .LVU218
 940 0074 1282      		std Z+2,__zero_reg__
 941               	.LVL58:
 252:keyboards/lily58/rev1/matrix.c ****             }
 942               		.loc 1 252 17 is_stmt 1 view .LVU219
 252:keyboards/lily58/rev1/matrix.c ****             }
 943               		.loc 1 252 39 is_stmt 0 view .LVU220
 944 0076 1382      		std Z+3,__zero_reg__
 945               	.LVL59:
 252:keyboards/lily58/rev1/matrix.c ****             }
 946               		.loc 1 252 17 is_stmt 1 view .LVU221
 252:keyboards/lily58/rev1/matrix.c ****             }
 947               		.loc 1 252 39 is_stmt 0 view .LVU222
 948 0078 1482      		std Z+4,__zero_reg__
 949               	.LVL60:
 950               	.L58:
 252:keyboards/lily58/rev1/matrix.c ****             }
 951               		.loc 1 252 39 view .LVU223
 952               	.LBE60:
 953               	.LBE59:
 954               	.LBE58:
 955               	.LBE57:
 956               	.LBB62:
 211:keyboards/lily58/rev1/matrix.c ****     }
 957               		.loc 1 211 9 is_stmt 1 discriminator 4 view .LVU224
 958 007a 0E94 0000 		call matrix_scan_quantum
 959               	.LVL61:
 960               	.LBE62:
 213:keyboards/lily58/rev1/matrix.c **** }
 961               		.loc 1 213 5 discriminator 4 view .LVU225
 214:keyboards/lily58/rev1/matrix.c **** 
 962               		.loc 1 214 1 is_stmt 0 discriminator 4 view .LVU226
 963 007e 81E0      		ldi r24,lo8(1)
 964               	/* epilogue start */
 965 0080 DF91      		pop r29
 966 0082 CF91      		pop r28
 967 0084 0895      		ret
 968               	.LVL62:
 969               	.L48:
 970               	.LBB63:
 971               	.LBB61:
 257:keyboards/lily58/rev1/matrix.c ****         error_count = 0;
 972               		.loc 1 257 9 is_stmt 1 view .LVU227
 973 0086 5D9A      		sbi 0xb,5
 258:keyboards/lily58/rev1/matrix.c ****     }
 974               		.loc 1 258 9 view .LVU228
 258:keyboards/lily58/rev1/matrix.c ****     }
 975               		.loc 1 258 21 is_stmt 0 view .LVU229
 976 0088 1092 0000 		sts error_count,__zero_reg__
 260:keyboards/lily58/rev1/matrix.c ****     return ret;
 977               		.loc 1 260 5 is_stmt 1 view .LVU230
 978 008c 00C0      		rjmp .L58
 979               	.LVL63:
 980               	.L46:
 260:keyboards/lily58/rev1/matrix.c ****     return ret;
 981               		.loc 1 260 5 is_stmt 0 view .LVU231
 982               	.LBE61:
 983               	.LBE63:
 984               	.LBB64:
 207:keyboards/lily58/rev1/matrix.c ****         int offset = (isLeftHand) ? ROWS_PER_HAND : 0;
 985               		.loc 1 207 9 is_stmt 1 view .LVU232
 986 008e 0E94 0000 		call matrix_slave_scan
 987               	.LVL64:
 208:keyboards/lily58/rev1/matrix.c ****         memcpy(&matrix[offset],
 988               		.loc 1 208 9 view .LVU233
 208:keyboards/lily58/rev1/matrix.c ****         memcpy(&matrix[offset],
 989               		.loc 1 208 35 is_stmt 0 view .LVU234
 990 0092 8091 0000 		lds r24,isLeftHand
 208:keyboards/lily58/rev1/matrix.c ****         memcpy(&matrix[offset],
 991               		.loc 1 208 51 view .LVU235
 992 0096 B0E0      		ldi r27,0
 993 0098 A0E0      		ldi r26,0
 994 009a 8823      		tst r24
 995 009c 01F0      		breq .L54
 996 009e A5E0      		ldi r26,lo8(5)
 997 00a0 B0E0      		ldi r27,0
 998               	.L54:
 999               	.LVL65:
 209:keyboards/lily58/rev1/matrix.c ****                (void *)serial_master_buffer, SERIAL_MASTER_BUFFER_LENGTH);
 1000               		.loc 1 209 9 is_stmt 1 discriminator 4 view .LVU236
 209:keyboards/lily58/rev1/matrix.c ****                (void *)serial_master_buffer, SERIAL_MASTER_BUFFER_LENGTH);
 1001               		.loc 1 209 16 is_stmt 0 discriminator 4 view .LVU237
 1002 00a2 A050      		subi r26,lo8(-(matrix))
 1003 00a4 B040      		sbci r27,hi8(-(matrix))
 1004               	.LVL66:
 209:keyboards/lily58/rev1/matrix.c ****                (void *)serial_master_buffer, SERIAL_MASTER_BUFFER_LENGTH);
 1005               		.loc 1 209 9 discriminator 4 view .LVU238
 1006 00a6 85E0      		ldi r24,lo8(5)
 1007 00a8 E0E0      		ldi r30,lo8(serial_master_buffer)
 1008 00aa F0E0      		ldi r31,hi8(serial_master_buffer)
 1009               		0:
 1010 00ac 0190      		ld r0,Z+
 1011 00ae 0D92      		st X+,r0
 1012 00b0 8A95      		dec r24
 1013 00b2 01F4      		brne 0b
 1014               	.LVL67:
 209:keyboards/lily58/rev1/matrix.c ****                (void *)serial_master_buffer, SERIAL_MASTER_BUFFER_LENGTH);
 1015               		.loc 1 209 9 discriminator 4 view .LVU239
 1016 00b4 00C0      		rjmp .L58
 1017               	.LBE64:
 1018               		.cfi_endproc
 1019               	.LFE30:
 1021               		.section	.text.matrix_is_modified,"ax",@progbits
 1022               	.global	matrix_is_modified
 1024               	matrix_is_modified:
 1025               	.LFB33:
 292:keyboards/lily58/rev1/matrix.c ****     if (debouncing) return false;
 1026               		.loc 1 292 1 is_stmt 1 view -0
 1027               		.cfi_startproc
 1028               	/* prologue: function */
 1029               	/* frame size = 0 */
 1030               	/* stack size = 0 */
 1031               	.L__stack_usage = 0
 293:keyboards/lily58/rev1/matrix.c ****     return true;
 1032               		.loc 1 293 5 view .LVU241
 293:keyboards/lily58/rev1/matrix.c ****     return true;
 1033               		.loc 1 293 8 is_stmt 0 view .LVU242
 1034 0000 81E0      		ldi r24,lo8(1)
 1035 0002 9091 0000 		lds r25,debouncing
 1036 0006 9111      		cpse r25,__zero_reg__
 1037 0008 80E0      		ldi r24,0
 1038               	.L60:
 1039               	/* epilogue start */
 295:keyboards/lily58/rev1/matrix.c **** 
 1040               		.loc 1 295 1 view .LVU243
 1041 000a 0895      		ret
 1042               		.cfi_endproc
 1043               	.LFE33:
 1045               		.section	.text.matrix_is_on,"ax",@progbits
 1046               	.global	matrix_is_on
 1048               	matrix_is_on:
 1049               	.LVL68:
 1050               	.LFB34:
 299:keyboards/lily58/rev1/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<<col));
 1051               		.loc 1 299 1 is_stmt 1 view -0
 1052               		.cfi_startproc
 1053               	/* prologue: function */
 1054               	/* frame size = 0 */
 1055               	/* stack size = 0 */
 1056               	.L__stack_usage = 0
 300:keyboards/lily58/rev1/matrix.c **** }
 1057               		.loc 1 300 5 view .LVU245
 300:keyboards/lily58/rev1/matrix.c **** }
 1058               		.loc 1 300 19 is_stmt 0 view .LVU246
 1059 0000 E82F      		mov r30,r24
 1060 0002 F0E0      		ldi r31,0
 1061 0004 E050      		subi r30,lo8(-(matrix))
 1062 0006 F040      		sbci r31,hi8(-(matrix))
 1063 0008 2081      		ld r18,Z
 1064 000a 30E0      		ldi r19,0
 300:keyboards/lily58/rev1/matrix.c **** }
 1065               		.loc 1 300 43 view .LVU247
 1066 000c 81E0      		ldi r24,lo8(1)
 1067 000e 90E0      		ldi r25,0
 1068               	.LVL69:
 300:keyboards/lily58/rev1/matrix.c **** }
 1069               		.loc 1 300 43 view .LVU248
 1070 0010 00C0      		rjmp 2f
 1071               		1:
 1072 0012 880F      		lsl r24
 1073 0014 991F      		rol r25
 1074               		2:
 1075 0016 6A95      		dec r22
 1076 0018 02F4      		brpl 1b
 300:keyboards/lily58/rev1/matrix.c **** }
 1077               		.loc 1 300 25 view .LVU249
 1078 001a 2823      		and r18,r24
 1079 001c 3923      		and r19,r25
 1080 001e 81E0      		ldi r24,lo8(1)
 1081 0020 232B      		or r18,r19
 1082 0022 01F4      		brne .L65
 1083 0024 80E0      		ldi r24,0
 1084               	.L65:
 1085               	/* epilogue start */
 301:keyboards/lily58/rev1/matrix.c **** 
 1086               		.loc 1 301 1 view .LVU250
 1087 0026 0895      		ret
 1088               		.cfi_endproc
 1089               	.LFE34:
 1091               		.section	.text.matrix_get_row,"ax",@progbits
 1092               	.global	matrix_get_row
 1094               	matrix_get_row:
 1095               	.LVL70:
 1096               	.LFB35:
 305:keyboards/lily58/rev1/matrix.c ****     return matrix[row];
 1097               		.loc 1 305 1 is_stmt 1 view -0
 1098               		.cfi_startproc
 1099               	/* prologue: function */
 1100               	/* frame size = 0 */
 1101               	/* stack size = 0 */
 1102               	.L__stack_usage = 0
 306:keyboards/lily58/rev1/matrix.c **** }
 1103               		.loc 1 306 5 view .LVU252
 306:keyboards/lily58/rev1/matrix.c **** }
 1104               		.loc 1 306 18 is_stmt 0 view .LVU253
 1105 0000 E82F      		mov r30,r24
 1106 0002 F0E0      		ldi r31,0
 1107 0004 E050      		subi r30,lo8(-(matrix))
 1108 0006 F040      		sbci r31,hi8(-(matrix))
 307:keyboards/lily58/rev1/matrix.c **** 
 1109               		.loc 1 307 1 view .LVU254
 1110 0008 8081      		ld r24,Z
 1111               	.LVL71:
 1112               	/* epilogue start */
 307:keyboards/lily58/rev1/matrix.c **** 
 1113               		.loc 1 307 1 view .LVU255
 1114 000a 0895      		ret
 1115               		.cfi_endproc
 1116               	.LFE35:
 1118               		.section	.text.matrix_print,"ax",@progbits
 1119               	.global	matrix_print
 1121               	matrix_print:
 1122               	.LFB36:
 310:keyboards/lily58/rev1/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 1123               		.loc 1 310 1 is_stmt 1 view -0
 1124               		.cfi_startproc
 1125               	/* prologue: function */
 1126               	/* frame size = 0 */
 1127               	/* stack size = 0 */
 1128               	.L__stack_usage = 0
 311:keyboards/lily58/rev1/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 1129               		.loc 1 311 38 view .LVU257
 312:keyboards/lily58/rev1/matrix.c ****         phex(row); print(": ");
 1130               		.loc 1 312 5 view .LVU258
 312:keyboards/lily58/rev1/matrix.c ****         phex(row); print(": ");
 1131               		.loc 1 312 10 view .LVU259
 1132               	.LVL72:
 1133               	/* epilogue start */
 317:keyboards/lily58/rev1/matrix.c **** 
 1134               		.loc 1 317 1 is_stmt 0 view .LVU260
 1135 0000 0895      		ret
 1136               		.cfi_endproc
 1137               	.LFE36:
 1139               		.section	.text.matrix_key_count,"ax",@progbits
 1140               	.global	matrix_key_count
 1142               	matrix_key_count:
 1143               	.LFB37:
 320:keyboards/lily58/rev1/matrix.c ****     uint8_t count = 0;
 1144               		.loc 1 320 1 is_stmt 1 view -0
 1145               		.cfi_startproc
 1146 0000 0F93      		push r16
 1147               	.LCFI17:
 1148               		.cfi_def_cfa_offset 3
 1149               		.cfi_offset 16, -2
 1150 0002 1F93      		push r17
 1151               	.LCFI18:
 1152               		.cfi_def_cfa_offset 4
 1153               		.cfi_offset 17, -3
 1154 0004 CF93      		push r28
 1155               	.LCFI19:
 1156               		.cfi_def_cfa_offset 5
 1157               		.cfi_offset 28, -4
 1158               	/* prologue: function */
 1159               	/* frame size = 0 */
 1160               	/* stack size = 3 */
 1161               	.L__stack_usage = 3
 321:keyboards/lily58/rev1/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1162               		.loc 1 321 5 view .LVU262
 1163               	.LVL73:
 322:keyboards/lily58/rev1/matrix.c ****         count += bitpop16(matrix[i]);
 1164               		.loc 1 322 5 view .LVU263
 1165               	.LBB65:
 322:keyboards/lily58/rev1/matrix.c ****         count += bitpop16(matrix[i]);
 1166               		.loc 1 322 10 view .LVU264
 322:keyboards/lily58/rev1/matrix.c ****         count += bitpop16(matrix[i]);
 1167               		.loc 1 322 10 is_stmt 0 view .LVU265
 1168 0006 00E0      		ldi r16,lo8(matrix)
 1169 0008 10E0      		ldi r17,hi8(matrix)
 1170               	.LBE65:
 321:keyboards/lily58/rev1/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1171               		.loc 1 321 13 view .LVU266
 1172 000a C0E0      		ldi r28,0
 1173               	.LVL74:
 1174               	.L69:
 1175               	.LBB66:
 323:keyboards/lily58/rev1/matrix.c ****     }
 1176               		.loc 1 323 9 is_stmt 1 discriminator 3 view .LVU267
 323:keyboards/lily58/rev1/matrix.c ****     }
 1177               		.loc 1 323 33 is_stmt 0 discriminator 3 view .LVU268
 1178 000c F801      		movw r30,r16
 1179 000e 8191      		ld r24,Z+
 1180 0010 8F01      		movw r16,r30
 1181               	.LVL75:
 323:keyboards/lily58/rev1/matrix.c ****     }
 1182               		.loc 1 323 18 discriminator 3 view .LVU269
 1183 0012 90E0      		ldi r25,0
 1184 0014 0E94 0000 		call bitpop16
 1185               	.LVL76:
 323:keyboards/lily58/rev1/matrix.c ****     }
 1186               		.loc 1 323 15 discriminator 3 view .LVU270
 1187 0018 C80F      		add r28,r24
 1188               	.LVL77:
 322:keyboards/lily58/rev1/matrix.c ****         count += bitpop16(matrix[i]);
 1189               		.loc 1 322 5 discriminator 3 view .LVU271
 1190 001a F0E0      		ldi r31,hi8(matrix+10)
 1191 001c 0030      		cpi r16,lo8(matrix+10)
 1192 001e 1F07      		cpc r17,r31
 1193 0020 01F4      		brne .L69
 1194               	.LBE66:
 325:keyboards/lily58/rev1/matrix.c **** }
 1195               		.loc 1 325 5 is_stmt 1 view .LVU272
 326:keyboards/lily58/rev1/matrix.c **** 
 1196               		.loc 1 326 1 is_stmt 0 view .LVU273
 1197 0022 8C2F      		mov r24,r28
 1198               	/* epilogue start */
 1199 0024 CF91      		pop r28
 1200               	.LVL78:
 326:keyboards/lily58/rev1/matrix.c **** 
 1201               		.loc 1 326 1 view .LVU274
 1202 0026 1F91      		pop r17
 1203 0028 0F91      		pop r16
 1204               	.LVL79:
 326:keyboards/lily58/rev1/matrix.c **** 
 1205               		.loc 1 326 1 view .LVU275
 1206 002a 0895      		ret
 1207               		.cfi_endproc
 1208               	.LFE37:
 1210               		.section	.bss.matrix_debouncing,"aw",@nobits
 1213               	matrix_debouncing:
 1214 0000 0000 0000 		.zero	10
 1214      0000 0000 
 1214      0000 
 1215               		.section	.bss.matrix,"aw",@nobits
 1218               	matrix:
 1219 0000 0000 0000 		.zero	10
 1219      0000 0000 
 1219      0000 
 1220               		.section	.rodata.col_pins,"a"
 1223               	col_pins:
 1224 0000 F6        		.byte	-10
 1225 0001 F7        		.byte	-9
 1226 0002 31        		.byte	49
 1227 0003 33        		.byte	51
 1228 0004 32        		.byte	50
 1229 0005 36        		.byte	54
 1230               		.section	.rodata.row_pins,"a"
 1233               	row_pins:
 1234 0000 66        		.byte	102
 1235 0001 97        		.byte	-105
 1236 0002 C6        		.byte	-58
 1237 0003 34        		.byte	52
 1238 0004 35        		.byte	53
 1239 0005 0000 0000 		.zero	5
 1239      00
 1240               	.global	is_master
 1241               		.section	.bss.is_master,"aw",@nobits
 1244               	is_master:
 1245 0000 00        		.zero	1
 1246               		.section	.bss.error_count,"aw",@nobits
 1249               	error_count:
 1250 0000 00        		.zero	1
 1251               		.section	.data.debouncing,"aw"
 1254               	debouncing:
 1255 0000 05        		.byte	5
 1256               		.text
 1257               	.Letext0:
 1258               		.file 3 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 1259               		.file 4 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\lib\\gcc\\avr\\8.3.0\\include\\st
 1260               		.file 5 "tmk_core/common/debug.h"
 1261               		.file 6 "tmk_core/common/matrix.h"
 1262               		.file 7 "keyboards/lily58/rev1/split_util.h"
 1263               		.file 8 "tmk_core/common/action.h"
 1264               		.file 9 "tmk_core/common/report.h"
 1265               		.file 10 "tmk_core/common/host.h"
 1266               		.file 11 "quantum/keycode_config.h"
 1267               		.file 12 "quantum/keymap.h"
 1268               		.file 13 "./quantum/color.h"
 1269               		.file 14 "quantum/rgblight.h"
 1270               		.file 15 "tmk_core/common/action_layer.h"
 1271               		.file 16 "tmk_core/common/timer.h"
 1272               		.file 17 "tmk_core/common/action_util.h"
 1273               		.file 18 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdlib.h"
 1274               		.file 19 "quantum/quantum.h"
 1275               		.file 20 "keyboards/lily58/rev1/split_scomm.h"
 1276               		.file 21 "tmk_core/common/util.h"
 1277               		.file 22 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\string.h"
DEFINED SYMBOLS
                            *ABS*:00000000 matrix.c
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:2      *ABS*:0000003e __SP_H__
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:3      *ABS*:0000003d __SP_L__
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:4      *ABS*:0000003f __SREG__
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:6      *ABS*:00000001 __zero_reg__
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:12     .text.unselect_rows:00000000 unselect_rows
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1233   .rodata.row_pins:00000000 row_pins
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:89     .text.matrix_init_user:00000000 matrix_init_user
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:89     .text.matrix_init_user:00000000 matrix_init_user.localalias.0
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:107    .text.matrix_init_kb:00000000 matrix_init_kb
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:124    .text.matrix_scan_user:00000000 matrix_scan_user
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:139    .text.matrix_scan_kb:00000000 matrix_scan_kb
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:156    .text.matrix_rows:00000000 matrix_rows
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:175    .text.matrix_cols:00000000 matrix_cols
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:194    .text.matrix_init:00000000 matrix_init
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1223   .rodata.col_pins:00000000 col_pins
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1218   .bss.matrix:00000000 matrix
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1213   .bss.matrix_debouncing:00000000 matrix_debouncing
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1244   .bss.is_master:00000000 is_master
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:312    .text._matrix_scan:00000000 _matrix_scan
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1254   .data.debouncing:00000000 debouncing
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:659    .text.serial_transaction:00000000 serial_transaction
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:744    .text.matrix_slave_scan:00000000 matrix_slave_scan
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:825    .text.matrix_scan:00000000 matrix_scan
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1249   .bss.error_count:00000000 error_count
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1024   .text.matrix_is_modified:00000000 matrix_is_modified
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1048   .text.matrix_is_on:00000000 matrix_is_on
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1094   .text.matrix_get_row:00000000 matrix_get_row
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1121   .text.matrix_print:00000000 matrix_print
C:\Users\kyleo\AppData\Local\Temp\ccxezGNr.s:1142   .text.matrix_key_count:00000000 matrix_key_count

UNDEFINED SYMBOLS
split_keyboard_setup
has_usb
matrix_init_quantum
isLeftHand
serial_update_buffers
serial_slave_buffer
slave_buffer_change_count
serial_master_buffer
memcmp
matrix_scan_quantum
bitpop16
__do_copy_data
__do_clear_bss
