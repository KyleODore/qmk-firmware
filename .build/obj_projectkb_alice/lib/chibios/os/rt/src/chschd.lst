   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 2
  11              		.file	"chschd.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._scheduler_init,"ax",%progbits
  16              		.align	1
  17              		.global	_scheduler_init
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	_scheduler_init:
  25              	.LFB154:
  26              		.file 1 "lib/chibios/os/rt/src/chschd.c"
   1:lib/chibios/os/rt/src/chschd.c **** /*
   2:lib/chibios/os/rt/src/chschd.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chschd.c **** 
   4:lib/chibios/os/rt/src/chschd.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chschd.c **** 
   6:lib/chibios/os/rt/src/chschd.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chschd.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chschd.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chschd.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chschd.c **** 
  11:lib/chibios/os/rt/src/chschd.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chschd.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chschd.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chschd.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chschd.c **** 
  16:lib/chibios/os/rt/src/chschd.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chschd.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chschd.c **** */
  19:lib/chibios/os/rt/src/chschd.c **** 
  20:lib/chibios/os/rt/src/chschd.c **** /**
  21:lib/chibios/os/rt/src/chschd.c ****  * @file    chschd.c
  22:lib/chibios/os/rt/src/chschd.c ****  * @brief   Scheduler code.
  23:lib/chibios/os/rt/src/chschd.c ****  *
  24:lib/chibios/os/rt/src/chschd.c ****  * @addtogroup scheduler
  25:lib/chibios/os/rt/src/chschd.c ****  * @details This module provides the default portable scheduler code.
  26:lib/chibios/os/rt/src/chschd.c ****  * @{
  27:lib/chibios/os/rt/src/chschd.c ****  */
  28:lib/chibios/os/rt/src/chschd.c **** 
  29:lib/chibios/os/rt/src/chschd.c **** #include "ch.h"
  30:lib/chibios/os/rt/src/chschd.c **** 
  31:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  32:lib/chibios/os/rt/src/chschd.c **** /* Module local definitions.                                                 */
  33:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  34:lib/chibios/os/rt/src/chschd.c **** 
  35:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  36:lib/chibios/os/rt/src/chschd.c **** /* Module exported variables.                                                */
  37:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  38:lib/chibios/os/rt/src/chschd.c **** 
  39:lib/chibios/os/rt/src/chschd.c **** /**
  40:lib/chibios/os/rt/src/chschd.c ****  * @brief   System data structures.
  41:lib/chibios/os/rt/src/chschd.c ****  */
  42:lib/chibios/os/rt/src/chschd.c **** ch_system_t ch;
  43:lib/chibios/os/rt/src/chschd.c **** 
  44:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  45:lib/chibios/os/rt/src/chschd.c **** /* Module local types.                                                       */
  46:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  47:lib/chibios/os/rt/src/chschd.c **** 
  48:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  49:lib/chibios/os/rt/src/chschd.c **** /* Module local variables.                                                   */
  50:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  51:lib/chibios/os/rt/src/chschd.c **** 
  52:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  53:lib/chibios/os/rt/src/chschd.c **** /* Module local functions.                                                   */
  54:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  55:lib/chibios/os/rt/src/chschd.c **** 
  56:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  57:lib/chibios/os/rt/src/chschd.c **** /* Module exported functions.                                                */
  58:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  59:lib/chibios/os/rt/src/chschd.c **** 
  60:lib/chibios/os/rt/src/chschd.c **** /**
  61:lib/chibios/os/rt/src/chschd.c ****  * @brief   Scheduler initialization.
  62:lib/chibios/os/rt/src/chschd.c ****  *
  63:lib/chibios/os/rt/src/chschd.c ****  * @notapi
  64:lib/chibios/os/rt/src/chschd.c ****  */
  65:lib/chibios/os/rt/src/chschd.c **** void _scheduler_init(void) {
  27              		.loc 1 65 28 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  66:lib/chibios/os/rt/src/chschd.c **** 
  67:lib/chibios/os/rt/src/chschd.c ****   queue_init(&ch.rlist.queue);
  32              		.loc 1 67 3 view .LVU1
  33              	.LVL0:
  34              	.LBB57:
  35              	.LBI57:
  36              		.file 2 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 118:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** /**
 122:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:./lib/chibios/os/rt/include/chschd.h ****  */
 124:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 125:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:./lib/chibios/os/rt/include/chschd.h **** };
 127:./lib/chibios/os/rt/include/chschd.h **** 
 128:./lib/chibios/os/rt/include/chschd.h **** /**
 129:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:./lib/chibios/os/rt/include/chschd.h ****  */
 131:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 132:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:./lib/chibios/os/rt/include/chschd.h **** };
 135:./lib/chibios/os/rt/include/chschd.h **** 
 136:./lib/chibios/os/rt/include/chschd.h **** /**
 137:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:./lib/chibios/os/rt/include/chschd.h ****  */
 142:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 143:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:./lib/chibios/os/rt/include/chschd.h **** #endif
 150:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:./lib/chibios/os/rt/include/chschd.h ****   /**
 153:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:./lib/chibios/os/rt/include/chschd.h ****    */
 155:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 156:./lib/chibios/os/rt/include/chschd.h **** #endif
 157:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   /**
 160:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 163:./lib/chibios/os/rt/include/chschd.h ****    */
 164:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:./lib/chibios/os/rt/include/chschd.h **** #endif
 166:./lib/chibios/os/rt/include/chschd.h ****   /**
 167:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:./lib/chibios/os/rt/include/chschd.h ****    */
 169:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 170:./lib/chibios/os/rt/include/chschd.h ****   /**
 171:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:./lib/chibios/os/rt/include/chschd.h ****    */
 173:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 174:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:./lib/chibios/os/rt/include/chschd.h ****   /**
 176:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:./lib/chibios/os/rt/include/chschd.h ****    */
 178:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 179:./lib/chibios/os/rt/include/chschd.h **** #endif
 180:./lib/chibios/os/rt/include/chschd.h ****   /**
 181:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:./lib/chibios/os/rt/include/chschd.h ****    */
 183:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             ticks;
 185:./lib/chibios/os/rt/include/chschd.h **** #endif
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:./lib/chibios/os/rt/include/chschd.h ****    */
 191:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 192:./lib/chibios/os/rt/include/chschd.h **** #endif
 193:./lib/chibios/os/rt/include/chschd.h ****   /**
 194:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:./lib/chibios/os/rt/include/chschd.h ****    */
 198:./lib/chibios/os/rt/include/chschd.h ****   union {
 199:./lib/chibios/os/rt/include/chschd.h ****     /**
 200:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:./lib/chibios/os/rt/include/chschd.h ****      */
 205:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:./lib/chibios/os/rt/include/chschd.h ****     /**
 207:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 211:./lib/chibios/os/rt/include/chschd.h ****      */
 212:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 213:./lib/chibios/os/rt/include/chschd.h ****     /**
 214:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 218:./lib/chibios/os/rt/include/chschd.h ****      */
 219:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 220:./lib/chibios/os/rt/include/chschd.h ****     /**
 221:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 225:./lib/chibios/os/rt/include/chschd.h ****      */
 226:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:./lib/chibios/os/rt/include/chschd.h ****     /**
 229:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:./lib/chibios/os/rt/include/chschd.h **** #endif
 233:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:./lib/chibios/os/rt/include/chschd.h ****     /**
 235:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 239:./lib/chibios/os/rt/include/chschd.h ****      */
 240:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:./lib/chibios/os/rt/include/chschd.h **** #endif
 242:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:./lib/chibios/os/rt/include/chschd.h ****     /**
 244:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 248:./lib/chibios/os/rt/include/chschd.h ****      */
 249:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:./lib/chibios/os/rt/include/chschd.h **** #endif
 251:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:./lib/chibios/os/rt/include/chschd.h ****     /**
 253:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:./lib/chibios/os/rt/include/chschd.h ****      */
 257:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:./lib/chibios/os/rt/include/chschd.h **** #endif
 259:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 260:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:./lib/chibios/os/rt/include/chschd.h ****   /**
 262:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:./lib/chibios/os/rt/include/chschd.h ****    */
 264:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:./lib/chibios/os/rt/include/chschd.h **** #endif
 266:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:./lib/chibios/os/rt/include/chschd.h ****   /**
 268:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:./lib/chibios/os/rt/include/chschd.h ****    */
 270:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:./lib/chibios/os/rt/include/chschd.h **** #endif
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:./lib/chibios/os/rt/include/chschd.h ****    */
 283:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:./lib/chibios/os/rt/include/chschd.h ****   /**
 285:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:./lib/chibios/os/rt/include/chschd.h ****    */
 287:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 288:./lib/chibios/os/rt/include/chschd.h **** #endif
 289:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:./lib/chibios/os/rt/include/chschd.h ****    */
 294:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 295:./lib/chibios/os/rt/include/chschd.h **** #endif
 296:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:./lib/chibios/os/rt/include/chschd.h ****   /**
 298:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:./lib/chibios/os/rt/include/chschd.h ****    */
 300:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:./lib/chibios/os/rt/include/chschd.h **** #endif
 302:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:./lib/chibios/os/rt/include/chschd.h **** #endif
 306:./lib/chibios/os/rt/include/chschd.h **** };
 307:./lib/chibios/os/rt/include/chschd.h **** 
 308:./lib/chibios/os/rt/include/chschd.h **** /**
 309:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:./lib/chibios/os/rt/include/chschd.h ****  *
 311:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:./lib/chibios/os/rt/include/chschd.h ****  */
 313:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 319:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 321:./lib/chibios/os/rt/include/chschd.h **** };
 322:./lib/chibios/os/rt/include/chschd.h **** 
 323:./lib/chibios/os/rt/include/chschd.h **** /**
 324:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:./lib/chibios/os/rt/include/chschd.h ****  */
 329:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 332:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 334:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:./lib/chibios/os/rt/include/chschd.h **** #endif
 338:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:./lib/chibios/os/rt/include/chschd.h ****   /**
 340:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:./lib/chibios/os/rt/include/chschd.h ****    */
 342:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 344:./lib/chibios/os/rt/include/chschd.h **** #endif
 345:./lib/chibios/os/rt/include/chschd.h **** };
 346:./lib/chibios/os/rt/include/chschd.h **** 
 347:./lib/chibios/os/rt/include/chschd.h **** /**
 348:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:./lib/chibios/os/rt/include/chschd.h ****  */
 350:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 351:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 356:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:./lib/chibios/os/rt/include/chschd.h **** #endif
 360:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 363:./lib/chibios/os/rt/include/chschd.h **** };
 364:./lib/chibios/os/rt/include/chschd.h **** 
 365:./lib/chibios/os/rt/include/chschd.h **** /**
 366:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:./lib/chibios/os/rt/include/chschd.h ****  */
 368:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 369:./lib/chibios/os/rt/include/chschd.h ****   /**
 370:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:./lib/chibios/os/rt/include/chschd.h ****    */
 376:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:./lib/chibios/os/rt/include/chschd.h ****   /**
 379:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:./lib/chibios/os/rt/include/chschd.h ****    */
 381:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:./lib/chibios/os/rt/include/chschd.h ****   /**
 383:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:./lib/chibios/os/rt/include/chschd.h ****    */
 385:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:./lib/chibios/os/rt/include/chschd.h **** #endif
 387:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:./lib/chibios/os/rt/include/chschd.h ****   /**
 389:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:./lib/chibios/os/rt/include/chschd.h ****    */
 391:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:./lib/chibios/os/rt/include/chschd.h **** #endif
 393:./lib/chibios/os/rt/include/chschd.h **** };
 394:./lib/chibios/os/rt/include/chschd.h **** 
 395:./lib/chibios/os/rt/include/chschd.h **** /**
 396:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 397:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 399:./lib/chibios/os/rt/include/chschd.h ****  */
 400:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 401:./lib/chibios/os/rt/include/chschd.h ****   /**
 402:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:./lib/chibios/os/rt/include/chschd.h ****    */
 404:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:./lib/chibios/os/rt/include/chschd.h ****   /**
 406:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:./lib/chibios/os/rt/include/chschd.h ****    */
 408:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:./lib/chibios/os/rt/include/chschd.h ****   /**
 410:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 411:./lib/chibios/os/rt/include/chschd.h ****    */
 412:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 417:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:./lib/chibios/os/rt/include/chschd.h ****   /**
 419:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:./lib/chibios/os/rt/include/chschd.h ****    */
 421:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:./lib/chibios/os/rt/include/chschd.h **** #endif
 423:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:./lib/chibios/os/rt/include/chschd.h ****   /**
 425:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:./lib/chibios/os/rt/include/chschd.h ****    */
 427:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:./lib/chibios/os/rt/include/chschd.h **** #endif
 429:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:./lib/chibios/os/rt/include/chschd.h **** };
 431:./lib/chibios/os/rt/include/chschd.h **** 
 432:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 433:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 435:./lib/chibios/os/rt/include/chschd.h **** 
 436:./lib/chibios/os/rt/include/chschd.h **** /**
 437:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:./lib/chibios/os/rt/include/chschd.h ****  *
 439:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 440:./lib/chibios/os/rt/include/chschd.h ****  */
 441:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /**
 444:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:./lib/chibios/os/rt/include/chschd.h ****  */
 448:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:./lib/chibios/os/rt/include/chschd.h **** 
 450:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 451:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 456:./lib/chibios/os/rt/include/chschd.h **** #endif
 457:./lib/chibios/os/rt/include/chschd.h **** 
 458:./lib/chibios/os/rt/include/chschd.h **** /*
 459:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 460:./lib/chibios/os/rt/include/chschd.h ****  */
 461:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 462:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 463:./lib/chibios/os/rt/include/chschd.h **** #endif
 464:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 485:./lib/chibios/os/rt/include/chschd.h **** }
 486:./lib/chibios/os/rt/include/chschd.h **** #endif
 487:./lib/chibios/os/rt/include/chschd.h **** 
 488:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 489:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 491:./lib/chibios/os/rt/include/chschd.h **** 
 492:./lib/chibios/os/rt/include/chschd.h **** /**
 493:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:./lib/chibios/os/rt/include/chschd.h ****  *
 495:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:./lib/chibios/os/rt/include/chschd.h ****  *
 497:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 498:./lib/chibios/os/rt/include/chschd.h ****  */
 499:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:./lib/chibios/os/rt/include/chschd.h **** 
 501:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:./lib/chibios/os/rt/include/chschd.h **** }
 503:./lib/chibios/os/rt/include/chschd.h **** 
 504:./lib/chibios/os/rt/include/chschd.h **** /**
 505:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:./lib/chibios/os/rt/include/chschd.h ****  *
 507:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 509:./lib/chibios/os/rt/include/chschd.h ****  *
 510:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 511:./lib/chibios/os/rt/include/chschd.h ****  */
 512:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:./lib/chibios/os/rt/include/chschd.h **** 
 514:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:./lib/chibios/os/rt/include/chschd.h **** }
 516:./lib/chibios/os/rt/include/chschd.h **** 
 517:./lib/chibios/os/rt/include/chschd.h **** /**
 518:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:./lib/chibios/os/rt/include/chschd.h ****  *
 520:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 522:./lib/chibios/os/rt/include/chschd.h ****  *
 523:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 524:./lib/chibios/os/rt/include/chschd.h ****  */
 525:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:./lib/chibios/os/rt/include/chschd.h **** 
 527:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:./lib/chibios/os/rt/include/chschd.h **** }
 529:./lib/chibios/os/rt/include/chschd.h **** 
 530:./lib/chibios/os/rt/include/chschd.h **** /**
 531:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:./lib/chibios/os/rt/include/chschd.h ****  *
 533:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:./lib/chibios/os/rt/include/chschd.h ****  *
 535:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 536:./lib/chibios/os/rt/include/chschd.h ****  */
 537:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
  37              		.loc 2 537 20 view .LVU2
  38              	.LBB58:
 538:./lib/chibios/os/rt/include/chschd.h **** 
 539:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  39              		.loc 2 539 3 view .LVU3
  40              	.LBE58:
  41              	.LBE57:
  68:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.prio = NOPRIO;
  42              		.loc 1 68 17 is_stmt 0 view .LVU4
  43 0000 0022     		movs	r2, #0
  44              	.LBB61:
  45              	.LBB59:
  46              		.loc 2 539 13 view .LVU5
  47 0002 034B     		ldr	r3, .L2
  48              	.LBE59:
  49              	.LBE61:
  69:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_USE_REGISTRY == TRUE
  70:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.newer = (thread_t *)&ch.rlist;
  71:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.older = (thread_t *)&ch.rlist;
  72:lib/chibios/os/rt/src/chschd.c **** #endif
  73:lib/chibios/os/rt/src/chschd.c **** }
  50              		.loc 1 73 1 view .LVU6
  51              		@ sp needed
  52              	.LBB62:
  53              	.LBB60:
  54              		.loc 2 539 13 view .LVU7
  55 0004 1B60     		str	r3, [r3]
 540:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  56              		.loc 2 540 3 is_stmt 1 view .LVU8
  57              		.loc 2 540 13 is_stmt 0 view .LVU9
  58 0006 5B60     		str	r3, [r3, #4]
  59              	.LVL1:
  60              		.loc 2 540 13 view .LVU10
  61              	.LBE60:
  62              	.LBE62:
  68:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.prio = NOPRIO;
  63              		.loc 1 68 3 is_stmt 1 view .LVU11
  68:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.prio = NOPRIO;
  64              		.loc 1 68 17 is_stmt 0 view .LVU12
  65 0008 9A60     		str	r2, [r3, #8]
  70:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.older = (thread_t *)&ch.rlist;
  66              		.loc 1 70 3 is_stmt 1 view .LVU13
  70:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.older = (thread_t *)&ch.rlist;
  67              		.loc 1 70 18 is_stmt 0 view .LVU14
  68 000a 1B61     		str	r3, [r3, #16]
  71:lib/chibios/os/rt/src/chschd.c **** #endif
  69              		.loc 1 71 3 is_stmt 1 view .LVU15
  71:lib/chibios/os/rt/src/chschd.c **** #endif
  70              		.loc 1 71 18 is_stmt 0 view .LVU16
  71 000c 5B61     		str	r3, [r3, #20]
  72              		.loc 1 73 1 view .LVU17
  73 000e 7047     		bx	lr
  74              	.L3:
  75              		.align	2
  76              	.L2:
  77 0010 00000000 		.word	.LANCHOR0
  78              		.cfi_endproc
  79              	.LFE154:
  81              		.section	.text.queue_prio_insert,"ax",%progbits
  82              		.align	1
  83              		.global	queue_prio_insert
  84              		.syntax unified
  85              		.code	16
  86              		.thumb_func
  87              		.fpu softvfp
  89              	queue_prio_insert:
  90              	.LVL2:
  91              	.LFB155:
  74:lib/chibios/os/rt/src/chschd.c **** 
  75:lib/chibios/os/rt/src/chschd.c **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) || defined(__DOXYGEN__)
  76:lib/chibios/os/rt/src/chschd.c **** /**
  77:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread into a priority ordered queue.
  78:lib/chibios/os/rt/src/chschd.c ****  * @note    The insertion is done by scanning the list from the highest
  79:lib/chibios/os/rt/src/chschd.c ****  *          priority toward the lowest.
  80:lib/chibios/os/rt/src/chschd.c ****  *
  81:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be inserted in the list
  82:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
  83:lib/chibios/os/rt/src/chschd.c ****  *
  84:lib/chibios/os/rt/src/chschd.c ****  * @notapi
  85:lib/chibios/os/rt/src/chschd.c ****  */
  86:lib/chibios/os/rt/src/chschd.c **** void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
  92              		.loc 1 86 60 is_stmt 1 view -0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  87:lib/chibios/os/rt/src/chschd.c **** 
  88:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp = (thread_t *)tqp;
  97              		.loc 1 88 3 view .LVU19
  98              		.loc 1 88 13 is_stmt 0 view .LVU20
  99 0000 0B00     		movs	r3, r1
 100              	.LVL3:
 101              	.L6:
  89:lib/chibios/os/rt/src/chschd.c ****   do {
 102              		.loc 1 89 3 is_stmt 1 discriminator 2 view .LVU21
  90:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
 103              		.loc 1 90 5 discriminator 2 view .LVU22
 104              		.loc 1 90 8 is_stmt 0 discriminator 2 view .LVU23
 105 0002 1B68     		ldr	r3, [r3]
 106              	.LVL4:
  91:lib/chibios/os/rt/src/chschd.c ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 107              		.loc 1 91 3 discriminator 2 view .LVU24
 108 0004 9942     		cmp	r1, r3
 109 0006 04D0     		beq	.L5
 110              		.loc 1 91 36 discriminator 1 view .LVU25
 111 0008 9A68     		ldr	r2, [r3, #8]
 112 000a 9446     		mov	ip, r2
 113 000c 8268     		ldr	r2, [r0, #8]
 114 000e 9445     		cmp	ip, r2
 115 0010 F7D2     		bcs	.L6
 116              	.L5:
  92:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = cp;
 117              		.loc 1 92 3 is_stmt 1 view .LVU26
  93:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 118              		.loc 1 93 41 is_stmt 0 view .LVU27
 119 0012 5A68     		ldr	r2, [r3, #4]
  92:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = cp;
 120              		.loc 1 92 30 view .LVU28
 121 0014 0360     		str	r3, [r0]
 122              		.loc 1 93 3 is_stmt 1 view .LVU29
 123              		.loc 1 93 30 is_stmt 0 view .LVU30
 124 0016 4260     		str	r2, [r0, #4]
  94:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 125              		.loc 1 94 3 is_stmt 1 view .LVU31
  95:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
  96:lib/chibios/os/rt/src/chschd.c **** }
 126              		.loc 1 96 1 is_stmt 0 view .LVU32
 127              		@ sp needed
  94:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 128              		.loc 1 94 30 view .LVU33
 129 0018 1060     		str	r0, [r2]
  95:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 130              		.loc 1 95 3 is_stmt 1 view .LVU34
  95:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 131              		.loc 1 95 30 is_stmt 0 view .LVU35
 132 001a 5860     		str	r0, [r3, #4]
 133              		.loc 1 96 1 view .LVU36
 134 001c 7047     		bx	lr
 135              		.cfi_endproc
 136              	.LFE155:
 138              		.section	.text.queue_insert,"ax",%progbits
 139              		.align	1
 140              		.global	queue_insert
 141              		.syntax unified
 142              		.code	16
 143              		.thumb_func
 144              		.fpu softvfp
 146              	queue_insert:
 147              	.LVL5:
 148              	.LFB156:
  97:lib/chibios/os/rt/src/chschd.c **** 
  98:lib/chibios/os/rt/src/chschd.c **** /**
  99:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread into a queue.
 100:lib/chibios/os/rt/src/chschd.c ****  *
 101:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be inserted in the list
 102:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
 103:lib/chibios/os/rt/src/chschd.c ****  *
 104:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 105:lib/chibios/os/rt/src/chschd.c ****  */
 106:lib/chibios/os/rt/src/chschd.c **** void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 149              		.loc 1 106 55 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 107:lib/chibios/os/rt/src/chschd.c **** 
 108:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = (thread_t *)tqp;
 154              		.loc 1 108 3 view .LVU38
 109:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = tqp->prev;
 155              		.loc 1 109 35 is_stmt 0 view .LVU39
 156 0000 4B68     		ldr	r3, [r1, #4]
 108:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = tqp->prev;
 157              		.loc 1 108 30 view .LVU40
 158 0002 0160     		str	r1, [r0]
 159              		.loc 1 109 3 is_stmt 1 view .LVU41
 160              		.loc 1 109 30 is_stmt 0 view .LVU42
 161 0004 4360     		str	r3, [r0, #4]
 110:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 162              		.loc 1 110 3 is_stmt 1 view .LVU43
 111:lib/chibios/os/rt/src/chschd.c ****   tqp->prev                  = tp;
 112:lib/chibios/os/rt/src/chschd.c **** }
 163              		.loc 1 112 1 is_stmt 0 view .LVU44
 164              		@ sp needed
 110:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 165              		.loc 1 110 30 view .LVU45
 166 0006 1860     		str	r0, [r3]
 111:lib/chibios/os/rt/src/chschd.c ****   tqp->prev                  = tp;
 167              		.loc 1 111 3 is_stmt 1 view .LVU46
 111:lib/chibios/os/rt/src/chschd.c ****   tqp->prev                  = tp;
 168              		.loc 1 111 30 is_stmt 0 view .LVU47
 169 0008 4860     		str	r0, [r1, #4]
 170              		.loc 1 112 1 view .LVU48
 171 000a 7047     		bx	lr
 172              		.cfi_endproc
 173              	.LFE156:
 175              		.section	.text.queue_fifo_remove,"ax",%progbits
 176              		.align	1
 177              		.global	queue_fifo_remove
 178              		.syntax unified
 179              		.code	16
 180              		.thumb_func
 181              		.fpu softvfp
 183              	queue_fifo_remove:
 184              	.LVL6:
 185              	.LFB157:
 113:lib/chibios/os/rt/src/chschd.c **** 
 114:lib/chibios/os/rt/src/chschd.c **** /**
 115:lib/chibios/os/rt/src/chschd.c ****  * @brief   Removes the first-out thread from a queue and returns it.
 116:lib/chibios/os/rt/src/chschd.c ****  * @note    If the queue is priority ordered then this function returns the
 117:lib/chibios/os/rt/src/chschd.c ****  *          thread with the highest priority.
 118:lib/chibios/os/rt/src/chschd.c ****  *
 119:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
 120:lib/chibios/os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 121:lib/chibios/os/rt/src/chschd.c ****  *
 122:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 123:lib/chibios/os/rt/src/chschd.c ****  */
 124:lib/chibios/os/rt/src/chschd.c **** thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 186              		.loc 1 124 51 is_stmt 1 view -0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 125:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->next;
 191              		.loc 1 125 3 view .LVU50
 124:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->next;
 192              		.loc 1 124 51 is_stmt 0 view .LVU51
 193 0000 0300     		movs	r3, r0
 194              		.loc 1 125 13 view .LVU52
 195 0002 0068     		ldr	r0, [r0]
 196              	.LVL7:
 126:lib/chibios/os/rt/src/chschd.c **** 
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next             = tp->queue.next;
 197              		.loc 1 127 3 is_stmt 1 view .LVU53
 128:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 129:lib/chibios/os/rt/src/chschd.c **** 
 130:lib/chibios/os/rt/src/chschd.c ****   return tp;
 131:lib/chibios/os/rt/src/chschd.c **** }
 198              		.loc 1 131 1 is_stmt 0 view .LVU54
 199              		@ sp needed
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 200              		.loc 1 127 36 view .LVU55
 201 0004 0268     		ldr	r2, [r0]
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 202              		.loc 1 127 25 view .LVU56
 203 0006 1A60     		str	r2, [r3]
 128:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 204              		.loc 1 128 3 is_stmt 1 view .LVU57
 128:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 205              		.loc 1 128 25 is_stmt 0 view .LVU58
 206 0008 5360     		str	r3, [r2, #4]
 130:lib/chibios/os/rt/src/chschd.c **** }
 207              		.loc 1 130 3 is_stmt 1 view .LVU59
 208              		.loc 1 131 1 is_stmt 0 view .LVU60
 209 000a 7047     		bx	lr
 210              		.cfi_endproc
 211              	.LFE157:
 213              		.section	.text.queue_lifo_remove,"ax",%progbits
 214              		.align	1
 215              		.global	queue_lifo_remove
 216              		.syntax unified
 217              		.code	16
 218              		.thumb_func
 219              		.fpu softvfp
 221              	queue_lifo_remove:
 222              	.LVL8:
 223              	.LFB158:
 132:lib/chibios/os/rt/src/chschd.c **** 
 133:lib/chibios/os/rt/src/chschd.c **** /**
 134:lib/chibios/os/rt/src/chschd.c ****  * @brief   Removes the last-out thread from a queue and returns it.
 135:lib/chibios/os/rt/src/chschd.c ****  * @note    If the queue is priority ordered then this function returns the
 136:lib/chibios/os/rt/src/chschd.c ****  *          thread with the lowest priority.
 137:lib/chibios/os/rt/src/chschd.c ****  *
 138:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp   the pointer to the threads list header
 139:lib/chibios/os/rt/src/chschd.c ****  * @return          The removed thread pointer.
 140:lib/chibios/os/rt/src/chschd.c ****  *
 141:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 142:lib/chibios/os/rt/src/chschd.c ****  */
 143:lib/chibios/os/rt/src/chschd.c **** thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 224              		.loc 1 143 51 is_stmt 1 view -0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 144:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->prev;
 229              		.loc 1 144 3 view .LVU62
 143:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->prev;
 230              		.loc 1 143 51 is_stmt 0 view .LVU63
 231 0000 0300     		movs	r3, r0
 232              		.loc 1 144 13 view .LVU64
 233 0002 4068     		ldr	r0, [r0, #4]
 234              	.LVL9:
 145:lib/chibios/os/rt/src/chschd.c **** 
 146:lib/chibios/os/rt/src/chschd.c ****   tqp->prev             = tp->queue.prev;
 235              		.loc 1 146 3 is_stmt 1 view .LVU65
 147:lib/chibios/os/rt/src/chschd.c ****   tqp->prev->queue.next = (thread_t *)tqp;
 148:lib/chibios/os/rt/src/chschd.c **** 
 149:lib/chibios/os/rt/src/chschd.c ****   return tp;
 150:lib/chibios/os/rt/src/chschd.c **** }
 236              		.loc 1 150 1 is_stmt 0 view .LVU66
 237              		@ sp needed
 146:lib/chibios/os/rt/src/chschd.c ****   tqp->prev->queue.next = (thread_t *)tqp;
 238              		.loc 1 146 36 view .LVU67
 239 0004 4268     		ldr	r2, [r0, #4]
 146:lib/chibios/os/rt/src/chschd.c ****   tqp->prev->queue.next = (thread_t *)tqp;
 240              		.loc 1 146 25 view .LVU68
 241 0006 5A60     		str	r2, [r3, #4]
 147:lib/chibios/os/rt/src/chschd.c ****   tqp->prev->queue.next = (thread_t *)tqp;
 242              		.loc 1 147 3 is_stmt 1 view .LVU69
 147:lib/chibios/os/rt/src/chschd.c ****   tqp->prev->queue.next = (thread_t *)tqp;
 243              		.loc 1 147 25 is_stmt 0 view .LVU70
 244 0008 1360     		str	r3, [r2]
 149:lib/chibios/os/rt/src/chschd.c **** }
 245              		.loc 1 149 3 is_stmt 1 view .LVU71
 246              		.loc 1 150 1 is_stmt 0 view .LVU72
 247 000a 7047     		bx	lr
 248              		.cfi_endproc
 249              	.LFE158:
 251              		.section	.text.queue_dequeue,"ax",%progbits
 252              		.align	1
 253              		.global	queue_dequeue
 254              		.syntax unified
 255              		.code	16
 256              		.thumb_func
 257              		.fpu softvfp
 259              	queue_dequeue:
 260              	.LVL10:
 261              	.LFB159:
 151:lib/chibios/os/rt/src/chschd.c **** 
 152:lib/chibios/os/rt/src/chschd.c **** /**
 153:lib/chibios/os/rt/src/chschd.c ****  * @brief   Removes a thread from a queue and returns it.
 154:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is removed from the queue regardless of its relative
 155:lib/chibios/os/rt/src/chschd.c ****  *          position and regardless the used insertion method.
 156:lib/chibios/os/rt/src/chschd.c ****  *
 157:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be removed from the queue
 158:lib/chibios/os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 159:lib/chibios/os/rt/src/chschd.c ****  *
 160:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 161:lib/chibios/os/rt/src/chschd.c ****  */
 162:lib/chibios/os/rt/src/chschd.c **** thread_t *queue_dequeue(thread_t *tp) {
 262              		.loc 1 162 39 is_stmt 1 view -0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266              		@ link register save eliminated.
 163:lib/chibios/os/rt/src/chschd.c **** 
 164:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp->queue.next;
 267              		.loc 1 164 3 view .LVU74
 268              		.loc 1 164 12 is_stmt 0 view .LVU75
 269 0000 4268     		ldr	r2, [r0, #4]
 270              		.loc 1 164 41 view .LVU76
 271 0002 0368     		ldr	r3, [r0]
 165:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next->queue.prev = tp->queue.prev;
 166:lib/chibios/os/rt/src/chschd.c **** 
 167:lib/chibios/os/rt/src/chschd.c ****   return tp;
 168:lib/chibios/os/rt/src/chschd.c **** }
 272              		.loc 1 168 1 view .LVU77
 273              		@ sp needed
 164:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next->queue.prev = tp->queue.prev;
 274              		.loc 1 164 30 view .LVU78
 275 0004 1360     		str	r3, [r2]
 165:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next->queue.prev = tp->queue.prev;
 276              		.loc 1 165 3 is_stmt 1 view .LVU79
 165:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next->queue.prev = tp->queue.prev;
 277              		.loc 1 165 30 is_stmt 0 view .LVU80
 278 0006 5A60     		str	r2, [r3, #4]
 167:lib/chibios/os/rt/src/chschd.c **** }
 279              		.loc 1 167 3 is_stmt 1 view .LVU81
 280              		.loc 1 168 1 is_stmt 0 view .LVU82
 281 0008 7047     		bx	lr
 282              		.cfi_endproc
 283              	.LFE159:
 285              		.section	.text.list_insert,"ax",%progbits
 286              		.align	1
 287              		.global	list_insert
 288              		.syntax unified
 289              		.code	16
 290              		.thumb_func
 291              		.fpu softvfp
 293              	list_insert:
 294              	.LVL11:
 295              	.LFB160:
 169:lib/chibios/os/rt/src/chschd.c **** 
 170:lib/chibios/os/rt/src/chschd.c **** /**
 171:lib/chibios/os/rt/src/chschd.c ****  * @brief   Pushes a thread_t on top of a stack list.
 172:lib/chibios/os/rt/src/chschd.c ****  *
 173:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp    the pointer to the thread to be inserted in the list
 174:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tlp   the pointer to the threads list header
 175:lib/chibios/os/rt/src/chschd.c ****  *
 176:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 177:lib/chibios/os/rt/src/chschd.c ****  */
 178:lib/chibios/os/rt/src/chschd.c **** void list_insert(thread_t *tp, threads_list_t *tlp) {
 296              		.loc 1 178 53 is_stmt 1 view -0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 179:lib/chibios/os/rt/src/chschd.c **** 
 180:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next = tlp->next;
 301              		.loc 1 180 3 view .LVU84
 302              		.loc 1 180 18 is_stmt 0 view .LVU85
 303 0000 0B68     		ldr	r3, [r1]
 181:lib/chibios/os/rt/src/chschd.c ****   tlp->next      = tp;
 182:lib/chibios/os/rt/src/chschd.c **** }
 304              		.loc 1 182 1 view .LVU86
 305              		@ sp needed
 180:lib/chibios/os/rt/src/chschd.c ****   tlp->next      = tp;
 306              		.loc 1 180 18 view .LVU87
 307 0002 0360     		str	r3, [r0]
 181:lib/chibios/os/rt/src/chschd.c ****   tlp->next      = tp;
 308              		.loc 1 181 3 is_stmt 1 view .LVU88
 181:lib/chibios/os/rt/src/chschd.c ****   tlp->next      = tp;
 309              		.loc 1 181 18 is_stmt 0 view .LVU89
 310 0004 0860     		str	r0, [r1]
 311              		.loc 1 182 1 view .LVU90
 312 0006 7047     		bx	lr
 313              		.cfi_endproc
 314              	.LFE160:
 316              		.section	.text.list_remove,"ax",%progbits
 317              		.align	1
 318              		.global	list_remove
 319              		.syntax unified
 320              		.code	16
 321              		.thumb_func
 322              		.fpu softvfp
 324              	list_remove:
 325              	.LVL12:
 326              	.LFB161:
 183:lib/chibios/os/rt/src/chschd.c **** 
 184:lib/chibios/os/rt/src/chschd.c **** /**
 185:lib/chibios/os/rt/src/chschd.c ****  * @brief   Pops a thread from the top of a stack list and returns it.
 186:lib/chibios/os/rt/src/chschd.c ****  * @pre     The list must be non-empty before calling this function.
 187:lib/chibios/os/rt/src/chschd.c ****  *
 188:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tlp       the pointer to the threads list header
 189:lib/chibios/os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 190:lib/chibios/os/rt/src/chschd.c ****  *
 191:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 192:lib/chibios/os/rt/src/chschd.c ****  */
 193:lib/chibios/os/rt/src/chschd.c **** thread_t *list_remove(threads_list_t *tlp) {
 327              		.loc 1 193 44 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 194:lib/chibios/os/rt/src/chschd.c **** 
 195:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tlp->next;
 332              		.loc 1 195 3 view .LVU92
 333              		.loc 1 195 13 is_stmt 0 view .LVU93
 334 0000 0368     		ldr	r3, [r0]
 335              	.LVL13:
 196:lib/chibios/os/rt/src/chschd.c ****   tlp->next = tp->queue.next;
 336              		.loc 1 196 3 is_stmt 1 view .LVU94
 197:lib/chibios/os/rt/src/chschd.c **** 
 198:lib/chibios/os/rt/src/chschd.c ****   return tp;
 199:lib/chibios/os/rt/src/chschd.c **** }
 337              		.loc 1 199 1 is_stmt 0 view .LVU95
 338              		@ sp needed
 196:lib/chibios/os/rt/src/chschd.c ****   tlp->next = tp->queue.next;
 339              		.loc 1 196 13 view .LVU96
 340 0002 1A68     		ldr	r2, [r3]
 341 0004 0260     		str	r2, [r0]
 198:lib/chibios/os/rt/src/chschd.c **** }
 342              		.loc 1 198 3 is_stmt 1 view .LVU97
 343              		.loc 1 199 1 is_stmt 0 view .LVU98
 344 0006 1800     		movs	r0, r3
 345              	.LVL14:
 346              		.loc 1 199 1 view .LVU99
 347 0008 7047     		bx	lr
 348              		.cfi_endproc
 349              	.LFE161:
 351              		.section	.text.chSchReadyI,"ax",%progbits
 352              		.align	1
 353              		.global	chSchReadyI
 354              		.syntax unified
 355              		.code	16
 356              		.thumb_func
 357              		.fpu softvfp
 359              	chSchReadyI:
 360              	.LVL15:
 361              	.LFB162:
 200:lib/chibios/os/rt/src/chschd.c **** #endif /* CH_CFG_OPTIMIZE_SPEED */
 201:lib/chibios/os/rt/src/chschd.c **** 
 202:lib/chibios/os/rt/src/chschd.c **** /**
 203:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it behind its peers.
 204:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is positioned behind all threads with higher or equal
 205:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 206:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 207:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 208:lib/chibios/os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 209:lib/chibios/os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 210:lib/chibios/os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 211:lib/chibios/os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 212:lib/chibios/os/rt/src/chschd.c ****  *
 213:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 214:lib/chibios/os/rt/src/chschd.c ****  * @return              The thread pointer.
 215:lib/chibios/os/rt/src/chschd.c ****  *
 216:lib/chibios/os/rt/src/chschd.c ****  * @iclass
 217:lib/chibios/os/rt/src/chschd.c ****  */
 218:lib/chibios/os/rt/src/chschd.c **** thread_t *chSchReadyI(thread_t *tp) {
 362              		.loc 1 218 37 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366              		@ link register save eliminated.
 219:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp;
 367              		.loc 1 219 3 view .LVU101
 220:lib/chibios/os/rt/src/chschd.c **** 
 221:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassI();
 368              		.loc 1 221 21 view .LVU102
 222:lib/chibios/os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 369              		.loc 1 222 3 view .LVU103
 370              		.loc 1 222 3 view .LVU104
 223:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 371              		.loc 1 223 3 view .LVU105
 372              		.loc 1 223 3 view .LVU106
 224:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 225:lib/chibios/os/rt/src/chschd.c ****               "invalid state");
 226:lib/chibios/os/rt/src/chschd.c **** 
 227:lib/chibios/os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
 373              		.loc 1 227 3 view .LVU107
 374              		.loc 1 227 13 is_stmt 0 view .LVU108
 375 0000 0023     		movs	r3, #0
 228:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 229:lib/chibios/os/rt/src/chschd.c ****   do {
 230:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
 231:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 376              		.loc 1 231 26 view .LVU109
 377 0002 8268     		ldr	r2, [r0, #8]
 227:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 378              		.loc 1 227 13 view .LVU110
 379 0004 0377     		strb	r3, [r0, #28]
 228:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 380              		.loc 1 228 3 is_stmt 1 view .LVU111
 381              	.LVL16:
 228:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 382              		.loc 1 228 6 is_stmt 0 view .LVU112
 383 0006 054B     		ldr	r3, .L17
 384              	.LVL17:
 385              	.L15:
 229:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
 386              		.loc 1 229 3 is_stmt 1 discriminator 1 view .LVU113
 230:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 387              		.loc 1 230 5 discriminator 1 view .LVU114
 230:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 388              		.loc 1 230 8 is_stmt 0 discriminator 1 view .LVU115
 389 0008 1B68     		ldr	r3, [r3]
 390              	.LVL18:
 391              		.loc 1 231 3 discriminator 1 view .LVU116
 392 000a 9968     		ldr	r1, [r3, #8]
 393 000c 9142     		cmp	r1, r2
 394 000e FBD2     		bcs	.L15
 232:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 233:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = cp;
 395              		.loc 1 233 3 is_stmt 1 view .LVU117
 234:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 396              		.loc 1 234 41 is_stmt 0 view .LVU118
 397 0010 5A68     		ldr	r2, [r3, #4]
 233:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 398              		.loc 1 233 30 view .LVU119
 399 0012 0360     		str	r3, [r0]
 400              		.loc 1 234 3 is_stmt 1 view .LVU120
 401              		.loc 1 234 30 is_stmt 0 view .LVU121
 402 0014 4260     		str	r2, [r0, #4]
 235:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 403              		.loc 1 235 3 is_stmt 1 view .LVU122
 236:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 237:lib/chibios/os/rt/src/chschd.c **** 
 238:lib/chibios/os/rt/src/chschd.c ****   return tp;
 239:lib/chibios/os/rt/src/chschd.c **** }
 404              		.loc 1 239 1 is_stmt 0 view .LVU123
 405              		@ sp needed
 235:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 406              		.loc 1 235 30 view .LVU124
 407 0016 1060     		str	r0, [r2]
 236:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 408              		.loc 1 236 3 is_stmt 1 view .LVU125
 236:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 409              		.loc 1 236 30 is_stmt 0 view .LVU126
 410 0018 5860     		str	r0, [r3, #4]
 238:lib/chibios/os/rt/src/chschd.c **** }
 411              		.loc 1 238 3 is_stmt 1 view .LVU127
 412              		.loc 1 239 1 is_stmt 0 view .LVU128
 413 001a 7047     		bx	lr
 414              	.L18:
 415              		.align	2
 416              	.L17:
 417 001c 00000000 		.word	.LANCHOR0
 418              		.cfi_endproc
 419              	.LFE162:
 421              		.section	.text.wakeup,"ax",%progbits
 422              		.align	1
 423              		.syntax unified
 424              		.code	16
 425              		.thumb_func
 426              		.fpu softvfp
 428              	wakeup:
 429              	.LVL19:
 430              	.LFB165:
 240:lib/chibios/os/rt/src/chschd.c **** 
 241:lib/chibios/os/rt/src/chschd.c **** /**
 242:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it ahead its peers.
 243:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is positioned ahead all threads with higher or equal
 244:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 245:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 246:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 247:lib/chibios/os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 248:lib/chibios/os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 249:lib/chibios/os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 250:lib/chibios/os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 251:lib/chibios/os/rt/src/chschd.c ****  *
 252:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 253:lib/chibios/os/rt/src/chschd.c ****  * @return              The thread pointer.
 254:lib/chibios/os/rt/src/chschd.c ****  *
 255:lib/chibios/os/rt/src/chschd.c ****  * @iclass
 256:lib/chibios/os/rt/src/chschd.c ****  */
 257:lib/chibios/os/rt/src/chschd.c **** thread_t *chSchReadyAheadI(thread_t *tp) {
 258:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp;
 259:lib/chibios/os/rt/src/chschd.c **** 
 260:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassI();
 261:lib/chibios/os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 262:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 263:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 264:lib/chibios/os/rt/src/chschd.c ****               "invalid state");
 265:lib/chibios/os/rt/src/chschd.c **** 
 266:lib/chibios/os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
 267:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 268:lib/chibios/os/rt/src/chschd.c ****   do {
 269:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
 270:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 271:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 272:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = cp;
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 274:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 275:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 276:lib/chibios/os/rt/src/chschd.c **** 
 277:lib/chibios/os/rt/src/chschd.c ****   return tp;
 278:lib/chibios/os/rt/src/chschd.c **** }
 279:lib/chibios/os/rt/src/chschd.c **** 
 280:lib/chibios/os/rt/src/chschd.c **** /**
 281:lib/chibios/os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state.
 282:lib/chibios/os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state. The possible
 283:lib/chibios/os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 284:lib/chibios/os/rt/src/chschd.c ****  *
 285:lib/chibios/os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 286:lib/chibios/os/rt/src/chschd.c ****  *
 287:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 288:lib/chibios/os/rt/src/chschd.c ****  */
 289:lib/chibios/os/rt/src/chschd.c **** void chSchGoSleepS(tstate_t newstate) {
 290:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 291:lib/chibios/os/rt/src/chschd.c **** 
 292:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 293:lib/chibios/os/rt/src/chschd.c **** 
 294:lib/chibios/os/rt/src/chschd.c ****   /* New state.*/
 295:lib/chibios/os/rt/src/chschd.c ****   otp->state = newstate;
 296:lib/chibios/os/rt/src/chschd.c **** 
 297:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 298:lib/chibios/os/rt/src/chschd.c ****   /* The thread is renouncing its remaining time slices so it will have a new
 299:lib/chibios/os/rt/src/chschd.c ****      time quantum when it will wakeup.*/
 300:lib/chibios/os/rt/src/chschd.c ****   otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 301:lib/chibios/os/rt/src/chschd.c **** #endif
 302:lib/chibios/os/rt/src/chschd.c **** 
 303:lib/chibios/os/rt/src/chschd.c ****   /* Next thread in ready list becomes current.*/
 304:lib/chibios/os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 305:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 306:lib/chibios/os/rt/src/chschd.c **** 
 307:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-enter hook.*/
 308:lib/chibios/os/rt/src/chschd.c ****   if (currp->prio == IDLEPRIO) {
 309:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_ENTER_HOOK();
 310:lib/chibios/os/rt/src/chschd.c ****   }
 311:lib/chibios/os/rt/src/chschd.c **** 
 312:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 313:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 314:lib/chibios/os/rt/src/chschd.c **** }
 315:lib/chibios/os/rt/src/chschd.c **** 
 316:lib/chibios/os/rt/src/chschd.c **** /*
 317:lib/chibios/os/rt/src/chschd.c ****  * Timeout wakeup callback.
 318:lib/chibios/os/rt/src/chschd.c ****  */
 319:lib/chibios/os/rt/src/chschd.c **** static void wakeup(void *p) {
 431              		.loc 1 319 29 is_stmt 1 view -0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 320:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = (thread_t *)p;
 435              		.loc 1 320 3 view .LVU130
 321:lib/chibios/os/rt/src/chschd.c **** 
 322:lib/chibios/os/rt/src/chschd.c ****   chSysLockFromISR();
 436              		.loc 1 322 3 view .LVU131
 437              	.LBB63:
 438              	.LBI63:
 439              		.file 3 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  */
  66:./lib/chibios/os/rt/include/chsys.h **** /**
  67:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:./lib/chibios/os/rt/include/chsys.h ****  *
  71:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  73:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  75:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:./lib/chibios/os/rt/include/chsys.h ****  */
  77:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:./lib/chibios/os/rt/include/chsys.h **** #else
  81:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:./lib/chibios/os/rt/include/chsys.h **** #endif
  83:./lib/chibios/os/rt/include/chsys.h **** 
  84:./lib/chibios/os/rt/include/chsys.h **** /**
  85:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:./lib/chibios/os/rt/include/chsys.h ****  *
  89:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  91:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  93:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:./lib/chibios/os/rt/include/chsys.h ****  */
  95:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:./lib/chibios/os/rt/include/chsys.h **** #else
  99:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:./lib/chibios/os/rt/include/chsys.h **** #endif
 101:./lib/chibios/os/rt/include/chsys.h **** 
 102:./lib/chibios/os/rt/include/chsys.h **** /**
 103:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:./lib/chibios/os/rt/include/chsys.h ****  *
 107:./lib/chibios/os/rt/include/chsys.h ****  * @special
 108:./lib/chibios/os/rt/include/chsys.h ****  */
 109:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:./lib/chibios/os/rt/include/chsys.h **** 
 116:./lib/chibios/os/rt/include/chsys.h **** /**
 117:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:./lib/chibios/os/rt/include/chsys.h ****  *
 122:./lib/chibios/os/rt/include/chsys.h ****  * @special
 123:./lib/chibios/os/rt/include/chsys.h ****  */
 124:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:./lib/chibios/os/rt/include/chsys.h **** 
 130:./lib/chibios/os/rt/include/chsys.h **** /**
 131:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 134:./lib/chibios/os/rt/include/chsys.h ****  *
 135:./lib/chibios/os/rt/include/chsys.h ****  * @special
 136:./lib/chibios/os/rt/include/chsys.h ****  */
 137:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 139:./lib/chibios/os/rt/include/chsys.h **** 
 140:./lib/chibios/os/rt/include/chsys.h **** /**
 141:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:./lib/chibios/os/rt/include/chsys.h ****  */
 143:./lib/chibios/os/rt/include/chsys.h **** /**
 144:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:./lib/chibios/os/rt/include/chsys.h ****  *
 149:./lib/chibios/os/rt/include/chsys.h ****  * @special
 150:./lib/chibios/os/rt/include/chsys.h ****  */
 151:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 153:./lib/chibios/os/rt/include/chsys.h **** 
 154:./lib/chibios/os/rt/include/chsys.h **** /**
 155:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:./lib/chibios/os/rt/include/chsys.h ****  * @{
 157:./lib/chibios/os/rt/include/chsys.h ****  */
 158:./lib/chibios/os/rt/include/chsys.h **** /**
 159:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:./lib/chibios/os/rt/include/chsys.h ****  *
 163:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:./lib/chibios/os/rt/include/chsys.h ****  *
 167:./lib/chibios/os/rt/include/chsys.h ****  * @api
 168:./lib/chibios/os/rt/include/chsys.h ****  */
 169:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:./lib/chibios/os/rt/include/chsys.h **** 
 171:./lib/chibios/os/rt/include/chsys.h **** /**
 172:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:./lib/chibios/os/rt/include/chsys.h ****  *
 177:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:./lib/chibios/os/rt/include/chsys.h ****  *
 181:./lib/chibios/os/rt/include/chsys.h ****  * @api
 182:./lib/chibios/os/rt/include/chsys.h ****  */
 183:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:./lib/chibios/os/rt/include/chsys.h **** 
 185:./lib/chibios/os/rt/include/chsys.h **** /**
 186:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:./lib/chibios/os/rt/include/chsys.h ****  *
 191:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:./lib/chibios/os/rt/include/chsys.h ****  *
 195:./lib/chibios/os/rt/include/chsys.h ****  * @api
 196:./lib/chibios/os/rt/include/chsys.h ****  */
 197:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:./lib/chibios/os/rt/include/chsys.h **** 
 199:./lib/chibios/os/rt/include/chsys.h **** /**
 200:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:./lib/chibios/os/rt/include/chsys.h ****  *
 205:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:./lib/chibios/os/rt/include/chsys.h ****  *
 209:./lib/chibios/os/rt/include/chsys.h ****  * @api
 210:./lib/chibios/os/rt/include/chsys.h ****  */
 211:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:./lib/chibios/os/rt/include/chsys.h **** 
 213:./lib/chibios/os/rt/include/chsys.h **** /**
 214:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:./lib/chibios/os/rt/include/chsys.h ****  *
 219:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:./lib/chibios/os/rt/include/chsys.h ****  *
 223:./lib/chibios/os/rt/include/chsys.h ****  * @api
 224:./lib/chibios/os/rt/include/chsys.h ****  */
 225:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:./lib/chibios/os/rt/include/chsys.h **** 
 227:./lib/chibios/os/rt/include/chsys.h **** /**
 228:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:./lib/chibios/os/rt/include/chsys.h ****  *
 233:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:./lib/chibios/os/rt/include/chsys.h ****  *
 237:./lib/chibios/os/rt/include/chsys.h ****  * @api
 238:./lib/chibios/os/rt/include/chsys.h ****  */
 239:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 241:./lib/chibios/os/rt/include/chsys.h **** 
 242:./lib/chibios/os/rt/include/chsys.h **** /**
 243:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:./lib/chibios/os/rt/include/chsys.h ****  *
 247:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:./lib/chibios/os/rt/include/chsys.h ****  *
 250:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 251:./lib/chibios/os/rt/include/chsys.h ****  */
 252:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:./lib/chibios/os/rt/include/chsys.h **** #endif
 255:./lib/chibios/os/rt/include/chsys.h **** 
 256:./lib/chibios/os/rt/include/chsys.h **** /**
 257:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:./lib/chibios/os/rt/include/chsys.h ****  *
 261:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:./lib/chibios/os/rt/include/chsys.h ****  *
 264:./lib/chibios/os/rt/include/chsys.h ****  * @special
 265:./lib/chibios/os/rt/include/chsys.h ****  */
 266:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 268:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:./lib/chibios/os/rt/include/chsys.h **** }
 273:./lib/chibios/os/rt/include/chsys.h **** 
 274:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 275:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** 
 278:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:./lib/chibios/os/rt/include/chsys.h **** #endif
 281:./lib/chibios/os/rt/include/chsys.h **** 
 282:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 283:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 284:./lib/chibios/os/rt/include/chsys.h **** #endif
 285:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 286:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:./lib/chibios/os/rt/include/chsys.h **** #endif
 294:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 295:./lib/chibios/os/rt/include/chsys.h **** }
 296:./lib/chibios/os/rt/include/chsys.h **** #endif
 297:./lib/chibios/os/rt/include/chsys.h **** 
 298:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 299:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** 
 302:./lib/chibios/os/rt/include/chsys.h **** /**
 303:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:./lib/chibios/os/rt/include/chsys.h ****  *
 308:./lib/chibios/os/rt/include/chsys.h ****  * @special
 309:./lib/chibios/os/rt/include/chsys.h ****  */
 310:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:./lib/chibios/os/rt/include/chsys.h **** 
 312:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 313:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 314:./lib/chibios/os/rt/include/chsys.h **** }
 315:./lib/chibios/os/rt/include/chsys.h **** 
 316:./lib/chibios/os/rt/include/chsys.h **** /**
 317:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 321:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:./lib/chibios/os/rt/include/chsys.h ****  *
 325:./lib/chibios/os/rt/include/chsys.h ****  * @special
 326:./lib/chibios/os/rt/include/chsys.h ****  */
 327:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:./lib/chibios/os/rt/include/chsys.h **** 
 329:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 330:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:./lib/chibios/os/rt/include/chsys.h **** }
 332:./lib/chibios/os/rt/include/chsys.h **** 
 333:./lib/chibios/os/rt/include/chsys.h **** /**
 334:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:./lib/chibios/os/rt/include/chsys.h ****  *
 340:./lib/chibios/os/rt/include/chsys.h ****  * @special
 341:./lib/chibios/os/rt/include/chsys.h ****  */
 342:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:./lib/chibios/os/rt/include/chsys.h **** 
 344:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 345:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 346:./lib/chibios/os/rt/include/chsys.h **** }
 347:./lib/chibios/os/rt/include/chsys.h **** 
 348:./lib/chibios/os/rt/include/chsys.h **** /**
 349:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:./lib/chibios/os/rt/include/chsys.h ****  *
 351:./lib/chibios/os/rt/include/chsys.h ****  * @special
 352:./lib/chibios/os/rt/include/chsys.h ****  */
 353:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 354:./lib/chibios/os/rt/include/chsys.h **** 
 355:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 356:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 357:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 358:./lib/chibios/os/rt/include/chsys.h **** }
 359:./lib/chibios/os/rt/include/chsys.h **** 
 360:./lib/chibios/os/rt/include/chsys.h **** /**
 361:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:./lib/chibios/os/rt/include/chsys.h ****  *
 363:./lib/chibios/os/rt/include/chsys.h ****  * @special
 364:./lib/chibios/os/rt/include/chsys.h ****  */
 365:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 366:./lib/chibios/os/rt/include/chsys.h **** 
 367:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 368:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 369:./lib/chibios/os/rt/include/chsys.h **** 
 370:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 374:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 375:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 377:./lib/chibios/os/rt/include/chsys.h **** 
 378:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 379:./lib/chibios/os/rt/include/chsys.h **** }
 380:./lib/chibios/os/rt/include/chsys.h **** 
 381:./lib/chibios/os/rt/include/chsys.h **** /**
 382:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state from within an interrupt handler.
 383:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 384:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 385:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 386:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 387:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API before invoking any I-class
 388:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 389:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 390:./lib/chibios/os/rt/include/chsys.h ****  *
 391:./lib/chibios/os/rt/include/chsys.h ****  * @special
 392:./lib/chibios/os/rt/include/chsys.h ****  */
 393:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLockFromISR(void) {
 440              		.loc 3 393 20 view .LVU132
 441              	.LBE63:
 394:./lib/chibios/os/rt/include/chsys.h **** 
 395:./lib/chibios/os/rt/include/chsys.h ****   port_lock_from_isr();
 442              		.loc 3 395 3 view .LVU133
 443              	.LBB75:
 444              	.LBB64:
 445              	.LBI64:
 446              		.file 4 "./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @file    chcore_v6m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   ARMv6-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @addtogroup ARMCMx_V6M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifndef CHCORE_V6M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CHCORE_V6M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_SUPPORTS_RT                FALSE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WORKING_AREA_ALIGN         PORT_STACK_ALIGN
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /** @} */
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   PendSV priority level.
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    This priority is enforced to be equal to @p 0,
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          this handler always has the highest priority that cannot preempt
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          the kernel.
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_PRIORITY_PENDSV          0
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module pre-compile time settings.                                         */
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Stack size for the system idle thread.
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This size depends on the idle thread implementation, usually
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          the idle thread should take no more space than those reserved
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    In this port it is set to 16 because the idle thread does have
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          a stack frame when compiling without optimizations. You may
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          reduce this value to zero when compiling with optimizations.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE)
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This constant is used in the calculation of the correct working
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          area size.
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    In this port this value is conservatively set to 64 because the
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          with compiler optimizations disabled. The value can be reduced
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          when compiler optimizations are enabled.
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(PORT_INT_REQUIRED_STACK)
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INT_REQUIRED_STACK         64
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Alternate preemption method.
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details Activating this option will make the Kernel use the PendSV
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          handler for preemption instead of the NMI handler.
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifndef CORTEX_ALTERNATE_SWITCH
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_ALTERNATE_SWITCH         FALSE
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Derived constants and error checks.                                       */
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(CH_CUSTOMER_LIC_PORT_CM0)
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #error "CH_CUSTOMER_LIC_PORT_CM0 not defined"
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if CH_CUSTOMER_LIC_PORT_CM0 == FALSE
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #error "ChibiOS Cortex-M0 port not licensed"
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Handling a GCC problem impacting ARMv6-M.*/
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if defined(__GNUC__) && !defined(PORT_IGNORE_GCC_VERSION_CHECK)
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if __GNUC__ > 5
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #warning "This compiler has a know problem with Cortex-M0, see bugs: 88167, 88656."
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #warning "*** Use GCC version 5 or below ***"
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @name    Architecture and Compiler
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if ((CORTEX_MODEL == 0) && !defined(__CORE_CM0PLUS_H_DEPENDANT)) ||        \
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     defined(__DOXYGEN__)
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Macro defining the specific ARM architecture.
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_ARM_v6M
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Name of the implemented architecture.
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv6-M"
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Name of the architecture variant.
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_CORE_VARIANT_NAME          "Cortex-M0"
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif (CORTEX_MODEL == 0) && defined(__CORE_CM0PLUS_H_DEPENDANT)
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_ARM_v6M
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv6-M"
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_CORE_VARIANT_NAME          "Cortex-M0+"
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Port-specific information string.
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CORTEX_ALTERNATE_SWITCH == FALSE) || defined(__DOXYGEN__)
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INFO                       "Preemption through NMI"
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INFO                       "Preemption through PendSV"
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /** @} */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Maximum usable priority for normal ISRs.
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CORTEX_ALTERNATE_SWITCH == TRUE) || defined(__DOXYGEN__)
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      1
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module data structures and types.                                         */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(_FROM_ASM_)
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  /* The documentation of the following declarations is in chconf.h in order
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     to not have duplicated structure names into the documentation.*/
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(__DOXYGEN__)
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** struct port_extctx {
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r0;
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r1;
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r2;
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r3;
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r12;
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      lr_thd;
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      pc;
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      xpsr;
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** };
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** struct port_intctx {
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r8;
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r9;
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r10;
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r11;
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r4;
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r5;
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r6;
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r7;
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      lr;
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** };
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif /* !defined(__DOXYGEN__) */
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module macros.                                                            */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This code usually setup the context switching frame represented
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          by an @p port_intctx structure.
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                                         sizeof (struct port_intctx));       \
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->r4 = (regarm_t)(pf);                                        \
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->r5 = (regarm_t)(arg);                                       \
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->lr = (regarm_t)_port_thread_start;                          \
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Computes the thread working area global size.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    There is no need to perform alignments in this macro.
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WA_SIZE(n) (sizeof (struct port_intctx) +                      \
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                          sizeof (struct port_extctx) +                      \
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Static working area allocation.
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro is used to allocate a static thread working area
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          aligned as both position and size.
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] s         the name to be assigned to the stack array
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] n         the stack size to be assigned to the thread
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ prologue code.
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          enabled to invoke system APIs.
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__builtin_return_address(0)
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif defined(__ICCARM__)
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__get_LR()
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif defined(__CC_ARM)
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__return_address()
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ epilogue code.
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          enabled to invoke system APIs.
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue(_saved_lr)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ handler function declaration.
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    @p id can be a function name or a vector number depending on the
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          port implementation.
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Fast IRQ handler function declaration.
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    @p id can be a function name or a vector number depending on the
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          port implementation.
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Performs a context switch between two threads.
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This is the most critical code in any port, this function
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          is responsible for the context switch between 2 threads.
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          switch performance so optimize here as much as you can.
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] ntp       the thread to be switched in
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] otp       the thread to be switched out
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define port_switch(ntp, otp) {                                             \
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     chSysHalt("stack overflow");                                            \
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   }                                                                         \
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   _port_switch(ntp, otp);                                                   \
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* External declarations.                                                    */
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** extern "C" {
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_irq_epilogue(regarm_t lr);
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_thread_start(void);
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_switch_from_isr(void);
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_exit_from_isr(void);
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module inline functions.                                                  */
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Port-related initialization code.
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_init(void) {
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Returns a word encoding the current interrupts status.
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The interrupts status.
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline syssts_t port_get_irq_status(void) {
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (syssts_t)__get_PRIMASK();
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Checks the interrupt status.
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] sts       the interrupt status word
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The interrupt status.
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval false        the word specified a disabled interrupts status.
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval true         the word specified an enabled interrupts status.
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline bool port_irq_enabled(syssts_t sts) {
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Determines the current execution context.
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The execution context.
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval false        not running in ISR mode.
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval true         running in ISR mode.
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline bool port_is_isr_context(void) {
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-lock action.
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function disables interrupts globally.
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_lock(void) {
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __disable_irq();
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-unlock action.
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function enables interrupts globally.
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_unlock(void) {
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __enable_irq();
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-lock action from an interrupt handler.
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function disables interrupts globally.
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    Same as @p port_lock() in this port.
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_lock_from_isr(void) {
 447              		.loc 4 406 20 view .LVU134
 448              	.LBE64:
 449              	.LBE75:
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   port_lock();
 450              		.loc 4 408 3 view .LVU135
 451              	.LBB76:
 452              	.LBB72:
 453              	.LBB65:
 454              	.LBI65:
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 455              		.loc 4 387 20 view .LVU136
 456              	.LBE65:
 457              	.LBE72:
 458              	.LBE76:
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 459              		.loc 4 389 3 view .LVU137
 460              	.LBB77:
 461              	.LBB73:
 462              	.LBB70:
 463              	.LBB66:
 464              	.LBI66:
 465              		.file 5 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 466              		.loc 5 140 27 view .LVU138
 467              	.LBB67:
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 468              		.loc 5 142 3 view .LVU139
 469              	.LBE67:
 470              	.LBE66:
 471              	.LBE70:
 472              	.LBE73:
 473              	.LBE77:
 319:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = (thread_t *)p;
 474              		.loc 1 319 29 is_stmt 0 view .LVU140
 475 0000 10B5     		push	{r4, lr}
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 4, -8
 478              		.cfi_offset 14, -4
 319:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = (thread_t *)p;
 479              		.loc 1 319 29 view .LVU141
 480 0002 0400     		movs	r4, r0
 481              	.LBB78:
 482              	.LBB74:
 483              	.LBB71:
 484              	.LBB69:
 485              	.LBB68:
 486              		.loc 5 142 3 view .LVU142
 487              		.syntax divided
 488              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 489 0004 72B6     		cpsid i
 490              	@ 0 "" 2
 491              		.thumb
 492              		.syntax unified
 493              	.LBE68:
 494              	.LBE69:
 495              	.LBE71:
 496              	.LBE74:
 497              	.LBE78:
 396:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 498              		.loc 3 396 34 is_stmt 1 view .LVU143
 397:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 499              		.loc 3 397 29 view .LVU144
 323:lib/chibios/os/rt/src/chschd.c ****   switch (tp->state) {
 500              		.loc 1 323 3 view .LVU145
 501 0006 007F     		ldrb	r0, [r0, #28]
 502              	.LVL20:
 503              		.loc 1 323 3 is_stmt 0 view .LVU146
 504 0008 0528     		cmp	r0, #5
 505 000a 07D8     		bhi	.L20
 506 000c FFF7FEFF 		bl	__gnu_thumb1_case_uqi
 507              	.L22:
 508 0010 0C       		.byte	(.L27-.L22)/2
 509 0011 06       		.byte	(.L20-.L22)/2
 510 0012 06       		.byte	(.L20-.L22)/2
 511 0013 03       		.byte	(.L24-.L22)/2
 512 0014 12       		.byte	(.L23-.L22)/2
 513 0015 0E       		.byte	(.L21-.L22)/2
 514              		.p2align 1
 515              	.L24:
 324:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_READY:
 325:lib/chibios/os/rt/src/chschd.c ****     /* Handling the special case where the thread has been made ready by
 326:lib/chibios/os/rt/src/chschd.c ****        another thread with higher priority.*/
 327:lib/chibios/os/rt/src/chschd.c ****     chSysUnlockFromISR();
 328:lib/chibios/os/rt/src/chschd.c ****     return;
 329:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_SUSPENDED:
 330:lib/chibios/os/rt/src/chschd.c ****     *tp->u.wttrp = NULL;
 516              		.loc 1 330 5 is_stmt 1 view .LVU147
 517              		.loc 1 330 18 is_stmt 0 view .LVU148
 518 0016 0022     		movs	r2, #0
 519              		.loc 1 330 11 view .LVU149
 520 0018 236A     		ldr	r3, [r4, #32]
 521              		.loc 1 330 18 view .LVU150
 522 001a 1A60     		str	r2, [r3]
 331:lib/chibios/os/rt/src/chschd.c ****     break;
 523              		.loc 1 331 5 is_stmt 1 view .LVU151
 524              	.L20:
 332:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_USE_SEMAPHORES == TRUE
 333:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_WTSEM:
 334:lib/chibios/os/rt/src/chschd.c ****     chSemFastSignalI(tp->u.wtsemp);
 335:lib/chibios/os/rt/src/chschd.c **** #endif
 336:lib/chibios/os/rt/src/chschd.c ****     /* Falls through.*/
 337:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_QUEUED:
 338:lib/chibios/os/rt/src/chschd.c ****     /* Falls through.*/
 339:lib/chibios/os/rt/src/chschd.c **** #if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
 340:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_WTCOND:
 341:lib/chibios/os/rt/src/chschd.c **** #endif
 342:lib/chibios/os/rt/src/chschd.c ****     /* States requiring dequeuing.*/
 343:lib/chibios/os/rt/src/chschd.c ****     (void) queue_dequeue(tp);
 344:lib/chibios/os/rt/src/chschd.c ****     break;
 345:lib/chibios/os/rt/src/chschd.c ****   default:
 346:lib/chibios/os/rt/src/chschd.c ****     /* Any other state, nothing to do.*/
 347:lib/chibios/os/rt/src/chschd.c ****     break;
 348:lib/chibios/os/rt/src/chschd.c ****   }
 349:lib/chibios/os/rt/src/chschd.c ****   tp->u.rdymsg = MSG_TIMEOUT;
 525              		.loc 1 349 3 view .LVU152
 526              		.loc 1 349 16 is_stmt 0 view .LVU153
 527 001c 0123     		movs	r3, #1
 528 001e 5B42     		rsbs	r3, r3, #0
 529 0020 2362     		str	r3, [r4, #32]
 350:lib/chibios/os/rt/src/chschd.c ****   (void) chSchReadyI(tp);
 530              		.loc 1 350 3 is_stmt 1 view .LVU154
 531              		.loc 1 350 10 is_stmt 0 view .LVU155
 532 0022 2000     		movs	r0, r4
 533 0024 FFF7FEFF 		bl	chSchReadyI
 534              	.LVL21:
 535              	.L27:
 351:lib/chibios/os/rt/src/chschd.c ****   chSysUnlockFromISR();
 536              		.loc 1 351 3 is_stmt 1 view .LVU156
 537              	.LBB79:
 538              	.LBI79:
 398:./lib/chibios/os/rt/include/chsys.h **** }
 399:./lib/chibios/os/rt/include/chsys.h **** 
 400:./lib/chibios/os/rt/include/chsys.h **** /**
 401:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state from within an interrupt handler.
 402:./lib/chibios/os/rt/include/chsys.h ****  *
 403:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 404:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 405:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 406:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 407:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API after invoking any I-class
 408:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 409:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 410:./lib/chibios/os/rt/include/chsys.h ****  *
 411:./lib/chibios/os/rt/include/chsys.h ****  * @special
 412:./lib/chibios/os/rt/include/chsys.h ****  */
 413:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlockFromISR(void) {
 539              		.loc 3 413 20 view .LVU157
 540              	.LBE79:
 414:./lib/chibios/os/rt/include/chsys.h **** 
 415:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock_from_isr();
 541              		.loc 3 415 31 view .LVU158
 416:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_isr();
 542              		.loc 3 416 33 view .LVU159
 417:./lib/chibios/os/rt/include/chsys.h ****   port_unlock_from_isr();
 543              		.loc 3 417 3 view .LVU160
 544              	.LBB87:
 545              	.LBB80:
 546              	.LBI80:
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-unlock action from an interrupt handler.
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function enables interrupts globally.
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    Same as @p port_lock() in this port.
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_unlock_from_isr(void) {
 547              		.loc 4 416 20 view .LVU161
 548              	.LBE80:
 549              	.LBE87:
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   port_unlock();
 550              		.loc 4 418 3 view .LVU162
 551              	.LBB88:
 552              	.LBB85:
 553              	.LBB81:
 554              	.LBI81:
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 555              		.loc 4 396 20 view .LVU163
 556              	.LBE81:
 557              	.LBE85:
 558              	.LBE88:
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 559              		.loc 4 398 3 view .LVU164
 560              	.LBB89:
 561              	.LBB86:
 562              	.LBB84:
 563              	.LBB82:
 564              	.LBI82:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 565              		.loc 5 129 27 view .LVU165
 566              	.LBB83:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 567              		.loc 5 131 3 view .LVU166
 568              		.syntax divided
 569              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 570 0028 62B6     		cpsie i
 571              	@ 0 "" 2
 572              		.thumb
 573              		.syntax unified
 574              	.LBE83:
 575              	.LBE82:
 576              	.LBE84:
 577              	.LBE86:
 578              	.LBE89:
 352:lib/chibios/os/rt/src/chschd.c **** }
 579              		.loc 1 352 1 is_stmt 0 view .LVU167
 580              		@ sp needed
 581              	.LVL22:
 582              		.loc 1 352 1 view .LVU168
 583 002a 10BD     		pop	{r4, pc}
 584              	.LVL23:
 585              	.L21:
 334:lib/chibios/os/rt/src/chschd.c **** #endif
 586              		.loc 1 334 5 is_stmt 1 view .LVU169
 334:lib/chibios/os/rt/src/chschd.c **** #endif
 587              		.loc 1 334 27 is_stmt 0 view .LVU170
 588 002c 226A     		ldr	r2, [r4, #32]
 589              	.LBB90:
 590              	.LBI90:
 591              		.file 6 "./lib/chibios/os/rt/include/chsem.h"
   1:./lib/chibios/os/rt/include/chsem.h **** /*
   2:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsem.h **** 
   4:./lib/chibios/os/rt/include/chsem.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsem.h **** 
   6:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsem.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsem.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsem.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsem.h **** 
  11:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsem.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsem.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsem.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsem.h **** 
  16:./lib/chibios/os/rt/include/chsem.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsem.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsem.h **** */
  19:./lib/chibios/os/rt/include/chsem.h **** 
  20:./lib/chibios/os/rt/include/chsem.h **** /**
  21:./lib/chibios/os/rt/include/chsem.h ****  * @file    chsem.h
  22:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Semaphores macros and structures.
  23:./lib/chibios/os/rt/include/chsem.h ****  *
  24:./lib/chibios/os/rt/include/chsem.h ****  * @addtogroup semaphores
  25:./lib/chibios/os/rt/include/chsem.h ****  * @{
  26:./lib/chibios/os/rt/include/chsem.h ****  */
  27:./lib/chibios/os/rt/include/chsem.h **** 
  28:./lib/chibios/os/rt/include/chsem.h **** #ifndef CHSEM_H
  29:./lib/chibios/os/rt/include/chsem.h **** #define CHSEM_H
  30:./lib/chibios/os/rt/include/chsem.h **** 
  31:./lib/chibios/os/rt/include/chsem.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  32:./lib/chibios/os/rt/include/chsem.h **** 
  33:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsem.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsem.h **** 
  37:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chsem.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chsem.h **** 
  41:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chsem.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  44:./lib/chibios/os/rt/include/chsem.h **** 
  45:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  46:./lib/chibios/os/rt/include/chsem.h **** /* Module data structures and types.                                         */
  47:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsem.h **** 
  49:./lib/chibios/os/rt/include/chsem.h **** /**
  50:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Semaphore structure.
  51:./lib/chibios/os/rt/include/chsem.h ****  */
  52:./lib/chibios/os/rt/include/chsem.h **** typedef struct ch_semaphore {
  53:./lib/chibios/os/rt/include/chsem.h ****   threads_queue_t       queue;      /**< @brief Queue of the threads sleeping
  54:./lib/chibios/os/rt/include/chsem.h ****                                                 on this semaphore.          */
  55:./lib/chibios/os/rt/include/chsem.h ****   cnt_t                 cnt;        /**< @brief The semaphore counter.      */
  56:./lib/chibios/os/rt/include/chsem.h **** } semaphore_t;
  57:./lib/chibios/os/rt/include/chsem.h **** 
  58:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  59:./lib/chibios/os/rt/include/chsem.h **** /* Module macros.                                                            */
  60:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  61:./lib/chibios/os/rt/include/chsem.h **** 
  62:./lib/chibios/os/rt/include/chsem.h **** /**
  63:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Data part of a static semaphore initializer.
  64:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro should be used when statically initializing a semaphore
  65:./lib/chibios/os/rt/include/chsem.h ****  *          that is part of a bigger structure.
  66:./lib/chibios/os/rt/include/chsem.h ****  *
  67:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  68:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  69:./lib/chibios/os/rt/include/chsem.h ****  *                      non-negative
  70:./lib/chibios/os/rt/include/chsem.h ****  */
  71:./lib/chibios/os/rt/include/chsem.h **** #define _SEMAPHORE_DATA(name, n) {_THREADS_QUEUE_DATA(name.queue), n}
  72:./lib/chibios/os/rt/include/chsem.h **** 
  73:./lib/chibios/os/rt/include/chsem.h **** /**
  74:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Static semaphore initializer.
  75:./lib/chibios/os/rt/include/chsem.h ****  * @details Statically initialized semaphores require no explicit
  76:./lib/chibios/os/rt/include/chsem.h ****  *          initialization using @p chSemInit().
  77:./lib/chibios/os/rt/include/chsem.h ****  *
  78:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  79:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  80:./lib/chibios/os/rt/include/chsem.h ****  *                      non-negative
  81:./lib/chibios/os/rt/include/chsem.h ****  */
  82:./lib/chibios/os/rt/include/chsem.h **** #define SEMAPHORE_DECL(name, n) semaphore_t name = _SEMAPHORE_DATA(name, n)
  83:./lib/chibios/os/rt/include/chsem.h **** 
  84:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  85:./lib/chibios/os/rt/include/chsem.h **** /* External declarations.                                                    */
  86:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  87:./lib/chibios/os/rt/include/chsem.h **** 
  88:./lib/chibios/os/rt/include/chsem.h **** #ifdef __cplusplus
  89:./lib/chibios/os/rt/include/chsem.h **** extern "C" {
  90:./lib/chibios/os/rt/include/chsem.h **** #endif
  91:./lib/chibios/os/rt/include/chsem.h ****   void chSemObjectInit(semaphore_t *sp, cnt_t n);
  92:./lib/chibios/os/rt/include/chsem.h ****   void chSemReset(semaphore_t *sp, cnt_t n);
  93:./lib/chibios/os/rt/include/chsem.h ****   void chSemResetI(semaphore_t *sp, cnt_t n);
  94:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWait(semaphore_t *sp);
  95:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitS(semaphore_t *sp);
  96:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout);
  97:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout);
  98:./lib/chibios/os/rt/include/chsem.h ****   void chSemSignal(semaphore_t *sp);
  99:./lib/chibios/os/rt/include/chsem.h ****   void chSemSignalI(semaphore_t *sp);
 100:./lib/chibios/os/rt/include/chsem.h ****   void chSemAddCounterI(semaphore_t *sp, cnt_t n);
 101:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw);
 102:./lib/chibios/os/rt/include/chsem.h **** #ifdef __cplusplus
 103:./lib/chibios/os/rt/include/chsem.h **** }
 104:./lib/chibios/os/rt/include/chsem.h **** #endif
 105:./lib/chibios/os/rt/include/chsem.h **** 
 106:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
 107:./lib/chibios/os/rt/include/chsem.h **** /* Module inline functions.                                                  */
 108:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
 109:./lib/chibios/os/rt/include/chsem.h **** 
 110:./lib/chibios/os/rt/include/chsem.h **** /**
 111:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Decreases the semaphore counter.
 112:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be positive.
 113:./lib/chibios/os/rt/include/chsem.h ****  *
 114:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 115:./lib/chibios/os/rt/include/chsem.h ****  *
 116:./lib/chibios/os/rt/include/chsem.h ****  * @iclass
 117:./lib/chibios/os/rt/include/chsem.h ****  */
 118:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemFastWaitI(semaphore_t *sp) {
 119:./lib/chibios/os/rt/include/chsem.h **** 
 120:./lib/chibios/os/rt/include/chsem.h ****   chDbgCheckClassI();
 121:./lib/chibios/os/rt/include/chsem.h **** 
 122:./lib/chibios/os/rt/include/chsem.h ****   sp->cnt--;
 123:./lib/chibios/os/rt/include/chsem.h **** }
 124:./lib/chibios/os/rt/include/chsem.h **** 
 125:./lib/chibios/os/rt/include/chsem.h **** /**
 126:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Increases the semaphore counter.
 127:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be not
 128:./lib/chibios/os/rt/include/chsem.h ****  *          negative.
 129:./lib/chibios/os/rt/include/chsem.h ****  *
 130:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 131:./lib/chibios/os/rt/include/chsem.h ****  *
 132:./lib/chibios/os/rt/include/chsem.h ****  * @iclass
 133:./lib/chibios/os/rt/include/chsem.h ****  */
 134:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemFastSignalI(semaphore_t *sp) {
 592              		.loc 6 134 20 is_stmt 1 view .LVU171
 593              	.LVL24:
 594              	.LBB91:
 135:./lib/chibios/os/rt/include/chsem.h **** 
 136:./lib/chibios/os/rt/include/chsem.h ****   chDbgCheckClassI();
 595              		.loc 6 136 21 view .LVU172
 137:./lib/chibios/os/rt/include/chsem.h **** 
 138:./lib/chibios/os/rt/include/chsem.h ****   sp->cnt++;
 596              		.loc 6 138 3 view .LVU173
 597              		.loc 6 138 10 is_stmt 0 view .LVU174
 598 002e 9368     		ldr	r3, [r2, #8]
 599 0030 0133     		adds	r3, r3, #1
 600 0032 9360     		str	r3, [r2, #8]
 601              	.LVL25:
 602              	.L23:
 603              		.loc 6 138 10 view .LVU175
 604              	.LBE91:
 605              	.LBE90:
 343:lib/chibios/os/rt/src/chschd.c ****     break;
 606              		.loc 1 343 5 is_stmt 1 view .LVU176
 343:lib/chibios/os/rt/src/chschd.c ****     break;
 607              		.loc 1 343 12 is_stmt 0 view .LVU177
 608 0034 2000     		movs	r0, r4
 609 0036 FFF7FEFF 		bl	queue_dequeue
 610              	.LVL26:
 344:lib/chibios/os/rt/src/chschd.c ****   default:
 611              		.loc 1 344 5 is_stmt 1 view .LVU178
 612 003a EFE7     		b	.L20
 613              		.cfi_endproc
 614              	.LFE165:
 616              		.section	.text.chSchReadyAheadI,"ax",%progbits
 617              		.align	1
 618              		.global	chSchReadyAheadI
 619              		.syntax unified
 620              		.code	16
 621              		.thumb_func
 622              		.fpu softvfp
 624              	chSchReadyAheadI:
 625              	.LVL27:
 626              	.LFB163:
 257:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp;
 627              		.loc 1 257 42 view -0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 258:lib/chibios/os/rt/src/chschd.c **** 
 632              		.loc 1 258 3 view .LVU180
 260:lib/chibios/os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 633              		.loc 1 260 21 view .LVU181
 261:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 634              		.loc 1 261 3 view .LVU182
 261:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 635              		.loc 1 261 3 view .LVU183
 262:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 636              		.loc 1 262 3 view .LVU184
 262:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 637              		.loc 1 262 3 view .LVU185
 266:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 638              		.loc 1 266 3 view .LVU186
 266:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 639              		.loc 1 266 13 is_stmt 0 view .LVU187
 640 0000 0023     		movs	r3, #0
 270:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 641              		.loc 1 270 25 view .LVU188
 642 0002 8268     		ldr	r2, [r0, #8]
 266:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 643              		.loc 1 266 13 view .LVU189
 644 0004 0377     		strb	r3, [r0, #28]
 267:lib/chibios/os/rt/src/chschd.c ****   do {
 645              		.loc 1 267 3 is_stmt 1 view .LVU190
 646              	.LVL28:
 267:lib/chibios/os/rt/src/chschd.c ****   do {
 647              		.loc 1 267 6 is_stmt 0 view .LVU191
 648 0006 054B     		ldr	r3, .L31
 649              	.LVL29:
 650              	.L29:
 268:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
 651              		.loc 1 268 3 is_stmt 1 discriminator 1 view .LVU192
 269:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 652              		.loc 1 269 5 discriminator 1 view .LVU193
 269:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 653              		.loc 1 269 8 is_stmt 0 discriminator 1 view .LVU194
 654 0008 1B68     		ldr	r3, [r3]
 655              	.LVL30:
 270:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 656              		.loc 1 270 3 discriminator 1 view .LVU195
 657 000a 9968     		ldr	r1, [r3, #8]
 658 000c 9142     		cmp	r1, r2
 659 000e FBD8     		bhi	.L29
 272:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 660              		.loc 1 272 3 is_stmt 1 view .LVU196
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 661              		.loc 1 273 41 is_stmt 0 view .LVU197
 662 0010 5A68     		ldr	r2, [r3, #4]
 272:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 663              		.loc 1 272 30 view .LVU198
 664 0012 0360     		str	r3, [r0]
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 665              		.loc 1 273 3 is_stmt 1 view .LVU199
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 666              		.loc 1 273 30 is_stmt 0 view .LVU200
 667 0014 4260     		str	r2, [r0, #4]
 274:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 668              		.loc 1 274 3 is_stmt 1 view .LVU201
 278:lib/chibios/os/rt/src/chschd.c **** 
 669              		.loc 1 278 1 is_stmt 0 view .LVU202
 670              		@ sp needed
 274:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 671              		.loc 1 274 30 view .LVU203
 672 0016 1060     		str	r0, [r2]
 275:lib/chibios/os/rt/src/chschd.c **** 
 673              		.loc 1 275 3 is_stmt 1 view .LVU204
 275:lib/chibios/os/rt/src/chschd.c **** 
 674              		.loc 1 275 30 is_stmt 0 view .LVU205
 675 0018 5860     		str	r0, [r3, #4]
 277:lib/chibios/os/rt/src/chschd.c **** }
 676              		.loc 1 277 3 is_stmt 1 view .LVU206
 278:lib/chibios/os/rt/src/chschd.c **** 
 677              		.loc 1 278 1 is_stmt 0 view .LVU207
 678 001a 7047     		bx	lr
 679              	.L32:
 680              		.align	2
 681              	.L31:
 682 001c 00000000 		.word	.LANCHOR0
 683              		.cfi_endproc
 684              	.LFE163:
 686              		.section	.text.chSchGoSleepS,"ax",%progbits
 687              		.align	1
 688              		.global	chSchGoSleepS
 689              		.syntax unified
 690              		.code	16
 691              		.thumb_func
 692              		.fpu softvfp
 694              	chSchGoSleepS:
 695              	.LVL31:
 696              	.LFB164:
 289:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 697              		.loc 1 289 39 is_stmt 1 view -0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 0
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 290:lib/chibios/os/rt/src/chschd.c **** 
 701              		.loc 1 290 3 view .LVU209
 290:lib/chibios/os/rt/src/chschd.c **** 
 702              		.loc 1 290 13 is_stmt 0 view .LVU210
 703 0000 064B     		ldr	r3, .L34
 289:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 704              		.loc 1 289 39 view .LVU211
 705 0002 10B5     		push	{r4, lr}
 706              		.cfi_def_cfa_offset 8
 707              		.cfi_offset 4, -8
 708              		.cfi_offset 14, -4
 290:lib/chibios/os/rt/src/chschd.c **** 
 709              		.loc 1 290 13 view .LVU212
 710 0004 9969     		ldr	r1, [r3, #24]
 711              	.LVL32:
 292:lib/chibios/os/rt/src/chschd.c **** 
 712              		.loc 1 292 21 is_stmt 1 view .LVU213
 295:lib/chibios/os/rt/src/chschd.c **** 
 713              		.loc 1 295 3 view .LVU214
 314:lib/chibios/os/rt/src/chschd.c **** 
 714              		.loc 1 314 1 is_stmt 0 view .LVU215
 715              		@ sp needed
 295:lib/chibios/os/rt/src/chschd.c **** 
 716              		.loc 1 295 14 view .LVU216
 717 0006 0877     		strb	r0, [r1, #28]
 304:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 718              		.loc 1 304 3 is_stmt 1 view .LVU217
 719              	.LVL33:
 720              	.LBB92:
 721              	.LBI92:
 124:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->next;
 722              		.loc 1 124 11 view .LVU218
 723              	.LBB93:
 125:lib/chibios/os/rt/src/chschd.c **** 
 724              		.loc 1 125 3 view .LVU219
 125:lib/chibios/os/rt/src/chschd.c **** 
 725              		.loc 1 125 13 is_stmt 0 view .LVU220
 726 0008 1868     		ldr	r0, [r3]
 727              	.LVL34:
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 728              		.loc 1 127 3 is_stmt 1 view .LVU221
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 729              		.loc 1 127 36 is_stmt 0 view .LVU222
 730 000a 0268     		ldr	r2, [r0]
 128:lib/chibios/os/rt/src/chschd.c **** 
 731              		.loc 1 128 25 view .LVU223
 732 000c 5360     		str	r3, [r2, #4]
 733              	.LVL35:
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 734              		.loc 1 127 25 view .LVU224
 735 000e 1A60     		str	r2, [r3]
 128:lib/chibios/os/rt/src/chschd.c **** 
 736              		.loc 1 128 3 is_stmt 1 view .LVU225
 130:lib/chibios/os/rt/src/chschd.c **** }
 737              		.loc 1 130 3 view .LVU226
 738              	.LVL36:
 130:lib/chibios/os/rt/src/chschd.c **** }
 739              		.loc 1 130 3 is_stmt 0 view .LVU227
 740              	.LBE93:
 741              	.LBE92:
 304:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 742              		.loc 1 304 9 view .LVU228
 743 0010 9861     		str	r0, [r3, #24]
 305:lib/chibios/os/rt/src/chschd.c **** 
 744              		.loc 1 305 3 is_stmt 1 view .LVU229
 305:lib/chibios/os/rt/src/chschd.c **** 
 745              		.loc 1 305 16 is_stmt 0 view .LVU230
 746 0012 0123     		movs	r3, #1
 747 0014 0377     		strb	r3, [r0, #28]
 308:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_ENTER_HOOK();
 748              		.loc 1 308 3 is_stmt 1 view .LVU231
 309:lib/chibios/os/rt/src/chschd.c ****   }
 749              		.loc 1 309 5 view .LVU232
 309:lib/chibios/os/rt/src/chschd.c ****   }
 750              		.loc 1 309 29 view .LVU233
 313:lib/chibios/os/rt/src/chschd.c **** }
 751              		.loc 1 313 3 view .LVU234
 313:lib/chibios/os/rt/src/chschd.c **** }
 752              		.loc 1 313 3 view .LVU235
 313:lib/chibios/os/rt/src/chschd.c **** }
 753              		.loc 1 313 3 view .LVU236
 313:lib/chibios/os/rt/src/chschd.c **** }
 754              		.loc 1 313 3 view .LVU237
 313:lib/chibios/os/rt/src/chschd.c **** }
 755              		.loc 1 313 3 view .LVU238
 756 0016 FFF7FEFF 		bl	_port_switch
 757              	.LVL37:
 313:lib/chibios/os/rt/src/chschd.c **** }
 758              		.loc 1 313 26 view .LVU239
 314:lib/chibios/os/rt/src/chschd.c **** 
 759              		.loc 1 314 1 is_stmt 0 view .LVU240
 760 001a 10BD     		pop	{r4, pc}
 761              	.L35:
 762              		.align	2
 763              	.L34:
 764 001c 00000000 		.word	.LANCHOR0
 765              		.cfi_endproc
 766              	.LFE164:
 768              		.section	.text.chSchGoSleepTimeoutS,"ax",%progbits
 769              		.align	1
 770              		.global	chSchGoSleepTimeoutS
 771              		.syntax unified
 772              		.code	16
 773              		.thumb_func
 774              		.fpu softvfp
 776              	chSchGoSleepTimeoutS:
 777              	.LVL38:
 778              	.LFB166:
 353:lib/chibios/os/rt/src/chschd.c **** 
 354:lib/chibios/os/rt/src/chschd.c **** /**
 355:lib/chibios/os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state with
 356:lib/chibios/os/rt/src/chschd.c ****  *          timeout specification.
 357:lib/chibios/os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state, if it is not awakened
 358:lib/chibios/os/rt/src/chschd.c ****  *          explicitly within the specified timeout then it is forcibly
 359:lib/chibios/os/rt/src/chschd.c ****  *          awakened with a @p MSG_TIMEOUT low level message. The possible
 360:lib/chibios/os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 361:lib/chibios/os/rt/src/chschd.c ****  *
 362:lib/chibios/os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 363:lib/chibios/os/rt/src/chschd.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 364:lib/chibios/os/rt/src/chschd.c ****  *                      special values are handled as follow:
 365:lib/chibios/os/rt/src/chschd.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 366:lib/chibios/os/rt/src/chschd.c ****  *                        state, this is equivalent to invoking
 367:lib/chibios/os/rt/src/chschd.c ****  *                        @p chSchGoSleepS() but, of course, less efficient.
 368:lib/chibios/os/rt/src/chschd.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 369:lib/chibios/os/rt/src/chschd.c ****  *                      .
 370:lib/chibios/os/rt/src/chschd.c ****  * @return              The wakeup message.
 371:lib/chibios/os/rt/src/chschd.c ****  * @retval MSG_TIMEOUT  if a timeout occurs.
 372:lib/chibios/os/rt/src/chschd.c ****  *
 373:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 374:lib/chibios/os/rt/src/chschd.c ****  */
 375:lib/chibios/os/rt/src/chschd.c **** msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 779              		.loc 1 375 70 is_stmt 1 view -0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 24
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 376:lib/chibios/os/rt/src/chschd.c **** 
 377:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 783              		.loc 1 377 21 view .LVU242
 378:lib/chibios/os/rt/src/chschd.c **** 
 379:lib/chibios/os/rt/src/chschd.c ****   if (TIME_INFINITE != timeout) {
 784              		.loc 1 379 3 view .LVU243
 375:lib/chibios/os/rt/src/chschd.c **** 
 785              		.loc 1 375 70 is_stmt 0 view .LVU244
 786 0000 30B5     		push	{r4, r5, lr}
 787              		.cfi_def_cfa_offset 12
 788              		.cfi_offset 4, -12
 789              		.cfi_offset 5, -8
 790              		.cfi_offset 14, -4
 791 0002 0500     		movs	r5, r0
 792 0004 87B0     		sub	sp, sp, #28
 793              		.cfi_def_cfa_offset 40
 794 0006 0C4C     		ldr	r4, .L43
 795              		.loc 1 379 6 view .LVU245
 796 0008 4B1C     		adds	r3, r1, #1
 797 000a 11D0     		beq	.L37
 798              	.LBB94:
 380:lib/chibios/os/rt/src/chschd.c ****     virtual_timer_t vt;
 799              		.loc 1 380 5 is_stmt 1 view .LVU246
 381:lib/chibios/os/rt/src/chschd.c **** 
 382:lib/chibios/os/rt/src/chschd.c ****     chVTDoSetI(&vt, timeout, wakeup, currp);
 800              		.loc 1 382 5 view .LVU247
 801 000c A369     		ldr	r3, [r4, #24]
 802 000e 0B4A     		ldr	r2, .L43+4
 803 0010 01A8     		add	r0, sp, #4
 804              	.LVL39:
 805              		.loc 1 382 5 is_stmt 0 view .LVU248
 806 0012 FFF7FEFF 		bl	chVTDoSetI
 807              	.LVL40:
 383:lib/chibios/os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 808              		.loc 1 383 5 is_stmt 1 view .LVU249
 809 0016 2800     		movs	r0, r5
 810 0018 FFF7FEFF 		bl	chSchGoSleepS
 811              	.LVL41:
 384:lib/chibios/os/rt/src/chschd.c ****     if (chVTIsArmedI(&vt)) {
 812              		.loc 1 384 5 view .LVU250
 813              		.loc 1 384 5 is_stmt 0 view .LVU251
 814              	.LBE94:
 815              		.file 7 "./lib/chibios/os/rt/include/chvt.h"
   1:./lib/chibios/os/rt/include/chvt.h **** /*
   2:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chvt.h **** 
   4:./lib/chibios/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chvt.h **** 
   6:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chvt.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chvt.h **** 
  11:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chvt.h **** 
  16:./lib/chibios/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chvt.h **** */
  19:./lib/chibios/os/rt/include/chvt.h **** 
  20:./lib/chibios/os/rt/include/chvt.h **** /**
  21:./lib/chibios/os/rt/include/chvt.h ****  * @file    chvt.h
  22:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:./lib/chibios/os/rt/include/chvt.h ****  *
  24:./lib/chibios/os/rt/include/chvt.h ****  * @addtogroup time
  25:./lib/chibios/os/rt/include/chvt.h ****  * @{
  26:./lib/chibios/os/rt/include/chvt.h ****  */
  27:./lib/chibios/os/rt/include/chvt.h **** 
  28:./lib/chibios/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:./lib/chibios/os/rt/include/chvt.h **** #define CHVT_H
  30:./lib/chibios/os/rt/include/chvt.h **** 
  31:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chvt.h **** 
  35:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chvt.h **** 
  39:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chvt.h **** 
  43:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:./lib/chibios/os/rt/include/chvt.h ****        "be zero or greater than one"
  46:./lib/chibios/os/rt/include/chvt.h **** #endif
  47:./lib/chibios/os/rt/include/chvt.h **** 
  48:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:./lib/chibios/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:./lib/chibios/os/rt/include/chvt.h **** #endif
  51:./lib/chibios/os/rt/include/chvt.h **** 
  52:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:./lib/chibios/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:./lib/chibios/os/rt/include/chvt.h **** #endif
  55:./lib/chibios/os/rt/include/chvt.h **** 
  56:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  57:./lib/chibios/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  59:./lib/chibios/os/rt/include/chvt.h **** 
  60:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  61:./lib/chibios/os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  63:./lib/chibios/os/rt/include/chvt.h **** 
  64:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  65:./lib/chibios/os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  67:./lib/chibios/os/rt/include/chvt.h **** 
  68:./lib/chibios/os/rt/include/chvt.h **** /*
  69:./lib/chibios/os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:./lib/chibios/os/rt/include/chvt.h ****  */
  71:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  72:./lib/chibios/os/rt/include/chvt.h **** extern "C" {
  73:./lib/chibios/os/rt/include/chvt.h **** #endif
  74:./lib/chibios/os/rt/include/chvt.h ****   void _vt_init(void);
  75:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:./lib/chibios/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  79:./lib/chibios/os/rt/include/chvt.h **** }
  80:./lib/chibios/os/rt/include/chvt.h **** #endif
  81:./lib/chibios/os/rt/include/chvt.h **** 
  82:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  83:./lib/chibios/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  84:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  85:./lib/chibios/os/rt/include/chvt.h **** 
  86:./lib/chibios/os/rt/include/chvt.h **** /**
  87:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  88:./lib/chibios/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  89:./lib/chibios/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  90:./lib/chibios/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  91:./lib/chibios/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  92:./lib/chibios/os/rt/include/chvt.h ****  *
  93:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  94:./lib/chibios/os/rt/include/chvt.h ****  *
  95:./lib/chibios/os/rt/include/chvt.h ****  * @init
  96:./lib/chibios/os/rt/include/chvt.h ****  */
  97:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  98:./lib/chibios/os/rt/include/chvt.h **** 
  99:./lib/chibios/os/rt/include/chvt.h ****   vtp->func = NULL;
 100:./lib/chibios/os/rt/include/chvt.h **** }
 101:./lib/chibios/os/rt/include/chvt.h **** 
 102:./lib/chibios/os/rt/include/chvt.h **** /**
 103:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 104:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 105:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 106:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 107:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 108:./lib/chibios/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 109:./lib/chibios/os/rt/include/chvt.h ****  *          @p systime_t size.
 110:./lib/chibios/os/rt/include/chvt.h ****  *
 111:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 112:./lib/chibios/os/rt/include/chvt.h ****  *
 113:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 114:./lib/chibios/os/rt/include/chvt.h ****  */
 115:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 116:./lib/chibios/os/rt/include/chvt.h **** 
 117:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 118:./lib/chibios/os/rt/include/chvt.h ****   return ch.vtlist.systime;
 119:./lib/chibios/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 120:./lib/chibios/os/rt/include/chvt.h ****   return port_timer_get_time();
 121:./lib/chibios/os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 122:./lib/chibios/os/rt/include/chvt.h **** }
 123:./lib/chibios/os/rt/include/chvt.h **** 
 124:./lib/chibios/os/rt/include/chvt.h **** /**
 125:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 126:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 127:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 128:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 129:./lib/chibios/os/rt/include/chvt.h ****  *
 130:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 131:./lib/chibios/os/rt/include/chvt.h ****  *
 132:./lib/chibios/os/rt/include/chvt.h ****  * @api
 133:./lib/chibios/os/rt/include/chvt.h ****  */
 134:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 135:./lib/chibios/os/rt/include/chvt.h ****   systime_t systime;
 136:./lib/chibios/os/rt/include/chvt.h **** 
 137:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 138:./lib/chibios/os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 139:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 140:./lib/chibios/os/rt/include/chvt.h **** 
 141:./lib/chibios/os/rt/include/chvt.h ****   return systime;
 142:./lib/chibios/os/rt/include/chvt.h **** }
 143:./lib/chibios/os/rt/include/chvt.h **** 
 144:./lib/chibios/os/rt/include/chvt.h **** /**
 145:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 146:./lib/chibios/os/rt/include/chvt.h ****  *
 147:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     start time
 148:./lib/chibios/os/rt/include/chvt.h ****  * @return              The elapsed time.
 149:./lib/chibios/os/rt/include/chvt.h ****  *
 150:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 151:./lib/chibios/os/rt/include/chvt.h ****  */
 152:./lib/chibios/os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 153:./lib/chibios/os/rt/include/chvt.h **** 
 154:./lib/chibios/os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 155:./lib/chibios/os/rt/include/chvt.h **** }
 156:./lib/chibios/os/rt/include/chvt.h **** 
 157:./lib/chibios/os/rt/include/chvt.h **** /**
 158:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 159:./lib/chibios/os/rt/include/chvt.h ****  *          window.
 160:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 161:./lib/chibios/os/rt/include/chvt.h ****  *          whole time range is specified.
 162:./lib/chibios/os/rt/include/chvt.h ****  *
 163:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 164:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 165:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 166:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 167:./lib/chibios/os/rt/include/chvt.h ****  *
 168:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 169:./lib/chibios/os/rt/include/chvt.h ****  */
 170:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 171:./lib/chibios/os/rt/include/chvt.h **** 
 172:./lib/chibios/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 173:./lib/chibios/os/rt/include/chvt.h **** }
 174:./lib/chibios/os/rt/include/chvt.h **** 
 175:./lib/chibios/os/rt/include/chvt.h **** /**
 176:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 177:./lib/chibios/os/rt/include/chvt.h ****  *          window.
 178:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 179:./lib/chibios/os/rt/include/chvt.h ****  *          whole time range is specified.
 180:./lib/chibios/os/rt/include/chvt.h ****  *
 181:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 182:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 183:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 184:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 185:./lib/chibios/os/rt/include/chvt.h ****  *
 186:./lib/chibios/os/rt/include/chvt.h ****  * @api
 187:./lib/chibios/os/rt/include/chvt.h ****  */
 188:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 189:./lib/chibios/os/rt/include/chvt.h **** 
 190:./lib/chibios/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 191:./lib/chibios/os/rt/include/chvt.h **** }
 192:./lib/chibios/os/rt/include/chvt.h **** 
 193:./lib/chibios/os/rt/include/chvt.h **** /**
 194:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 195:./lib/chibios/os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 196:./lib/chibios/os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 197:./lib/chibios/os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 198:./lib/chibios/os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 199:./lib/chibios/os/rt/include/chvt.h ****  *
 200:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 201:./lib/chibios/os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 202:./lib/chibios/os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 203:./lib/chibios/os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 204:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 205:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 206:./lib/chibios/os/rt/include/chvt.h ****  *
 207:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 208:./lib/chibios/os/rt/include/chvt.h ****  */
 209:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 210:./lib/chibios/os/rt/include/chvt.h **** 
 211:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 212:./lib/chibios/os/rt/include/chvt.h **** 
 213:./lib/chibios/os/rt/include/chvt.h ****   if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 214:./lib/chibios/os/rt/include/chvt.h ****     return false;
 215:./lib/chibios/os/rt/include/chvt.h ****   }
 216:./lib/chibios/os/rt/include/chvt.h **** 
 217:./lib/chibios/os/rt/include/chvt.h ****   if (timep != NULL) {
 218:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 219:./lib/chibios/os/rt/include/chvt.h ****     *timep = ch.vtlist.next->delta;
 220:./lib/chibios/os/rt/include/chvt.h **** #else
 221:./lib/chibios/os/rt/include/chvt.h ****     *timep = (ch.vtlist.next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 222:./lib/chibios/os/rt/include/chvt.h ****              chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 223:./lib/chibios/os/rt/include/chvt.h **** #endif
 224:./lib/chibios/os/rt/include/chvt.h ****   }
 225:./lib/chibios/os/rt/include/chvt.h **** 
 226:./lib/chibios/os/rt/include/chvt.h ****   return true;
 227:./lib/chibios/os/rt/include/chvt.h **** }
 228:./lib/chibios/os/rt/include/chvt.h **** 
 229:./lib/chibios/os/rt/include/chvt.h **** /**
 230:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 231:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 232:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 233:./lib/chibios/os/rt/include/chvt.h ****  *
 234:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 235:./lib/chibios/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 236:./lib/chibios/os/rt/include/chvt.h ****  *
 237:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 238:./lib/chibios/os/rt/include/chvt.h ****  */
 239:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 240:./lib/chibios/os/rt/include/chvt.h **** 
 241:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 816              		.loc 7 241 21 is_stmt 1 view .LVU252
 242:./lib/chibios/os/rt/include/chvt.h **** 
 243:./lib/chibios/os/rt/include/chvt.h ****   return (bool)(vtp->func != NULL);
 817              		.loc 7 243 3 view .LVU253
 818              	.LBB95:
 819              		.loc 1 384 8 is_stmt 0 view .LVU254
 820 001c 049B     		ldr	r3, [sp, #16]
 821 001e 002B     		cmp	r3, #0
 822 0020 02D0     		beq	.L39
 385:lib/chibios/os/rt/src/chschd.c ****       chVTDoResetI(&vt);
 823              		.loc 1 385 7 is_stmt 1 view .LVU255
 824 0022 01A8     		add	r0, sp, #4
 825              	.LVL42:
 826              		.loc 1 385 7 is_stmt 0 view .LVU256
 827 0024 FFF7FEFF 		bl	chVTDoResetI
 828              	.LVL43:
 829              	.L39:
 830              		.loc 1 385 7 view .LVU257
 831              	.LBE95:
 386:lib/chibios/os/rt/src/chschd.c ****     }
 387:lib/chibios/os/rt/src/chschd.c ****   }
 388:lib/chibios/os/rt/src/chschd.c ****   else {
 389:lib/chibios/os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 390:lib/chibios/os/rt/src/chschd.c ****   }
 391:lib/chibios/os/rt/src/chschd.c **** 
 392:lib/chibios/os/rt/src/chschd.c ****   return currp->u.rdymsg;
 832              		.loc 1 392 3 is_stmt 1 view .LVU258
 833              		.loc 1 392 18 is_stmt 0 view .LVU259
 834 0028 A369     		ldr	r3, [r4, #24]
 835 002a 186A     		ldr	r0, [r3, #32]
 393:lib/chibios/os/rt/src/chschd.c **** }
 836              		.loc 1 393 1 view .LVU260
 837 002c 07B0     		add	sp, sp, #28
 838              		@ sp needed
 839 002e 30BD     		pop	{r4, r5, pc}
 840              	.LVL44:
 841              	.L37:
 389:lib/chibios/os/rt/src/chschd.c ****   }
 842              		.loc 1 389 5 is_stmt 1 view .LVU261
 843 0030 FFF7FEFF 		bl	chSchGoSleepS
 844              	.LVL45:
 389:lib/chibios/os/rt/src/chschd.c ****   }
 845              		.loc 1 389 5 is_stmt 0 view .LVU262
 846 0034 F8E7     		b	.L39
 847              	.L44:
 848 0036 C046     		.align	2
 849              	.L43:
 850 0038 00000000 		.word	.LANCHOR0
 851 003c 00000000 		.word	wakeup
 852              		.cfi_endproc
 853              	.LFE166:
 855              		.section	.text.chSchWakeupS,"ax",%progbits
 856              		.align	1
 857              		.global	chSchWakeupS
 858              		.syntax unified
 859              		.code	16
 860              		.thumb_func
 861              		.fpu softvfp
 863              	chSchWakeupS:
 864              	.LVL46:
 865              	.LFB167:
 394:lib/chibios/os/rt/src/chschd.c **** 
 395:lib/chibios/os/rt/src/chschd.c **** /**
 396:lib/chibios/os/rt/src/chschd.c ****  * @brief   Wakes up a thread.
 397:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is inserted into the ready list or immediately made
 398:lib/chibios/os/rt/src/chschd.c ****  *          running depending on its relative priority compared to the current
 399:lib/chibios/os/rt/src/chschd.c ****  *          thread.
 400:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 401:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 402:lib/chibios/os/rt/src/chschd.c ****  * @note    It is equivalent to a @p chSchReadyI() followed by a
 403:lib/chibios/os/rt/src/chschd.c ****  *          @p chSchRescheduleS() but much more efficient.
 404:lib/chibios/os/rt/src/chschd.c ****  * @note    The function assumes that the current thread has the highest
 405:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 406:lib/chibios/os/rt/src/chschd.c ****  *
 407:lib/chibios/os/rt/src/chschd.c ****  * @param[in] ntp       the thread to be made ready
 408:lib/chibios/os/rt/src/chschd.c ****  * @param[in] msg       the wakeup message
 409:lib/chibios/os/rt/src/chschd.c ****  *
 410:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 411:lib/chibios/os/rt/src/chschd.c ****  */
 412:lib/chibios/os/rt/src/chschd.c **** void chSchWakeupS(thread_t *ntp, msg_t msg) {
 866              		.loc 1 412 45 is_stmt 1 view -0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 413:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 870              		.loc 1 413 3 view .LVU264
 412:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 871              		.loc 1 412 45 is_stmt 0 view .LVU265
 872 0000 70B5     		push	{r4, r5, r6, lr}
 873              		.cfi_def_cfa_offset 16
 874              		.cfi_offset 4, -16
 875              		.cfi_offset 5, -12
 876              		.cfi_offset 6, -8
 877              		.cfi_offset 14, -4
 412:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 878              		.loc 1 412 45 view .LVU266
 879 0002 0400     		movs	r4, r0
 880              		.loc 1 413 13 view .LVU267
 881 0004 0A4D     		ldr	r5, .L48
 414:lib/chibios/os/rt/src/chschd.c **** 
 415:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 416:lib/chibios/os/rt/src/chschd.c **** 
 417:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 418:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 419:lib/chibios/os/rt/src/chschd.c ****               "priority order violation");
 420:lib/chibios/os/rt/src/chschd.c **** 
 421:lib/chibios/os/rt/src/chschd.c ****   /* Storing the message to be retrieved by the target thread when it will
 422:lib/chibios/os/rt/src/chschd.c ****      restart execution.*/
 423:lib/chibios/os/rt/src/chschd.c ****   ntp->u.rdymsg = msg;
 424:lib/chibios/os/rt/src/chschd.c **** 
 425:lib/chibios/os/rt/src/chschd.c ****   /* If the waken thread has a not-greater priority than the current
 426:lib/chibios/os/rt/src/chschd.c ****      one then it is just inserted in the ready list else it made
 427:lib/chibios/os/rt/src/chschd.c ****      running immediately and the invoking thread goes in the ready
 428:lib/chibios/os/rt/src/chschd.c ****      list instead.*/
 429:lib/chibios/os/rt/src/chschd.c ****   if (ntp->prio <= otp->prio) {
 882              		.loc 1 429 6 view .LVU268
 883 0006 A368     		ldr	r3, [r4, #8]
 413:lib/chibios/os/rt/src/chschd.c **** 
 884              		.loc 1 413 13 view .LVU269
 885 0008 A869     		ldr	r0, [r5, #24]
 886              	.LVL47:
 415:lib/chibios/os/rt/src/chschd.c **** 
 887              		.loc 1 415 21 is_stmt 1 view .LVU270
 417:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 888              		.loc 1 417 3 view .LVU271
 417:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 889              		.loc 1 417 3 view .LVU272
 423:lib/chibios/os/rt/src/chschd.c **** 
 890              		.loc 1 423 3 view .LVU273
 423:lib/chibios/os/rt/src/chschd.c **** 
 891              		.loc 1 423 17 is_stmt 0 view .LVU274
 892 000a 2162     		str	r1, [r4, #32]
 893              		.loc 1 429 3 is_stmt 1 view .LVU275
 894              		.loc 1 429 6 is_stmt 0 view .LVU276
 895 000c 8268     		ldr	r2, [r0, #8]
 896 000e 9342     		cmp	r3, r2
 897 0010 03D8     		bhi	.L46
 430:lib/chibios/os/rt/src/chschd.c ****     (void) chSchReadyI(ntp);
 898              		.loc 1 430 5 is_stmt 1 view .LVU277
 899              		.loc 1 430 12 is_stmt 0 view .LVU278
 900 0012 2000     		movs	r0, r4
 901              	.LVL48:
 902              		.loc 1 430 12 view .LVU279
 903 0014 FFF7FEFF 		bl	chSchReadyI
 904              	.LVL49:
 905              	.L45:
 431:lib/chibios/os/rt/src/chschd.c ****   }
 432:lib/chibios/os/rt/src/chschd.c ****   else {
 433:lib/chibios/os/rt/src/chschd.c ****     otp = chSchReadyAheadI(otp);
 434:lib/chibios/os/rt/src/chschd.c **** 
 435:lib/chibios/os/rt/src/chschd.c ****     /* Handling idle-leave hook.*/
 436:lib/chibios/os/rt/src/chschd.c ****     if (otp->prio == IDLEPRIO) {
 437:lib/chibios/os/rt/src/chschd.c ****       CH_CFG_IDLE_LEAVE_HOOK();
 438:lib/chibios/os/rt/src/chschd.c ****     }
 439:lib/chibios/os/rt/src/chschd.c **** 
 440:lib/chibios/os/rt/src/chschd.c ****     /* The extracted thread is marked as current.*/
 441:lib/chibios/os/rt/src/chschd.c ****     currp = ntp;
 442:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 443:lib/chibios/os/rt/src/chschd.c **** 
 444:lib/chibios/os/rt/src/chschd.c ****     /* Swap operation as tail call.*/
 445:lib/chibios/os/rt/src/chschd.c ****     chSysSwitch(ntp, otp);
 446:lib/chibios/os/rt/src/chschd.c ****   }
 447:lib/chibios/os/rt/src/chschd.c **** }
 906              		.loc 1 447 1 view .LVU280
 907              		@ sp needed
 908              	.LVL50:
 909              		.loc 1 447 1 view .LVU281
 910 0018 70BD     		pop	{r4, r5, r6, pc}
 911              	.LVL51:
 912              	.L46:
 433:lib/chibios/os/rt/src/chschd.c **** 
 913              		.loc 1 433 5 is_stmt 1 view .LVU282
 433:lib/chibios/os/rt/src/chschd.c **** 
 914              		.loc 1 433 11 is_stmt 0 view .LVU283
 915 001a FFF7FEFF 		bl	chSchReadyAheadI
 916              	.LVL52:
 442:lib/chibios/os/rt/src/chschd.c **** 
 917              		.loc 1 442 16 view .LVU284
 918 001e 0123     		movs	r3, #1
 433:lib/chibios/os/rt/src/chschd.c **** 
 919              		.loc 1 433 11 view .LVU285
 920 0020 0100     		movs	r1, r0
 921              	.LVL53:
 436:lib/chibios/os/rt/src/chschd.c ****       CH_CFG_IDLE_LEAVE_HOOK();
 922              		.loc 1 436 5 is_stmt 1 view .LVU286
 437:lib/chibios/os/rt/src/chschd.c ****     }
 923              		.loc 1 437 7 view .LVU287
 437:lib/chibios/os/rt/src/chschd.c ****     }
 924              		.loc 1 437 31 view .LVU288
 441:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 925              		.loc 1 441 5 view .LVU289
 442:lib/chibios/os/rt/src/chschd.c **** 
 926              		.loc 1 442 16 is_stmt 0 view .LVU290
 927 0022 2377     		strb	r3, [r4, #28]
 445:lib/chibios/os/rt/src/chschd.c ****   }
 928              		.loc 1 445 5 view .LVU291
 929 0024 2000     		movs	r0, r4
 930              	.LVL54:
 441:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 931              		.loc 1 441 11 view .LVU292
 932 0026 AC61     		str	r4, [r5, #24]
 442:lib/chibios/os/rt/src/chschd.c **** 
 933              		.loc 1 442 5 is_stmt 1 view .LVU293
 445:lib/chibios/os/rt/src/chschd.c ****   }
 934              		.loc 1 445 5 view .LVU294
 445:lib/chibios/os/rt/src/chschd.c ****   }
 935              		.loc 1 445 5 view .LVU295
 445:lib/chibios/os/rt/src/chschd.c ****   }
 936              		.loc 1 445 5 view .LVU296
 445:lib/chibios/os/rt/src/chschd.c ****   }
 937              		.loc 1 445 5 view .LVU297
 445:lib/chibios/os/rt/src/chschd.c ****   }
 938              		.loc 1 445 5 view .LVU298
 939 0028 FFF7FEFF 		bl	_port_switch
 940              	.LVL55:
 445:lib/chibios/os/rt/src/chschd.c ****   }
 941              		.loc 1 445 26 view .LVU299
 942              		.loc 1 447 1 is_stmt 0 view .LVU300
 943 002c F4E7     		b	.L45
 944              	.L49:
 945 002e C046     		.align	2
 946              	.L48:
 947 0030 00000000 		.word	.LANCHOR0
 948              		.cfi_endproc
 949              	.LFE167:
 951              		.section	.text.chSchIsPreemptionRequired,"ax",%progbits
 952              		.align	1
 953              		.global	chSchIsPreemptionRequired
 954              		.syntax unified
 955              		.code	16
 956              		.thumb_func
 957              		.fpu softvfp
 959              	chSchIsPreemptionRequired:
 960              	.LFB169:
 448:lib/chibios/os/rt/src/chschd.c **** 
 449:lib/chibios/os/rt/src/chschd.c **** /**
 450:lib/chibios/os/rt/src/chschd.c ****  * @brief   Performs a reschedule if a higher priority thread is runnable.
 451:lib/chibios/os/rt/src/chschd.c ****  * @details If a thread with a higher priority than the current thread is in
 452:lib/chibios/os/rt/src/chschd.c ****  *          the ready list then make the higher priority thread running.
 453:lib/chibios/os/rt/src/chschd.c ****  *
 454:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 455:lib/chibios/os/rt/src/chschd.c ****  */
 456:lib/chibios/os/rt/src/chschd.c **** void chSchRescheduleS(void) {
 457:lib/chibios/os/rt/src/chschd.c **** 
 458:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 459:lib/chibios/os/rt/src/chschd.c **** 
 460:lib/chibios/os/rt/src/chschd.c ****   if (chSchIsRescRequiredI()) {
 461:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 462:lib/chibios/os/rt/src/chschd.c ****   }
 463:lib/chibios/os/rt/src/chschd.c **** }
 464:lib/chibios/os/rt/src/chschd.c **** 
 465:lib/chibios/os/rt/src/chschd.c **** #if !defined(CH_SCH_IS_PREEMPTION_REQUIRED_HOOKED)
 466:lib/chibios/os/rt/src/chschd.c **** /**
 467:lib/chibios/os/rt/src/chschd.c ****  * @brief   Evaluates if preemption is required.
 468:lib/chibios/os/rt/src/chschd.c ****  * @details The decision is taken by comparing the relative priorities and
 469:lib/chibios/os/rt/src/chschd.c ****  *          depending on the state of the round robin timeout counter.
 470:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 471:lib/chibios/os/rt/src/chschd.c ****  *          itself or from within the port layer.
 472:lib/chibios/os/rt/src/chschd.c ****  *
 473:lib/chibios/os/rt/src/chschd.c ****  * @retval true         if there is a thread that must go in running state
 474:lib/chibios/os/rt/src/chschd.c ****  *                      immediately.
 475:lib/chibios/os/rt/src/chschd.c ****  * @retval false        if preemption is not required.
 476:lib/chibios/os/rt/src/chschd.c ****  *
 477:lib/chibios/os/rt/src/chschd.c ****  * @special
 478:lib/chibios/os/rt/src/chschd.c ****  */
 479:lib/chibios/os/rt/src/chschd.c **** bool chSchIsPreemptionRequired(void) {
 961              		.loc 1 479 38 is_stmt 1 view -0
 962              		.cfi_startproc
 963              		@ args = 0, pretend = 0, frame = 0
 964              		@ frame_needed = 0, uses_anonymous_args = 0
 965              		@ link register save eliminated.
 480:lib/chibios/os/rt/src/chschd.c ****   tprio_t p1 = firstprio(&ch.rlist.queue);
 966              		.loc 1 480 3 view .LVU302
 967              	.LVL56:
 481:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 968              		.loc 1 481 3 view .LVU303
 482:lib/chibios/os/rt/src/chschd.c **** 
 483:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 484:lib/chibios/os/rt/src/chschd.c ****   /* If the running thread has not reached its time quantum, reschedule only
 485:lib/chibios/os/rt/src/chschd.c ****      if the first thread on the ready queue has a higher priority.
 486:lib/chibios/os/rt/src/chschd.c ****      Otherwise, if the running thread has used up its time quantum, reschedule
 487:lib/chibios/os/rt/src/chschd.c ****      if the first thread on the ready queue has equal or higher priority.*/
 488:lib/chibios/os/rt/src/chschd.c ****   return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 489:lib/chibios/os/rt/src/chschd.c **** #else
 490:lib/chibios/os/rt/src/chschd.c ****   /* If the round robin preemption feature is not enabled then performs a
 491:lib/chibios/os/rt/src/chschd.c ****      simpler comparison.*/
 492:lib/chibios/os/rt/src/chschd.c ****   return p1 > p2;
 969              		.loc 1 492 3 view .LVU304
 480:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 970              		.loc 1 480 16 is_stmt 0 view .LVU305
 971 0000 044B     		ldr	r3, .L51
 493:lib/chibios/os/rt/src/chschd.c **** #endif
 494:lib/chibios/os/rt/src/chschd.c **** }
 972              		.loc 1 494 1 view .LVU306
 973              		@ sp needed
 481:lib/chibios/os/rt/src/chschd.c **** 
 974              		.loc 1 481 11 view .LVU307
 975 0002 9A69     		ldr	r2, [r3, #24]
 480:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 976              		.loc 1 480 11 view .LVU308
 977 0004 1968     		ldr	r1, [r3]
 492:lib/chibios/os/rt/src/chschd.c **** #endif
 978              		.loc 1 492 13 view .LVU309
 979 0006 9068     		ldr	r0, [r2, #8]
 980 0008 8B68     		ldr	r3, [r1, #8]
 981 000a 9842     		cmp	r0, r3
 982 000c 8041     		sbcs	r0, r0, r0
 983 000e 4042     		rsbs	r0, r0, #0
 984              		.loc 1 494 1 view .LVU310
 985 0010 7047     		bx	lr
 986              	.L52:
 987 0012 C046     		.align	2
 988              	.L51:
 989 0014 00000000 		.word	.LANCHOR0
 990              		.cfi_endproc
 991              	.LFE169:
 993              		.thumb_set chSchIsRescRequiredI,chSchIsPreemptionRequired
 994              		.section	.text.chSchDoRescheduleBehind,"ax",%progbits
 995              		.align	1
 996              		.global	chSchDoRescheduleBehind
 997              		.syntax unified
 998              		.code	16
 999              		.thumb_func
 1000              		.fpu softvfp
 1002              	chSchDoRescheduleBehind:
 1003              	.LFB170:
 495:lib/chibios/os/rt/src/chschd.c **** #endif /* !defined(CH_SCH_IS_PREEMPTION_REQUIRED_HOOKED) */
 496:lib/chibios/os/rt/src/chschd.c **** 
 497:lib/chibios/os/rt/src/chschd.c **** /**
 498:lib/chibios/os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 499:lib/chibios/os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list behind all
 500:lib/chibios/os/rt/src/chschd.c ****  *          threads having the same priority. The thread regains its time
 501:lib/chibios/os/rt/src/chschd.c ****  *          quantum.
 502:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 503:lib/chibios/os/rt/src/chschd.c ****  *          itself.
 504:lib/chibios/os/rt/src/chschd.c ****  *
 505:lib/chibios/os/rt/src/chschd.c ****  * @special
 506:lib/chibios/os/rt/src/chschd.c ****  */
 507:lib/chibios/os/rt/src/chschd.c **** void chSchDoRescheduleBehind(void) {
 1004              		.loc 1 507 36 is_stmt 1 view -0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 0
 1007              		@ frame_needed = 0, uses_anonymous_args = 0
 508:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 1008              		.loc 1 508 3 view .LVU312
 507:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 1009              		.loc 1 507 36 is_stmt 0 view .LVU313
 1010 0000 10B5     		push	{r4, lr}
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 4, -8
 1013              		.cfi_offset 14, -4
 1014              		.loc 1 508 13 view .LVU314
 1015 0002 084C     		ldr	r4, .L54
 509:lib/chibios/os/rt/src/chschd.c **** 
 510:lib/chibios/os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 511:lib/chibios/os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 512:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 513:lib/chibios/os/rt/src/chschd.c **** 
 514:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 515:lib/chibios/os/rt/src/chschd.c ****   if (otp->prio == IDLEPRIO) {
 516:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 517:lib/chibios/os/rt/src/chschd.c ****   }
 518:lib/chibios/os/rt/src/chschd.c **** 
 519:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 520:lib/chibios/os/rt/src/chschd.c ****   /* It went behind peers so it gets a new time quantum.*/
 521:lib/chibios/os/rt/src/chschd.c ****   otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 522:lib/chibios/os/rt/src/chschd.c **** #endif
 523:lib/chibios/os/rt/src/chschd.c **** 
 524:lib/chibios/os/rt/src/chschd.c ****   /* Placing in ready list behind peers.*/
 525:lib/chibios/os/rt/src/chschd.c ****   otp = chSchReadyI(otp);
 526:lib/chibios/os/rt/src/chschd.c **** 
 527:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 528:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 529:lib/chibios/os/rt/src/chschd.c **** }
 1016              		.loc 1 529 1 view .LVU315
 1017              		@ sp needed
 1018              	.LBB96:
 1019              	.LBB97:
 125:lib/chibios/os/rt/src/chschd.c **** 
 1020              		.loc 1 125 13 view .LVU316
 1021 0004 2368     		ldr	r3, [r4]
 1022              	.LBE97:
 1023              	.LBE96:
 508:lib/chibios/os/rt/src/chschd.c **** 
 1024              		.loc 1 508 13 view .LVU317
 1025 0006 A069     		ldr	r0, [r4, #24]
 1026              	.LVL57:
 511:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 1027              		.loc 1 511 3 is_stmt 1 view .LVU318
 1028              	.LBB99:
 1029              	.LBI96:
 124:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->next;
 1030              		.loc 1 124 11 view .LVU319
 1031              	.LBB98:
 125:lib/chibios/os/rt/src/chschd.c **** 
 1032              		.loc 1 125 3 view .LVU320
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 1033              		.loc 1 127 3 view .LVU321
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 1034              		.loc 1 127 36 is_stmt 0 view .LVU322
 1035 0008 1A68     		ldr	r2, [r3]
 128:lib/chibios/os/rt/src/chschd.c **** 
 1036              		.loc 1 128 25 view .LVU323
 1037 000a 5460     		str	r4, [r2, #4]
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 1038              		.loc 1 127 25 view .LVU324
 1039 000c 2260     		str	r2, [r4]
 128:lib/chibios/os/rt/src/chschd.c **** 
 1040              		.loc 1 128 3 is_stmt 1 view .LVU325
 130:lib/chibios/os/rt/src/chschd.c **** }
 1041              		.loc 1 130 3 view .LVU326
 1042              	.LVL58:
 130:lib/chibios/os/rt/src/chschd.c **** }
 1043              		.loc 1 130 3 is_stmt 0 view .LVU327
 1044              	.LBE98:
 1045              	.LBE99:
 512:lib/chibios/os/rt/src/chschd.c **** 
 1046              		.loc 1 512 16 view .LVU328
 1047 000e 0122     		movs	r2, #1
 1048 0010 1A77     		strb	r2, [r3, #28]
 511:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 1049              		.loc 1 511 9 view .LVU329
 1050 0012 A361     		str	r3, [r4, #24]
 512:lib/chibios/os/rt/src/chschd.c **** 
 1051              		.loc 1 512 3 is_stmt 1 view .LVU330
 515:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 1052              		.loc 1 515 3 view .LVU331
 516:lib/chibios/os/rt/src/chschd.c ****   }
 1053              		.loc 1 516 5 view .LVU332
 516:lib/chibios/os/rt/src/chschd.c ****   }
 1054              		.loc 1 516 29 view .LVU333
 525:lib/chibios/os/rt/src/chschd.c **** 
 1055              		.loc 1 525 3 view .LVU334
 525:lib/chibios/os/rt/src/chschd.c **** 
 1056              		.loc 1 525 9 is_stmt 0 view .LVU335
 1057 0014 FFF7FEFF 		bl	chSchReadyI
 1058              	.LVL59:
 525:lib/chibios/os/rt/src/chschd.c **** 
 1059              		.loc 1 525 9 view .LVU336
 1060 0018 0100     		movs	r1, r0
 1061              	.LVL60:
 528:lib/chibios/os/rt/src/chschd.c **** }
 1062              		.loc 1 528 3 is_stmt 1 view .LVU337
 528:lib/chibios/os/rt/src/chschd.c **** }
 1063              		.loc 1 528 3 view .LVU338
 528:lib/chibios/os/rt/src/chschd.c **** }
 1064              		.loc 1 528 3 view .LVU339
 528:lib/chibios/os/rt/src/chschd.c **** }
 1065              		.loc 1 528 3 view .LVU340
 528:lib/chibios/os/rt/src/chschd.c **** }
 1066              		.loc 1 528 3 view .LVU341
 1067 001a A069     		ldr	r0, [r4, #24]
 1068              	.LVL61:
 528:lib/chibios/os/rt/src/chschd.c **** }
 1069              		.loc 1 528 3 is_stmt 0 view .LVU342
 1070 001c FFF7FEFF 		bl	_port_switch
 1071              	.LVL62:
 528:lib/chibios/os/rt/src/chschd.c **** }
 1072              		.loc 1 528 26 is_stmt 1 view .LVU343
 1073              		.loc 1 529 1 is_stmt 0 view .LVU344
 1074 0020 10BD     		pop	{r4, pc}
 1075              	.L55:
 1076 0022 C046     		.align	2
 1077              	.L54:
 1078 0024 00000000 		.word	.LANCHOR0
 1079              		.cfi_endproc
 1080              	.LFE170:
 1082              		.section	.text.chSchDoRescheduleAhead,"ax",%progbits
 1083              		.align	1
 1084              		.global	chSchDoRescheduleAhead
 1085              		.syntax unified
 1086              		.code	16
 1087              		.thumb_func
 1088              		.fpu softvfp
 1090              	chSchDoRescheduleAhead:
 1091              	.LFB171:
 530:lib/chibios/os/rt/src/chschd.c **** 
 531:lib/chibios/os/rt/src/chschd.c **** /**
 532:lib/chibios/os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 533:lib/chibios/os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list ahead of all
 534:lib/chibios/os/rt/src/chschd.c ****  *          threads having the same priority.
 535:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 536:lib/chibios/os/rt/src/chschd.c ****  *          itself.
 537:lib/chibios/os/rt/src/chschd.c ****  *
 538:lib/chibios/os/rt/src/chschd.c ****  * @special
 539:lib/chibios/os/rt/src/chschd.c ****  */
 540:lib/chibios/os/rt/src/chschd.c **** void chSchDoRescheduleAhead(void) {
 1092              		.loc 1 540 35 is_stmt 1 view -0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 0
 1095              		@ frame_needed = 0, uses_anonymous_args = 0
 541:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 1096              		.loc 1 541 3 view .LVU346
 540:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 1097              		.loc 1 540 35 is_stmt 0 view .LVU347
 1098 0000 10B5     		push	{r4, lr}
 1099              		.cfi_def_cfa_offset 8
 1100              		.cfi_offset 4, -8
 1101              		.cfi_offset 14, -4
 1102              		.loc 1 541 13 view .LVU348
 1103 0002 084C     		ldr	r4, .L57
 542:lib/chibios/os/rt/src/chschd.c **** 
 543:lib/chibios/os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 544:lib/chibios/os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 545:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 546:lib/chibios/os/rt/src/chschd.c **** 
 547:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 548:lib/chibios/os/rt/src/chschd.c ****   if (otp->prio == IDLEPRIO) {
 549:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 550:lib/chibios/os/rt/src/chschd.c ****   }
 551:lib/chibios/os/rt/src/chschd.c **** 
 552:lib/chibios/os/rt/src/chschd.c ****   /* Placing in ready list ahead of peers.*/
 553:lib/chibios/os/rt/src/chschd.c ****   otp = chSchReadyAheadI(otp);
 554:lib/chibios/os/rt/src/chschd.c **** 
 555:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 556:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 557:lib/chibios/os/rt/src/chschd.c **** }
 1104              		.loc 1 557 1 view .LVU349
 1105              		@ sp needed
 1106              	.LBB100:
 1107              	.LBB101:
 125:lib/chibios/os/rt/src/chschd.c **** 
 1108              		.loc 1 125 13 view .LVU350
 1109 0004 2368     		ldr	r3, [r4]
 1110              	.LBE101:
 1111              	.LBE100:
 541:lib/chibios/os/rt/src/chschd.c **** 
 1112              		.loc 1 541 13 view .LVU351
 1113 0006 A069     		ldr	r0, [r4, #24]
 1114              	.LVL63:
 544:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 1115              		.loc 1 544 3 is_stmt 1 view .LVU352
 1116              	.LBB103:
 1117              	.LBI100:
 124:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->next;
 1118              		.loc 1 124 11 view .LVU353
 1119              	.LBB102:
 125:lib/chibios/os/rt/src/chschd.c **** 
 1120              		.loc 1 125 3 view .LVU354
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 1121              		.loc 1 127 3 view .LVU355
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 1122              		.loc 1 127 36 is_stmt 0 view .LVU356
 1123 0008 1A68     		ldr	r2, [r3]
 128:lib/chibios/os/rt/src/chschd.c **** 
 1124              		.loc 1 128 25 view .LVU357
 1125 000a 5460     		str	r4, [r2, #4]
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 1126              		.loc 1 127 25 view .LVU358
 1127 000c 2260     		str	r2, [r4]
 128:lib/chibios/os/rt/src/chschd.c **** 
 1128              		.loc 1 128 3 is_stmt 1 view .LVU359
 130:lib/chibios/os/rt/src/chschd.c **** }
 1129              		.loc 1 130 3 view .LVU360
 1130              	.LVL64:
 130:lib/chibios/os/rt/src/chschd.c **** }
 1131              		.loc 1 130 3 is_stmt 0 view .LVU361
 1132              	.LBE102:
 1133              	.LBE103:
 545:lib/chibios/os/rt/src/chschd.c **** 
 1134              		.loc 1 545 16 view .LVU362
 1135 000e 0122     		movs	r2, #1
 1136 0010 1A77     		strb	r2, [r3, #28]
 544:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 1137              		.loc 1 544 9 view .LVU363
 1138 0012 A361     		str	r3, [r4, #24]
 545:lib/chibios/os/rt/src/chschd.c **** 
 1139              		.loc 1 545 3 is_stmt 1 view .LVU364
 548:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 1140              		.loc 1 548 3 view .LVU365
 549:lib/chibios/os/rt/src/chschd.c ****   }
 1141              		.loc 1 549 5 view .LVU366
 549:lib/chibios/os/rt/src/chschd.c ****   }
 1142              		.loc 1 549 29 view .LVU367
 553:lib/chibios/os/rt/src/chschd.c **** 
 1143              		.loc 1 553 3 view .LVU368
 553:lib/chibios/os/rt/src/chschd.c **** 
 1144              		.loc 1 553 9 is_stmt 0 view .LVU369
 1145 0014 FFF7FEFF 		bl	chSchReadyAheadI
 1146              	.LVL65:
 553:lib/chibios/os/rt/src/chschd.c **** 
 1147              		.loc 1 553 9 view .LVU370
 1148 0018 0100     		movs	r1, r0
 1149              	.LVL66:
 556:lib/chibios/os/rt/src/chschd.c **** }
 1150              		.loc 1 556 3 is_stmt 1 view .LVU371
 556:lib/chibios/os/rt/src/chschd.c **** }
 1151              		.loc 1 556 3 view .LVU372
 556:lib/chibios/os/rt/src/chschd.c **** }
 1152              		.loc 1 556 3 view .LVU373
 556:lib/chibios/os/rt/src/chschd.c **** }
 1153              		.loc 1 556 3 view .LVU374
 556:lib/chibios/os/rt/src/chschd.c **** }
 1154              		.loc 1 556 3 view .LVU375
 1155 001a A069     		ldr	r0, [r4, #24]
 1156              	.LVL67:
 556:lib/chibios/os/rt/src/chschd.c **** }
 1157              		.loc 1 556 3 is_stmt 0 view .LVU376
 1158 001c FFF7FEFF 		bl	_port_switch
 1159              	.LVL68:
 556:lib/chibios/os/rt/src/chschd.c **** }
 1160              		.loc 1 556 26 is_stmt 1 view .LVU377
 1161              		.loc 1 557 1 is_stmt 0 view .LVU378
 1162 0020 10BD     		pop	{r4, pc}
 1163              	.L58:
 1164 0022 C046     		.align	2
 1165              	.L57:
 1166 0024 00000000 		.word	.LANCHOR0
 1167              		.cfi_endproc
 1168              	.LFE171:
 1170              		.section	.text.chSchRescheduleS,"ax",%progbits
 1171              		.align	1
 1172              		.global	chSchRescheduleS
 1173              		.syntax unified
 1174              		.code	16
 1175              		.thumb_func
 1176              		.fpu softvfp
 1178              	chSchRescheduleS:
 1179              	.LFB168:
 456:lib/chibios/os/rt/src/chschd.c **** 
 1180              		.loc 1 456 29 is_stmt 1 view -0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 458:lib/chibios/os/rt/src/chschd.c **** 
 1184              		.loc 1 458 21 view .LVU380
 460:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 1185              		.loc 1 460 3 view .LVU381
 456:lib/chibios/os/rt/src/chschd.c **** 
 1186              		.loc 1 456 29 is_stmt 0 view .LVU382
 1187 0000 10B5     		push	{r4, lr}
 1188              		.cfi_def_cfa_offset 8
 1189              		.cfi_offset 4, -8
 1190              		.cfi_offset 14, -4
 460:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 1191              		.loc 1 460 7 view .LVU383
 1192 0002 FFF7FEFF 		bl	chSchIsRescRequiredI
 1193              	.LVL69:
 460:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 1194              		.loc 1 460 6 view .LVU384
 1195 0006 0028     		cmp	r0, #0
 1196 0008 01D0     		beq	.L59
 461:lib/chibios/os/rt/src/chschd.c ****   }
 1197              		.loc 1 461 5 is_stmt 1 view .LVU385
 1198 000a FFF7FEFF 		bl	chSchDoRescheduleAhead
 1199              	.LVL70:
 1200              	.L59:
 463:lib/chibios/os/rt/src/chschd.c **** 
 1201              		.loc 1 463 1 is_stmt 0 view .LVU386
 1202              		@ sp needed
 1203 000e 10BD     		pop	{r4, pc}
 1204              		.cfi_endproc
 1205              	.LFE168:
 1207              		.section	.text.chSchDoReschedule,"ax",%progbits
 1208              		.align	1
 1209              		.global	chSchDoReschedule
 1210              		.syntax unified
 1211              		.code	16
 1212              		.thumb_func
 1213              		.fpu softvfp
 1215              	chSchDoReschedule:
 1216              	.LFB176:
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220 0000 10B5     		push	{r4, lr}
 1221              		.cfi_def_cfa_offset 8
 1222              		.cfi_offset 4, -8
 1223              		.cfi_offset 14, -4
 1224 0002 FFF7FEFF 		bl	chSchDoRescheduleAhead
 1225              		@ sp needed
 1226 0006 10BD     		pop	{r4, pc}
 1227              		.cfi_endproc
 1228              	.LFE176:
 1230              		.global	ch
 1231              		.section	.bss.ch,"aw",%nobits
 1232              		.align	2
 1233              		.set	.LANCHOR0,. + 0
 1236              	ch:
 1237 0000 00000000 		.space	108
 1237      00000000 
 1237      00000000 
 1237      00000000 
 1237      00000000 
 1238              		.text
 1239              	.Letext0:
 1240              		.file 8 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_
 1241              		.file 9 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdi
 1242              		.file 10 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1243              		.file 11 "./lib/chibios/os/rt/include/chsystypes.h"
 1244              		.file 12 "./lib/chibios/os/rt/include/chtime.h"
 1245              		.file 13 "./lib/chibios/os/common/ext/ST/STM32F0xx/system_stm32f0xx.h"
 1246              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1247              		.file 15 "./lib/chibios/os/rt/include/chmtx.h"
 1248              		.file 16 "./lib/chibios/os/rt/include/chregistry.h"
 1249              		.file 17 "./lib/chibios/os/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:00000000 chschd.c
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:16     .text._scheduler_init:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:24     .text._scheduler_init:00000000 _scheduler_init
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:77     .text._scheduler_init:00000010 $d
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:82     .text.queue_prio_insert:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:89     .text.queue_prio_insert:00000000 queue_prio_insert
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:139    .text.queue_insert:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:146    .text.queue_insert:00000000 queue_insert
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:176    .text.queue_fifo_remove:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:183    .text.queue_fifo_remove:00000000 queue_fifo_remove
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:214    .text.queue_lifo_remove:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:221    .text.queue_lifo_remove:00000000 queue_lifo_remove
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:252    .text.queue_dequeue:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:259    .text.queue_dequeue:00000000 queue_dequeue
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:286    .text.list_insert:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:293    .text.list_insert:00000000 list_insert
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:317    .text.list_remove:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:324    .text.list_remove:00000000 list_remove
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:352    .text.chSchReadyI:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:359    .text.chSchReadyI:00000000 chSchReadyI
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:417    .text.chSchReadyI:0000001c $d
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:422    .text.wakeup:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:428    .text.wakeup:00000000 wakeup
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:508    .text.wakeup:00000010 $d
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:514    .text.wakeup:00000016 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:617    .text.chSchReadyAheadI:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:624    .text.chSchReadyAheadI:00000000 chSchReadyAheadI
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:682    .text.chSchReadyAheadI:0000001c $d
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:687    .text.chSchGoSleepS:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:694    .text.chSchGoSleepS:00000000 chSchGoSleepS
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:764    .text.chSchGoSleepS:0000001c $d
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:769    .text.chSchGoSleepTimeoutS:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:776    .text.chSchGoSleepTimeoutS:00000000 chSchGoSleepTimeoutS
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:850    .text.chSchGoSleepTimeoutS:00000038 $d
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:856    .text.chSchWakeupS:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:863    .text.chSchWakeupS:00000000 chSchWakeupS
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:947    .text.chSchWakeupS:00000030 $d
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:952    .text.chSchIsPreemptionRequired:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:959    .text.chSchIsPreemptionRequired:00000000 chSchIsPreemptionRequired
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:989    .text.chSchIsPreemptionRequired:00000014 $d
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:959    .text.chSchIsPreemptionRequired:00000000 chSchIsRescRequiredI
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:995    .text.chSchDoRescheduleBehind:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1002   .text.chSchDoRescheduleBehind:00000000 chSchDoRescheduleBehind
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1078   .text.chSchDoRescheduleBehind:00000024 $d
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1083   .text.chSchDoRescheduleAhead:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1090   .text.chSchDoRescheduleAhead:00000000 chSchDoRescheduleAhead
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1166   .text.chSchDoRescheduleAhead:00000024 $d
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1171   .text.chSchRescheduleS:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1178   .text.chSchRescheduleS:00000000 chSchRescheduleS
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1208   .text.chSchDoReschedule:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1215   .text.chSchDoReschedule:00000000 chSchDoReschedule
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1236   .bss.ch:00000000 ch
C:\Users\kyleo\AppData\Local\Temp\ccSv3P7A.s:1232   .bss.ch:00000000 $d

UNDEFINED SYMBOLS
__gnu_thumb1_case_uqi
_port_switch
chVTDoSetI
chVTDoResetI
