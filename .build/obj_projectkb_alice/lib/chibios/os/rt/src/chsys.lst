   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 2
  11              		.file	"chsys.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._idle_thread,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_idle_thread:
  24              	.LFB154:
  25              		.file 1 "lib/chibios/os/rt/src/chsys.c"
   1:lib/chibios/os/rt/src/chsys.c **** /*
   2:lib/chibios/os/rt/src/chsys.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chsys.c **** 
   4:lib/chibios/os/rt/src/chsys.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chsys.c **** 
   6:lib/chibios/os/rt/src/chsys.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chsys.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chsys.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chsys.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chsys.c **** 
  11:lib/chibios/os/rt/src/chsys.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chsys.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chsys.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chsys.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chsys.c **** 
  16:lib/chibios/os/rt/src/chsys.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chsys.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chsys.c **** */
  19:lib/chibios/os/rt/src/chsys.c **** 
  20:lib/chibios/os/rt/src/chsys.c **** /**
  21:lib/chibios/os/rt/src/chsys.c ****  * @file    chsys.c
  22:lib/chibios/os/rt/src/chsys.c ****  * @brief   System related code.
  23:lib/chibios/os/rt/src/chsys.c ****  *
  24:lib/chibios/os/rt/src/chsys.c ****  * @addtogroup system
  25:lib/chibios/os/rt/src/chsys.c ****  * @details System related APIs and services:
  26:lib/chibios/os/rt/src/chsys.c ****  *          - Initialization.
  27:lib/chibios/os/rt/src/chsys.c ****  *          - Locks.
  28:lib/chibios/os/rt/src/chsys.c ****  *          - Interrupt Handling.
  29:lib/chibios/os/rt/src/chsys.c ****  *          - Power Management.
  30:lib/chibios/os/rt/src/chsys.c ****  *          - Abnormal Termination.
  31:lib/chibios/os/rt/src/chsys.c ****  *          - Realtime counter.
  32:lib/chibios/os/rt/src/chsys.c ****  *          .
  33:lib/chibios/os/rt/src/chsys.c ****  * @{
  34:lib/chibios/os/rt/src/chsys.c ****  */
  35:lib/chibios/os/rt/src/chsys.c **** 
  36:lib/chibios/os/rt/src/chsys.c **** #include "ch.h"
  37:lib/chibios/os/rt/src/chsys.c **** 
  38:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  39:lib/chibios/os/rt/src/chsys.c **** /* Module exported variables.                                                */
  40:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  41:lib/chibios/os/rt/src/chsys.c **** 
  42:lib/chibios/os/rt/src/chsys.c **** #if (CH_CFG_NO_IDLE_THREAD == FALSE) || defined(__DOXYGEN__)
  43:lib/chibios/os/rt/src/chsys.c **** /**
  44:lib/chibios/os/rt/src/chsys.c ****  * @brief   Idle thread working area.
  45:lib/chibios/os/rt/src/chsys.c ****  */
  46:lib/chibios/os/rt/src/chsys.c **** THD_WORKING_AREA(ch_idle_thread_wa, PORT_IDLE_THREAD_STACK_SIZE);
  47:lib/chibios/os/rt/src/chsys.c **** #endif
  48:lib/chibios/os/rt/src/chsys.c **** 
  49:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  50:lib/chibios/os/rt/src/chsys.c **** /* Module local types.                                                       */
  51:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  52:lib/chibios/os/rt/src/chsys.c **** 
  53:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  54:lib/chibios/os/rt/src/chsys.c **** /* Module local variables.                                                   */
  55:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  56:lib/chibios/os/rt/src/chsys.c **** 
  57:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  58:lib/chibios/os/rt/src/chsys.c **** /* Module local functions.                                                   */
  59:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  60:lib/chibios/os/rt/src/chsys.c **** 
  61:lib/chibios/os/rt/src/chsys.c **** #if (CH_CFG_NO_IDLE_THREAD == FALSE) || defined(__DOXYGEN__)
  62:lib/chibios/os/rt/src/chsys.c **** /**
  63:lib/chibios/os/rt/src/chsys.c ****  * @brief   This function implements the idle thread infinite loop.
  64:lib/chibios/os/rt/src/chsys.c ****  * @details The function puts the processor in the lowest power mode capable
  65:lib/chibios/os/rt/src/chsys.c ****  *          to serve interrupts.<br>
  66:lib/chibios/os/rt/src/chsys.c ****  *          The priority is internally set to the minimum system value so
  67:lib/chibios/os/rt/src/chsys.c ****  *          that this thread is executed only if there are no other ready
  68:lib/chibios/os/rt/src/chsys.c ****  *          threads in the system.
  69:lib/chibios/os/rt/src/chsys.c ****  *
  70:lib/chibios/os/rt/src/chsys.c ****  * @param[in] p         the thread parameter, unused in this scenario
  71:lib/chibios/os/rt/src/chsys.c ****  */
  72:lib/chibios/os/rt/src/chsys.c **** static void _idle_thread(void *p) {
  26              		.loc 1 72 35 view -0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33              	.L2:
  73:lib/chibios/os/rt/src/chsys.c **** 
  74:lib/chibios/os/rt/src/chsys.c ****   (void)p;
  34              		.loc 1 74 3 discriminator 1 view .LVU1
  75:lib/chibios/os/rt/src/chsys.c **** 
  76:lib/chibios/os/rt/src/chsys.c ****   while (true) {
  35              		.loc 1 76 3 discriminator 1 view .LVU2
  77:lib/chibios/os/rt/src/chsys.c ****     /*lint -save -e522 [2.2] Apparently no side effects because it contains
  78:lib/chibios/os/rt/src/chsys.c ****       an asm instruction.*/
  79:lib/chibios/os/rt/src/chsys.c ****     port_wait_for_interrupt();
  36              		.loc 1 79 5 discriminator 1 view .LVU3
  37              	.LBB120:
  38              	.LBI120:
  39              		.file 2 "./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @file    chcore_v6m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   ARMv6-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @addtogroup ARMCMx_V6M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifndef CHCORE_V6M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CHCORE_V6M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_SUPPORTS_RT                FALSE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WORKING_AREA_ALIGN         PORT_STACK_ALIGN
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /** @} */
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   PendSV priority level.
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    This priority is enforced to be equal to @p 0,
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          this handler always has the highest priority that cannot preempt
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          the kernel.
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_PRIORITY_PENDSV          0
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module pre-compile time settings.                                         */
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Stack size for the system idle thread.
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This size depends on the idle thread implementation, usually
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          the idle thread should take no more space than those reserved
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    In this port it is set to 16 because the idle thread does have
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          a stack frame when compiling without optimizations. You may
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          reduce this value to zero when compiling with optimizations.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE)
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This constant is used in the calculation of the correct working
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          area size.
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    In this port this value is conservatively set to 64 because the
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          with compiler optimizations disabled. The value can be reduced
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          when compiler optimizations are enabled.
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(PORT_INT_REQUIRED_STACK)
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INT_REQUIRED_STACK         64
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Alternate preemption method.
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details Activating this option will make the Kernel use the PendSV
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          handler for preemption instead of the NMI handler.
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifndef CORTEX_ALTERNATE_SWITCH
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_ALTERNATE_SWITCH         FALSE
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Derived constants and error checks.                                       */
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(CH_CUSTOMER_LIC_PORT_CM0)
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #error "CH_CUSTOMER_LIC_PORT_CM0 not defined"
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if CH_CUSTOMER_LIC_PORT_CM0 == FALSE
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #error "ChibiOS Cortex-M0 port not licensed"
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Handling a GCC problem impacting ARMv6-M.*/
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if defined(__GNUC__) && !defined(PORT_IGNORE_GCC_VERSION_CHECK)
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if __GNUC__ > 5
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #warning "This compiler has a know problem with Cortex-M0, see bugs: 88167, 88656."
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #warning "*** Use GCC version 5 or below ***"
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @name    Architecture and Compiler
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if ((CORTEX_MODEL == 0) && !defined(__CORE_CM0PLUS_H_DEPENDANT)) ||        \
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     defined(__DOXYGEN__)
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Macro defining the specific ARM architecture.
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_ARM_v6M
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Name of the implemented architecture.
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv6-M"
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Name of the architecture variant.
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_CORE_VARIANT_NAME          "Cortex-M0"
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif (CORTEX_MODEL == 0) && defined(__CORE_CM0PLUS_H_DEPENDANT)
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_ARM_v6M
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv6-M"
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_CORE_VARIANT_NAME          "Cortex-M0+"
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Port-specific information string.
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CORTEX_ALTERNATE_SWITCH == FALSE) || defined(__DOXYGEN__)
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INFO                       "Preemption through NMI"
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INFO                       "Preemption through PendSV"
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /** @} */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Maximum usable priority for normal ISRs.
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CORTEX_ALTERNATE_SWITCH == TRUE) || defined(__DOXYGEN__)
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      1
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module data structures and types.                                         */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(_FROM_ASM_)
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  /* The documentation of the following declarations is in chconf.h in order
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     to not have duplicated structure names into the documentation.*/
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(__DOXYGEN__)
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** struct port_extctx {
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r0;
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r1;
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r2;
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r3;
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r12;
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      lr_thd;
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      pc;
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      xpsr;
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** };
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** struct port_intctx {
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r8;
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r9;
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r10;
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r11;
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r4;
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r5;
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r6;
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r7;
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      lr;
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** };
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif /* !defined(__DOXYGEN__) */
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module macros.                                                            */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This code usually setup the context switching frame represented
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          by an @p port_intctx structure.
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                                         sizeof (struct port_intctx));       \
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->r4 = (regarm_t)(pf);                                        \
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->r5 = (regarm_t)(arg);                                       \
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->lr = (regarm_t)_port_thread_start;                          \
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Computes the thread working area global size.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    There is no need to perform alignments in this macro.
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WA_SIZE(n) (sizeof (struct port_intctx) +                      \
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                          sizeof (struct port_extctx) +                      \
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Static working area allocation.
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro is used to allocate a static thread working area
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          aligned as both position and size.
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] s         the name to be assigned to the stack array
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] n         the stack size to be assigned to the thread
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ prologue code.
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          enabled to invoke system APIs.
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__builtin_return_address(0)
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif defined(__ICCARM__)
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__get_LR()
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif defined(__CC_ARM)
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__return_address()
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ epilogue code.
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          enabled to invoke system APIs.
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue(_saved_lr)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ handler function declaration.
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    @p id can be a function name or a vector number depending on the
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          port implementation.
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Fast IRQ handler function declaration.
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    @p id can be a function name or a vector number depending on the
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          port implementation.
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Performs a context switch between two threads.
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This is the most critical code in any port, this function
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          is responsible for the context switch between 2 threads.
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          switch performance so optimize here as much as you can.
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] ntp       the thread to be switched in
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] otp       the thread to be switched out
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define port_switch(ntp, otp) {                                             \
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     chSysHalt("stack overflow");                                            \
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   }                                                                         \
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   _port_switch(ntp, otp);                                                   \
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* External declarations.                                                    */
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** extern "C" {
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_irq_epilogue(regarm_t lr);
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_thread_start(void);
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_switch_from_isr(void);
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_exit_from_isr(void);
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module inline functions.                                                  */
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Port-related initialization code.
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_init(void) {
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Returns a word encoding the current interrupts status.
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The interrupts status.
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline syssts_t port_get_irq_status(void) {
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (syssts_t)__get_PRIMASK();
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Checks the interrupt status.
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] sts       the interrupt status word
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The interrupt status.
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval false        the word specified a disabled interrupts status.
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval true         the word specified an enabled interrupts status.
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline bool port_irq_enabled(syssts_t sts) {
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Determines the current execution context.
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The execution context.
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval false        not running in ISR mode.
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval true         running in ISR mode.
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline bool port_is_isr_context(void) {
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-lock action.
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function disables interrupts globally.
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_lock(void) {
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __disable_irq();
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-unlock action.
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function enables interrupts globally.
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_unlock(void) {
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __enable_irq();
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-lock action from an interrupt handler.
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function disables interrupts globally.
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    Same as @p port_lock() in this port.
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_lock_from_isr(void) {
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   port_lock();
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-unlock action from an interrupt handler.
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function enables interrupts globally.
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    Same as @p port_lock() in this port.
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_unlock_from_isr(void) {
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   port_unlock();
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Disables all the interrupt sources.
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_disable(void) {
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __disable_irq();
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Disables the interrupt sources below kernel-level priority.
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_suspend(void) {
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __disable_irq();
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Enables all the interrupt sources.
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_enable(void) {
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __enable_irq();
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Enters an architecture-dependent IRQ-waiting mode.
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details The function is meant to return when an interrupt becomes pending.
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          The simplest implementation is an empty function or macro but this
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          would not take advantage of architecture-specific power saving
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          modes.
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    Implemented as an inlined @p WFI instruction.
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_wait_for_interrupt(void) {
  40              		.loc 2 453 20 discriminator 1 view .LVU4
  41              	.LBB121:
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if CORTEX_ENABLE_WFI_IDLE == TRUE
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __WFI();
  42              		.loc 2 456 3 discriminator 1 view .LVU5
  43              		.syntax divided
  44              	@ 456 "./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h" 1
  45 0000 30BF     		wfi
  46              	@ 0 "" 2
  47              		.thumb
  48              		.syntax unified
  49 0002 FDE7     		b	.L2
  50              	.LBE121:
  51              	.LBE120:
  52              		.cfi_endproc
  53              	.LFE154:
  55              		.section	.text.chSysInit,"ax",%progbits
  56              		.align	1
  57              		.global	chSysInit
  58              		.syntax unified
  59              		.code	16
  60              		.thumb_func
  61              		.fpu softvfp
  63              	chSysInit:
  64              	.LFB155:
  80:lib/chibios/os/rt/src/chsys.c ****     /*lint -restore*/
  81:lib/chibios/os/rt/src/chsys.c ****     CH_CFG_IDLE_LOOP_HOOK();
  82:lib/chibios/os/rt/src/chsys.c ****   }
  83:lib/chibios/os/rt/src/chsys.c **** }
  84:lib/chibios/os/rt/src/chsys.c **** #endif /* CH_CFG_NO_IDLE_THREAD == FALSE */
  85:lib/chibios/os/rt/src/chsys.c **** 
  86:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  87:lib/chibios/os/rt/src/chsys.c **** /* Module exported functions.                                                */
  88:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  89:lib/chibios/os/rt/src/chsys.c **** 
  90:lib/chibios/os/rt/src/chsys.c **** /**
  91:lib/chibios/os/rt/src/chsys.c ****  * @brief   ChibiOS/RT initialization.
  92:lib/chibios/os/rt/src/chsys.c ****  * @details After executing this function the current instructions stream
  93:lib/chibios/os/rt/src/chsys.c ****  *          becomes the main thread.
  94:lib/chibios/os/rt/src/chsys.c ****  * @pre     Interrupts must disabled before invoking this function.
  95:lib/chibios/os/rt/src/chsys.c ****  * @post    The main thread is created with priority @p NORMALPRIO and
  96:lib/chibios/os/rt/src/chsys.c ****  *          interrupts are enabled.
  97:lib/chibios/os/rt/src/chsys.c ****  *
  98:lib/chibios/os/rt/src/chsys.c ****  * @special
  99:lib/chibios/os/rt/src/chsys.c ****  */
 100:lib/chibios/os/rt/src/chsys.c **** void chSysInit(void) {
  65              		.loc 1 100 22 view -0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
 101:lib/chibios/os/rt/src/chsys.c **** 
 102:lib/chibios/os/rt/src/chsys.c ****   _scheduler_init();
  69              		.loc 1 102 3 view .LVU7
 100:lib/chibios/os/rt/src/chsys.c **** 
  70              		.loc 1 100 22 is_stmt 0 view .LVU8
  71 0000 10B5     		push	{r4, lr}
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 4, -8
  74              		.cfi_offset 14, -4
  75              		.loc 1 102 3 view .LVU9
  76 0002 FFF7FEFF 		bl	_scheduler_init
  77              	.LVL1:
 103:lib/chibios/os/rt/src/chsys.c ****   _vt_init();
  78              		.loc 1 103 3 is_stmt 1 view .LVU10
  79 0006 FFF7FEFF 		bl	_vt_init
  80              	.LVL2:
 104:lib/chibios/os/rt/src/chsys.c ****   _trace_init();
  81              		.loc 1 104 16 view .LVU11
 105:lib/chibios/os/rt/src/chsys.c **** 
 106:lib/chibios/os/rt/src/chsys.c **** #if CH_DBG_SYSTEM_STATE_CHECK == TRUE
 107:lib/chibios/os/rt/src/chsys.c ****   ch.dbg.isr_cnt  = (cnt_t)0;
 108:lib/chibios/os/rt/src/chsys.c ****   ch.dbg.lock_cnt = (cnt_t)0;
 109:lib/chibios/os/rt/src/chsys.c **** #endif
 110:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_USE_TM == TRUE
 111:lib/chibios/os/rt/src/chsys.c ****   _tm_init();
 112:lib/chibios/os/rt/src/chsys.c **** #endif
 113:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_USE_MEMCORE == TRUE
 114:lib/chibios/os/rt/src/chsys.c ****   _core_init();
  82              		.loc 1 114 3 view .LVU12
  83 000a FFF7FEFF 		bl	_core_init
  84              	.LVL3:
 115:lib/chibios/os/rt/src/chsys.c **** #endif
 116:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_USE_HEAP == TRUE
 117:lib/chibios/os/rt/src/chsys.c ****   _heap_init();
 118:lib/chibios/os/rt/src/chsys.c **** #endif
 119:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_USE_FACTORY == TRUE
 120:lib/chibios/os/rt/src/chsys.c ****   _factory_init();
 121:lib/chibios/os/rt/src/chsys.c **** #endif
 122:lib/chibios/os/rt/src/chsys.c **** #if CH_DBG_STATISTICS == TRUE
 123:lib/chibios/os/rt/src/chsys.c ****   _stats_init();
 124:lib/chibios/os/rt/src/chsys.c **** #endif
 125:lib/chibios/os/rt/src/chsys.c **** 
 126:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_NO_IDLE_THREAD == FALSE
 127:lib/chibios/os/rt/src/chsys.c ****   /* Now this instructions flow becomes the main thread.*/
 128:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_USE_REGISTRY == TRUE
 129:lib/chibios/os/rt/src/chsys.c ****   currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  85              		.loc 1 129 3 view .LVU13
  86              		.loc 1 129 11 is_stmt 0 view .LVU14
  87 000e 8022     		movs	r2, #128
  88 0010 0849     		ldr	r1, .L4
  89 0012 0948     		ldr	r0, .L4+4
  90 0014 FFF7FEFF 		bl	_thread_init
  91              	.LVL4:
  92              		.loc 1 129 9 view .LVU15
  93 0018 084B     		ldr	r3, .L4+8
  94              	.LBB131:
  95              	.LBB132:
  96              	.LBB133:
  97              		.file 3 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * @file     core_cm0.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * @version  V5.0.5
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * @date     28. May 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined (__clang__)
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #include <stdint.h>
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef __cplusplus
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  extern "C" {
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*******************************************************************************
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *                 CMSIS definitions
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  ******************************************************************************/
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #include "cmsis_version.h"
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     This core does not support an FPU at all
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __FPU_USED       0U
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef __cplusplus
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef __cplusplus
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  extern "C" {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* check device defines and use defaults */
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef __cplusplus
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #else
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*******************************************************************************
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *                 Register Abstraction
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   Core Register contain:
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core Register
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core NVIC Register
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core SCB Register
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core SysTick Register
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  ******************************************************************************/
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef union
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   struct
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } APSR_Type;
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* APSR Register Definitions */
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef union
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   struct
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } IPSR_Type;
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef union
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   struct
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } xPSR_Type;
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef union
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   struct
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } CONTROL_Type;
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef struct
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }  NVIC_Type;
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef struct
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } SCB_Type;
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef struct
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } SysTick_Type;
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 496:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 497:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 499:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 500:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 501:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 505:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 506:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 507:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 508:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
 513:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 515:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 516:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
 521:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 523:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 525:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 526:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 527:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 531:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 532:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 533:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 539:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 543:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 544:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} */
 545:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 546:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 547:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 548:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*******************************************************************************
 549:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   Core Function Interface contains:
 551:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core NVIC Functions
 552:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core SysTick Functions
 553:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core Register Access Functions
 554:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  ******************************************************************************/
 555:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 556:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
 558:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 559:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 560:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 561:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 563:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 567:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 568:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 569:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 573:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #else
 575:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 589:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 593:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #else
 595:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 599:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 601:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 602:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 607:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 608:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 614:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 617:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 618:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 623:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 624:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 625:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 626:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 627:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 628:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 629:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 630:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 631:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 632:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 633:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 640:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 642:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 644:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 646:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   else
 647:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 648:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     return(0U);
 649:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 650:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 651:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 652:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 653:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 654:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 659:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 661:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 663:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     __DSB();
 665:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     __ISB();
 666:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 667:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 668:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 669:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 670:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 671:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 678:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 680:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 682:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 684:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   else
 685:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 686:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     return(0U);
 687:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 688:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 689:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 690:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 691:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 692:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 697:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 699:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 701:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 703:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 704:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 705:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 706:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 707:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 712:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 714:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 716:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 718:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 719:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 720:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 721:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 722:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 730:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 731:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 732:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 733:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 734:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 735:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 736:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 737:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   else
 738:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 739:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
  98              		.loc 3 739 52 view .LVU16
  99 001a 094A     		ldr	r2, .L4+12
 100              	.LBE133:
 101              	.LBE132:
 102              	.LBE131:
 103              		.loc 1 129 9 view .LVU17
 104 001c 9861     		str	r0, [r3, #24]
 130:lib/chibios/os/rt/src/chsys.c **** #else
 131:lib/chibios/os/rt/src/chsys.c ****   currp = _thread_init(&ch.mainthread, "main", NORMALPRIO);
 132:lib/chibios/os/rt/src/chsys.c **** #endif
 133:lib/chibios/os/rt/src/chsys.c **** #else
 134:lib/chibios/os/rt/src/chsys.c ****   /* Now this instructions flow becomes the idle thread.*/
 135:lib/chibios/os/rt/src/chsys.c ****   currp = _thread_init(&ch.mainthread, "idle", IDLEPRIO);
 136:lib/chibios/os/rt/src/chsys.c **** #endif
 137:lib/chibios/os/rt/src/chsys.c **** 
 138:lib/chibios/os/rt/src/chsys.c **** #if CH_DBG_ENABLE_STACK_CHECK == TRUE
 139:lib/chibios/os/rt/src/chsys.c ****   {
 140:lib/chibios/os/rt/src/chsys.c ****     /* Setting up the base address of the static main thread stack, the
 141:lib/chibios/os/rt/src/chsys.c ****        symbol must be provided externally.*/
 142:lib/chibios/os/rt/src/chsys.c ****     extern stkalign_t __main_thread_stack_base__;
 143:lib/chibios/os/rt/src/chsys.c ****     currp->wabase = &__main_thread_stack_base__;
 144:lib/chibios/os/rt/src/chsys.c ****   }
 145:lib/chibios/os/rt/src/chsys.c **** #elif CH_CFG_USE_DYNAMIC == TRUE
 146:lib/chibios/os/rt/src/chsys.c ****   currp->wabase = NULL;
 147:lib/chibios/os/rt/src/chsys.c **** #endif
 148:lib/chibios/os/rt/src/chsys.c **** 
 149:lib/chibios/os/rt/src/chsys.c ****   /* Setting up the caller as current thread.*/
 150:lib/chibios/os/rt/src/chsys.c ****   currp->state = CH_STATE_CURRENT;
 105              		.loc 1 150 3 is_stmt 1 view .LVU18
 106              		.loc 1 150 16 is_stmt 0 view .LVU19
 107 001e 0123     		movs	r3, #1
 108 0020 0377     		strb	r3, [r0, #28]
 151:lib/chibios/os/rt/src/chsys.c **** 
 152:lib/chibios/os/rt/src/chsys.c ****   /* Port layer initialization last because it depend on some of the
 153:lib/chibios/os/rt/src/chsys.c ****      initializations performed before.*/
 154:lib/chibios/os/rt/src/chsys.c ****   port_init();
 109              		.loc 1 154 3 is_stmt 1 view .LVU20
 110              	.LBB136:
 111              	.LBI131:
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 112              		.loc 2 342 20 view .LVU21
 113              	.LBE136:
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 114              		.loc 2 344 3 view .LVU22
 115              	.LBB137:
 116              	.LBB135:
 117              	.LBI132:
 730:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 118              		.loc 3 730 22 view .LVU23
 119              	.LVL5:
 120              	.LBB134:
 732:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 121              		.loc 3 732 3 view .LVU24
 122              		.loc 3 739 5 view .LVU25
 123              		.loc 3 739 52 is_stmt 0 view .LVU26
 124 0022 136A     		ldr	r3, [r2, #32]
 125              		.loc 3 739 33 view .LVU27
 126 0024 0749     		ldr	r1, .L4+16
 127 0026 0B40     		ands	r3, r1
 128              		.loc 3 739 30 view .LVU28
 129 0028 1362     		str	r3, [r2, #32]
 130              	.LVL6:
 131              		.loc 3 739 30 view .LVU29
 132              	.LBE134:
 133              	.LBE135:
 134              	.LBE137:
 155:lib/chibios/os/rt/src/chsys.c **** 
 156:lib/chibios/os/rt/src/chsys.c **** #if CH_DBG_STATISTICS == TRUE
 157:lib/chibios/os/rt/src/chsys.c ****   /* Starting measurement for this thread.*/
 158:lib/chibios/os/rt/src/chsys.c ****   chTMStartMeasurementX(&currp->stats);
 159:lib/chibios/os/rt/src/chsys.c **** #endif
 160:lib/chibios/os/rt/src/chsys.c **** 
 161:lib/chibios/os/rt/src/chsys.c ****   /* Initialization hook.*/
 162:lib/chibios/os/rt/src/chsys.c ****   CH_CFG_SYSTEM_INIT_HOOK();
 135              		.loc 1 162 3 is_stmt 1 view .LVU30
 136              		.loc 1 162 28 view .LVU31
 163:lib/chibios/os/rt/src/chsys.c **** 
 164:lib/chibios/os/rt/src/chsys.c ****   /* It is alive now.*/
 165:lib/chibios/os/rt/src/chsys.c ****   chSysEnable();
 137              		.loc 1 165 3 view .LVU32
 138              	.LBB138:
 139              	.LBI138:
 140              		.file 4 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  */
  66:./lib/chibios/os/rt/include/chsys.h **** /**
  67:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:./lib/chibios/os/rt/include/chsys.h ****  *
  71:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  73:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  75:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:./lib/chibios/os/rt/include/chsys.h ****  */
  77:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:./lib/chibios/os/rt/include/chsys.h **** #else
  81:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:./lib/chibios/os/rt/include/chsys.h **** #endif
  83:./lib/chibios/os/rt/include/chsys.h **** 
  84:./lib/chibios/os/rt/include/chsys.h **** /**
  85:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:./lib/chibios/os/rt/include/chsys.h ****  *
  89:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  91:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  93:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:./lib/chibios/os/rt/include/chsys.h ****  */
  95:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:./lib/chibios/os/rt/include/chsys.h **** #else
  99:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:./lib/chibios/os/rt/include/chsys.h **** #endif
 101:./lib/chibios/os/rt/include/chsys.h **** 
 102:./lib/chibios/os/rt/include/chsys.h **** /**
 103:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:./lib/chibios/os/rt/include/chsys.h ****  *
 107:./lib/chibios/os/rt/include/chsys.h ****  * @special
 108:./lib/chibios/os/rt/include/chsys.h ****  */
 109:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:./lib/chibios/os/rt/include/chsys.h **** 
 116:./lib/chibios/os/rt/include/chsys.h **** /**
 117:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:./lib/chibios/os/rt/include/chsys.h ****  *
 122:./lib/chibios/os/rt/include/chsys.h ****  * @special
 123:./lib/chibios/os/rt/include/chsys.h ****  */
 124:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:./lib/chibios/os/rt/include/chsys.h **** 
 130:./lib/chibios/os/rt/include/chsys.h **** /**
 131:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 134:./lib/chibios/os/rt/include/chsys.h ****  *
 135:./lib/chibios/os/rt/include/chsys.h ****  * @special
 136:./lib/chibios/os/rt/include/chsys.h ****  */
 137:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 139:./lib/chibios/os/rt/include/chsys.h **** 
 140:./lib/chibios/os/rt/include/chsys.h **** /**
 141:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:./lib/chibios/os/rt/include/chsys.h ****  */
 143:./lib/chibios/os/rt/include/chsys.h **** /**
 144:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:./lib/chibios/os/rt/include/chsys.h ****  *
 149:./lib/chibios/os/rt/include/chsys.h ****  * @special
 150:./lib/chibios/os/rt/include/chsys.h ****  */
 151:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 153:./lib/chibios/os/rt/include/chsys.h **** 
 154:./lib/chibios/os/rt/include/chsys.h **** /**
 155:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:./lib/chibios/os/rt/include/chsys.h ****  * @{
 157:./lib/chibios/os/rt/include/chsys.h ****  */
 158:./lib/chibios/os/rt/include/chsys.h **** /**
 159:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:./lib/chibios/os/rt/include/chsys.h ****  *
 163:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:./lib/chibios/os/rt/include/chsys.h ****  *
 167:./lib/chibios/os/rt/include/chsys.h ****  * @api
 168:./lib/chibios/os/rt/include/chsys.h ****  */
 169:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:./lib/chibios/os/rt/include/chsys.h **** 
 171:./lib/chibios/os/rt/include/chsys.h **** /**
 172:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:./lib/chibios/os/rt/include/chsys.h ****  *
 177:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:./lib/chibios/os/rt/include/chsys.h ****  *
 181:./lib/chibios/os/rt/include/chsys.h ****  * @api
 182:./lib/chibios/os/rt/include/chsys.h ****  */
 183:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:./lib/chibios/os/rt/include/chsys.h **** 
 185:./lib/chibios/os/rt/include/chsys.h **** /**
 186:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:./lib/chibios/os/rt/include/chsys.h ****  *
 191:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:./lib/chibios/os/rt/include/chsys.h ****  *
 195:./lib/chibios/os/rt/include/chsys.h ****  * @api
 196:./lib/chibios/os/rt/include/chsys.h ****  */
 197:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:./lib/chibios/os/rt/include/chsys.h **** 
 199:./lib/chibios/os/rt/include/chsys.h **** /**
 200:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:./lib/chibios/os/rt/include/chsys.h ****  *
 205:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:./lib/chibios/os/rt/include/chsys.h ****  *
 209:./lib/chibios/os/rt/include/chsys.h ****  * @api
 210:./lib/chibios/os/rt/include/chsys.h ****  */
 211:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:./lib/chibios/os/rt/include/chsys.h **** 
 213:./lib/chibios/os/rt/include/chsys.h **** /**
 214:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:./lib/chibios/os/rt/include/chsys.h ****  *
 219:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:./lib/chibios/os/rt/include/chsys.h ****  *
 223:./lib/chibios/os/rt/include/chsys.h ****  * @api
 224:./lib/chibios/os/rt/include/chsys.h ****  */
 225:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:./lib/chibios/os/rt/include/chsys.h **** 
 227:./lib/chibios/os/rt/include/chsys.h **** /**
 228:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:./lib/chibios/os/rt/include/chsys.h ****  *
 233:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:./lib/chibios/os/rt/include/chsys.h ****  *
 237:./lib/chibios/os/rt/include/chsys.h ****  * @api
 238:./lib/chibios/os/rt/include/chsys.h ****  */
 239:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 241:./lib/chibios/os/rt/include/chsys.h **** 
 242:./lib/chibios/os/rt/include/chsys.h **** /**
 243:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:./lib/chibios/os/rt/include/chsys.h ****  *
 247:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:./lib/chibios/os/rt/include/chsys.h ****  *
 250:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 251:./lib/chibios/os/rt/include/chsys.h ****  */
 252:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:./lib/chibios/os/rt/include/chsys.h **** #endif
 255:./lib/chibios/os/rt/include/chsys.h **** 
 256:./lib/chibios/os/rt/include/chsys.h **** /**
 257:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:./lib/chibios/os/rt/include/chsys.h ****  *
 261:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:./lib/chibios/os/rt/include/chsys.h ****  *
 264:./lib/chibios/os/rt/include/chsys.h ****  * @special
 265:./lib/chibios/os/rt/include/chsys.h ****  */
 266:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 268:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:./lib/chibios/os/rt/include/chsys.h **** }
 273:./lib/chibios/os/rt/include/chsys.h **** 
 274:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 275:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** 
 278:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:./lib/chibios/os/rt/include/chsys.h **** #endif
 281:./lib/chibios/os/rt/include/chsys.h **** 
 282:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 283:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 284:./lib/chibios/os/rt/include/chsys.h **** #endif
 285:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 286:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:./lib/chibios/os/rt/include/chsys.h **** #endif
 294:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 295:./lib/chibios/os/rt/include/chsys.h **** }
 296:./lib/chibios/os/rt/include/chsys.h **** #endif
 297:./lib/chibios/os/rt/include/chsys.h **** 
 298:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 299:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** 
 302:./lib/chibios/os/rt/include/chsys.h **** /**
 303:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:./lib/chibios/os/rt/include/chsys.h ****  *
 308:./lib/chibios/os/rt/include/chsys.h ****  * @special
 309:./lib/chibios/os/rt/include/chsys.h ****  */
 310:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:./lib/chibios/os/rt/include/chsys.h **** 
 312:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 313:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 314:./lib/chibios/os/rt/include/chsys.h **** }
 315:./lib/chibios/os/rt/include/chsys.h **** 
 316:./lib/chibios/os/rt/include/chsys.h **** /**
 317:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 321:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:./lib/chibios/os/rt/include/chsys.h ****  *
 325:./lib/chibios/os/rt/include/chsys.h ****  * @special
 326:./lib/chibios/os/rt/include/chsys.h ****  */
 327:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:./lib/chibios/os/rt/include/chsys.h **** 
 329:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 330:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:./lib/chibios/os/rt/include/chsys.h **** }
 332:./lib/chibios/os/rt/include/chsys.h **** 
 333:./lib/chibios/os/rt/include/chsys.h **** /**
 334:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:./lib/chibios/os/rt/include/chsys.h ****  *
 340:./lib/chibios/os/rt/include/chsys.h ****  * @special
 341:./lib/chibios/os/rt/include/chsys.h ****  */
 342:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 141              		.loc 4 342 20 view .LVU33
 142              	.LBE138:
 343:./lib/chibios/os/rt/include/chsys.h **** 
 344:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 143              		.loc 4 344 22 view .LVU34
 345:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 144              		.loc 4 345 3 view .LVU35
 145              	.LBB143:
 146              	.LBB139:
 147              	.LBI139:
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 148              		.loc 2 440 20 view .LVU36
 149              	.LBE139:
 150              	.LBE143:
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 151              		.loc 2 442 3 view .LVU37
 152              	.LBB144:
 153              	.LBB142:
 154              	.LBB140:
 155              	.LBI140:
 156              		.file 5 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 157              		.loc 5 129 27 view .LVU38
 158              	.LBB141:
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 159              		.loc 5 131 3 view .LVU39
 160              		.syntax divided
 161              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 162 002a 62B6     		cpsie i
 163              	@ 0 "" 2
 164              		.thumb
 165              		.syntax unified
 166              	.LBE141:
 167              	.LBE140:
 168              	.LBE142:
 169              	.LBE144:
 170              	.LBB145:
 166:lib/chibios/os/rt/src/chsys.c **** 
 167:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_NO_IDLE_THREAD == FALSE
 168:lib/chibios/os/rt/src/chsys.c ****   {
 169:lib/chibios/os/rt/src/chsys.c ****     static const thread_descriptor_t idle_descriptor = {
 171              		.loc 1 169 5 view .LVU40
 170:lib/chibios/os/rt/src/chsys.c ****       "idle",
 171:lib/chibios/os/rt/src/chsys.c ****       THD_WORKING_AREA_BASE(ch_idle_thread_wa),
 172:lib/chibios/os/rt/src/chsys.c ****       THD_WORKING_AREA_END(ch_idle_thread_wa),
 173:lib/chibios/os/rt/src/chsys.c ****       IDLEPRIO,
 174:lib/chibios/os/rt/src/chsys.c ****       _idle_thread,
 175:lib/chibios/os/rt/src/chsys.c ****       NULL
 176:lib/chibios/os/rt/src/chsys.c ****     };
 177:lib/chibios/os/rt/src/chsys.c **** 
 178:lib/chibios/os/rt/src/chsys.c ****     /* This thread has the lowest priority in the system, its role is just to
 179:lib/chibios/os/rt/src/chsys.c ****        serve interrupts in its context while keeping the lowest energy saving
 180:lib/chibios/os/rt/src/chsys.c ****        mode compatible with the system status.*/
 181:lib/chibios/os/rt/src/chsys.c ****     (void) chThdCreate(&idle_descriptor);
 172              		.loc 1 181 5 view .LVU41
 173              		.loc 1 181 12 is_stmt 0 view .LVU42
 174 002c 0648     		ldr	r0, .L4+20
 175 002e FFF7FEFF 		bl	chThdCreate
 176              	.LVL7:
 177              	.LBE145:
 182:lib/chibios/os/rt/src/chsys.c ****   }
 183:lib/chibios/os/rt/src/chsys.c **** #endif
 184:lib/chibios/os/rt/src/chsys.c **** }
 178              		.loc 1 184 1 view .LVU43
 179              		@ sp needed
 180 0032 10BD     		pop	{r4, pc}
 181              	.L5:
 182              		.align	2
 183              	.L4:
 184 0034 00000000 		.word	ch_debug
 185 0038 30000000 		.word	ch+48
 186 003c 00000000 		.word	ch
 187 0040 00ED00E0 		.word	-536810240
 188 0044 FFFF00FF 		.word	-16711681
 189 0048 00000000 		.word	.LANCHOR0
 190              		.cfi_endproc
 191              	.LFE155:
 193              		.section	.text.chSysHalt,"ax",%progbits
 194              		.align	1
 195              		.global	chSysHalt
 196              		.syntax unified
 197              		.code	16
 198              		.thumb_func
 199              		.fpu softvfp
 201              	chSysHalt:
 202              	.LVL8:
 203              	.LFB156:
 185:lib/chibios/os/rt/src/chsys.c **** 
 186:lib/chibios/os/rt/src/chsys.c **** /**
 187:lib/chibios/os/rt/src/chsys.c ****  * @brief   Halts the system.
 188:lib/chibios/os/rt/src/chsys.c ****  * @details This function is invoked by the operating system when an
 189:lib/chibios/os/rt/src/chsys.c ****  *          unrecoverable error is detected, for example because a programming
 190:lib/chibios/os/rt/src/chsys.c ****  *          error in the application code that triggers an assertion while
 191:lib/chibios/os/rt/src/chsys.c ****  *          in debug mode.
 192:lib/chibios/os/rt/src/chsys.c ****  * @note    Can be invoked from any system state.
 193:lib/chibios/os/rt/src/chsys.c ****  *
 194:lib/chibios/os/rt/src/chsys.c ****  * @param[in] reason        pointer to an error string
 195:lib/chibios/os/rt/src/chsys.c ****  *
 196:lib/chibios/os/rt/src/chsys.c ****  * @special
 197:lib/chibios/os/rt/src/chsys.c ****  */
 198:lib/chibios/os/rt/src/chsys.c **** void chSysHalt(const char *reason) {
 204              		.loc 1 198 36 is_stmt 1 view -0
 205              		.cfi_startproc
 206              		@ Volatile: function does not return.
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              		@ link register save eliminated.
 199:lib/chibios/os/rt/src/chsys.c **** 
 200:lib/chibios/os/rt/src/chsys.c ****   port_disable();
 210              		.loc 1 200 3 view .LVU45
 211              	.LBB146:
 212              	.LBI146:
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 213              		.loc 2 424 20 view .LVU46
 214              	.LBE146:
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 215              		.loc 2 426 3 view .LVU47
 216              	.LBB149:
 217              	.LBB147:
 218              	.LBI147:
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 219              		.loc 5 140 27 view .LVU48
 220              	.LBB148:
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 221              		.loc 5 142 3 view .LVU49
 222              		.syntax divided
 223              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 224 0000 72B6     		cpsid i
 225              	@ 0 "" 2
 226              		.thumb
 227              		.syntax unified
 228              	.LBE148:
 229              	.LBE147:
 230              	.LBE149:
 201:lib/chibios/os/rt/src/chsys.c **** 
 202:lib/chibios/os/rt/src/chsys.c ****   /* Logging the event.*/
 203:lib/chibios/os/rt/src/chsys.c ****   _trace_halt(reason);
 231              		.loc 1 203 22 view .LVU50
 204:lib/chibios/os/rt/src/chsys.c **** 
 205:lib/chibios/os/rt/src/chsys.c ****   /* Pointing to the passed message.*/
 206:lib/chibios/os/rt/src/chsys.c ****   ch.dbg.panic_msg = reason;
 232              		.loc 1 206 3 view .LVU51
 233              		.loc 1 206 20 is_stmt 0 view .LVU52
 234 0002 014B     		ldr	r3, .L8
 235 0004 D862     		str	r0, [r3, #44]
 236              	.L7:
 207:lib/chibios/os/rt/src/chsys.c **** 
 208:lib/chibios/os/rt/src/chsys.c ****   /* Halt hook code, usually empty.*/
 209:lib/chibios/os/rt/src/chsys.c ****   CH_CFG_SYSTEM_HALT_HOOK(reason);
 237              		.loc 1 209 3 is_stmt 1 discriminator 1 view .LVU53
 238              		.loc 1 209 34 discriminator 1 view .LVU54
 210:lib/chibios/os/rt/src/chsys.c **** 
 211:lib/chibios/os/rt/src/chsys.c ****   /* Harmless infinite loop.*/
 212:lib/chibios/os/rt/src/chsys.c ****   while (true) {
 239              		.loc 1 212 3 discriminator 1 view .LVU55
 213:lib/chibios/os/rt/src/chsys.c ****   }
 240              		.loc 1 213 3 discriminator 1 view .LVU56
 241 0006 FEE7     		b	.L7
 242              	.L9:
 243              		.align	2
 244              	.L8:
 245 0008 00000000 		.word	ch
 246              		.cfi_endproc
 247              	.LFE156:
 249              		.section	.text.chSysIntegrityCheckI,"ax",%progbits
 250              		.align	1
 251              		.global	chSysIntegrityCheckI
 252              		.syntax unified
 253              		.code	16
 254              		.thumb_func
 255              		.fpu softvfp
 257              	chSysIntegrityCheckI:
 258              	.LVL9:
 259              	.LFB157:
 214:lib/chibios/os/rt/src/chsys.c **** }
 215:lib/chibios/os/rt/src/chsys.c **** 
 216:lib/chibios/os/rt/src/chsys.c **** /**
 217:lib/chibios/os/rt/src/chsys.c ****  * @brief   System integrity check.
 218:lib/chibios/os/rt/src/chsys.c ****  * @details Performs an integrity check of the important ChibiOS/RT data
 219:lib/chibios/os/rt/src/chsys.c ****  *          structures.
 220:lib/chibios/os/rt/src/chsys.c ****  * @note    The appropriate action in case of failure is to halt the system
 221:lib/chibios/os/rt/src/chsys.c ****  *          before releasing the critical zone.
 222:lib/chibios/os/rt/src/chsys.c ****  * @note    If the system is corrupted then one possible outcome of this
 223:lib/chibios/os/rt/src/chsys.c ****  *          function is an exception caused by @p NULL or corrupted pointers
 224:lib/chibios/os/rt/src/chsys.c ****  *          in list elements. Exception vectors must be monitored as well.
 225:lib/chibios/os/rt/src/chsys.c ****  * @note    This function is not used internally, it is up to the
 226:lib/chibios/os/rt/src/chsys.c ****  *          application to define if and where to perform system
 227:lib/chibios/os/rt/src/chsys.c ****  *          checking.
 228:lib/chibios/os/rt/src/chsys.c ****  * @note    Performing all tests at once can be a slow operation and can
 229:lib/chibios/os/rt/src/chsys.c ****  *          degrade the system response time. It is suggested to execute
 230:lib/chibios/os/rt/src/chsys.c ****  *          one test at time and release the critical zone in between tests.
 231:lib/chibios/os/rt/src/chsys.c ****  *
 232:lib/chibios/os/rt/src/chsys.c ****  * @param[in] testmask  Each bit in this mask is associated to a test to be
 233:lib/chibios/os/rt/src/chsys.c ****  *                      performed.
 234:lib/chibios/os/rt/src/chsys.c ****  * @return              The test result.
 235:lib/chibios/os/rt/src/chsys.c ****  * @retval false        The test succeeded.
 236:lib/chibios/os/rt/src/chsys.c ****  * @retval true         Test failed.
 237:lib/chibios/os/rt/src/chsys.c ****  *
 238:lib/chibios/os/rt/src/chsys.c ****  * @iclass
 239:lib/chibios/os/rt/src/chsys.c ****  */
 240:lib/chibios/os/rt/src/chsys.c **** bool chSysIntegrityCheckI(unsigned testmask) {
 260              		.loc 1 240 46 view -0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 241:lib/chibios/os/rt/src/chsys.c ****   cnt_t n;
 264              		.loc 1 241 3 view .LVU58
 242:lib/chibios/os/rt/src/chsys.c **** 
 243:lib/chibios/os/rt/src/chsys.c ****   chDbgCheckClassI();
 265              		.loc 1 243 21 view .LVU59
 244:lib/chibios/os/rt/src/chsys.c **** 
 245:lib/chibios/os/rt/src/chsys.c ****   /* Ready List integrity check.*/
 246:lib/chibios/os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 266              		.loc 1 246 3 view .LVU60
 240:lib/chibios/os/rt/src/chsys.c ****   cnt_t n;
 267              		.loc 1 240 46 is_stmt 0 view .LVU61
 268 0000 10B5     		push	{r4, lr}
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 4, -8
 271              		.cfi_offset 14, -4
 240:lib/chibios/os/rt/src/chsys.c ****   cnt_t n;
 272              		.loc 1 240 46 view .LVU62
 273 0002 0100     		movs	r1, r0
 274              		.loc 1 246 6 view .LVU63
 275 0004 C307     		lsls	r3, r0, #31
 276 0006 0AD5     		bpl	.L11
 277              	.LBB150:
 247:lib/chibios/os/rt/src/chsys.c ****     thread_t *tp;
 278              		.loc 1 247 5 is_stmt 1 view .LVU64
 248:lib/chibios/os/rt/src/chsys.c **** 
 249:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the ready list forward.*/
 250:lib/chibios/os/rt/src/chsys.c ****     n = (cnt_t)0;
 279              		.loc 1 250 5 view .LVU65
 280              	.LVL10:
 251:lib/chibios/os/rt/src/chsys.c ****     tp = ch.rlist.queue.next;
 281              		.loc 1 251 5 view .LVU66
 250:lib/chibios/os/rt/src/chsys.c ****     tp = ch.rlist.queue.next;
 282              		.loc 1 250 7 is_stmt 0 view .LVU67
 283 0008 0023     		movs	r3, #0
 284              		.loc 1 251 8 view .LVU68
 285 000a 1C4A     		ldr	r2, .L36
 286 000c 1068     		ldr	r0, [r2]
 287              	.LVL11:
 252:lib/chibios/os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist.queue) {
 288              		.loc 1 252 5 is_stmt 1 view .LVU69
 289              	.L12:
 290              		.loc 1 252 11 is_stmt 0 view .LVU70
 291 000e 9042     		cmp	r0, r2
 292 0010 21D1     		bne	.L13
 253:lib/chibios/os/rt/src/chsys.c ****       n++;
 254:lib/chibios/os/rt/src/chsys.c ****       tp = tp->queue.next;
 255:lib/chibios/os/rt/src/chsys.c ****     }
 256:lib/chibios/os/rt/src/chsys.c **** 
 257:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the ready list backward.*/
 258:lib/chibios/os/rt/src/chsys.c ****     tp = ch.rlist.queue.prev;
 293              		.loc 1 258 5 is_stmt 1 view .LVU71
 294              		.loc 1 258 8 is_stmt 0 view .LVU72
 295 0012 5068     		ldr	r0, [r2, #4]
 296              	.LVL12:
 259:lib/chibios/os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist.queue) {
 297              		.loc 1 259 5 is_stmt 1 view .LVU73
 298              	.L14:
 299              		.loc 1 259 11 is_stmt 0 view .LVU74
 300 0014 9042     		cmp	r0, r2
 301 0016 21D1     		bne	.L15
 260:lib/chibios/os/rt/src/chsys.c ****       n--;
 261:lib/chibios/os/rt/src/chsys.c ****       tp = tp->queue.prev;
 262:lib/chibios/os/rt/src/chsys.c ****     }
 263:lib/chibios/os/rt/src/chsys.c **** 
 264:lib/chibios/os/rt/src/chsys.c ****     /* The number of elements must match.*/
 265:lib/chibios/os/rt/src/chsys.c ****     if (n != (cnt_t)0) {
 302              		.loc 1 265 5 is_stmt 1 view .LVU75
 266:lib/chibios/os/rt/src/chsys.c ****       return true;
 303              		.loc 1 266 14 is_stmt 0 view .LVU76
 304 0018 0120     		movs	r0, #1
 305              	.LVL13:
 265:lib/chibios/os/rt/src/chsys.c ****       return true;
 306              		.loc 1 265 8 view .LVU77
 307 001a 002B     		cmp	r3, #0
 308 001c 1AD1     		bne	.L16
 309              	.LVL14:
 310              	.L11:
 265:lib/chibios/os/rt/src/chsys.c ****       return true;
 311              		.loc 1 265 8 view .LVU78
 312              	.LBE150:
 267:lib/chibios/os/rt/src/chsys.c ****     }
 268:lib/chibios/os/rt/src/chsys.c ****   }
 269:lib/chibios/os/rt/src/chsys.c **** 
 270:lib/chibios/os/rt/src/chsys.c ****   /* Timers list integrity check.*/
 271:lib/chibios/os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 313              		.loc 1 271 3 is_stmt 1 view .LVU79
 314              		.loc 1 271 6 is_stmt 0 view .LVU80
 315 001e 8B07     		lsls	r3, r1, #30
 316 0020 0BD5     		bpl	.L17
 317              	.LBB151:
 272:lib/chibios/os/rt/src/chsys.c ****     virtual_timer_t * vtp;
 318              		.loc 1 272 5 is_stmt 1 view .LVU81
 273:lib/chibios/os/rt/src/chsys.c **** 
 274:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the timers list forward.*/
 275:lib/chibios/os/rt/src/chsys.c ****     n = (cnt_t)0;
 319              		.loc 1 275 5 view .LVU82
 320              	.LVL15:
 276:lib/chibios/os/rt/src/chsys.c ****     vtp = ch.vtlist.next;
 321              		.loc 1 276 5 view .LVU83
 275:lib/chibios/os/rt/src/chsys.c ****     vtp = ch.vtlist.next;
 322              		.loc 1 275 7 is_stmt 0 view .LVU84
 323 0022 0023     		movs	r3, #0
 324              		.loc 1 276 9 view .LVU85
 325 0024 154C     		ldr	r4, .L36
 277:lib/chibios/os/rt/src/chsys.c ****     while (vtp != (virtual_timer_t *)&ch.vtlist) {
 326              		.loc 1 277 11 view .LVU86
 327 0026 1648     		ldr	r0, .L36+4
 276:lib/chibios/os/rt/src/chsys.c ****     vtp = ch.vtlist.next;
 328              		.loc 1 276 9 view .LVU87
 329 0028 E269     		ldr	r2, [r4, #28]
 330              	.LVL16:
 331              		.loc 1 277 5 is_stmt 1 view .LVU88
 332              	.L18:
 333              		.loc 1 277 11 is_stmt 0 view .LVU89
 334 002a 8242     		cmp	r2, r0
 335 002c 19D1     		bne	.L19
 278:lib/chibios/os/rt/src/chsys.c ****       n++;
 279:lib/chibios/os/rt/src/chsys.c ****       vtp = vtp->next;
 280:lib/chibios/os/rt/src/chsys.c ****     }
 281:lib/chibios/os/rt/src/chsys.c **** 
 282:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the timers list backward.*/
 283:lib/chibios/os/rt/src/chsys.c ****     vtp = ch.vtlist.prev;
 336              		.loc 1 283 5 is_stmt 1 view .LVU90
 337              		.loc 1 283 9 is_stmt 0 view .LVU91
 338 002e 226A     		ldr	r2, [r4, #32]
 339              	.LVL17:
 284:lib/chibios/os/rt/src/chsys.c ****     while (vtp != (virtual_timer_t *)&ch.vtlist) {
 340              		.loc 1 284 5 is_stmt 1 view .LVU92
 341              	.L20:
 342              		.loc 1 284 11 is_stmt 0 view .LVU93
 343 0030 8242     		cmp	r2, r0
 344 0032 19D1     		bne	.L21
 285:lib/chibios/os/rt/src/chsys.c ****       n--;
 286:lib/chibios/os/rt/src/chsys.c ****       vtp = vtp->prev;
 287:lib/chibios/os/rt/src/chsys.c ****     }
 288:lib/chibios/os/rt/src/chsys.c **** 
 289:lib/chibios/os/rt/src/chsys.c ****     /* The number of elements must match.*/
 290:lib/chibios/os/rt/src/chsys.c ****     if (n != (cnt_t)0) {
 345              		.loc 1 290 5 is_stmt 1 view .LVU94
 346              	.LBE151:
 347              	.LBB152:
 266:lib/chibios/os/rt/src/chsys.c ****     }
 348              		.loc 1 266 14 is_stmt 0 view .LVU95
 349 0034 0120     		movs	r0, #1
 350              	.LBE152:
 351              	.LBB153:
 352              		.loc 1 290 8 view .LVU96
 353 0036 002B     		cmp	r3, #0
 354 0038 0CD1     		bne	.L16
 355              	.LVL18:
 356              	.L17:
 357              		.loc 1 290 8 view .LVU97
 358              	.LBE153:
 291:lib/chibios/os/rt/src/chsys.c ****       return true;
 292:lib/chibios/os/rt/src/chsys.c ****     }
 293:lib/chibios/os/rt/src/chsys.c ****   }
 294:lib/chibios/os/rt/src/chsys.c **** 
 295:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_USE_REGISTRY == TRUE
 296:lib/chibios/os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 359              		.loc 1 296 3 is_stmt 1 view .LVU98
 297:lib/chibios/os/rt/src/chsys.c ****     thread_t *tp;
 298:lib/chibios/os/rt/src/chsys.c **** 
 299:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the ready list forward.*/
 300:lib/chibios/os/rt/src/chsys.c ****     n = (cnt_t)0;
 301:lib/chibios/os/rt/src/chsys.c ****     tp = ch.rlist.newer;
 302:lib/chibios/os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 303:lib/chibios/os/rt/src/chsys.c ****       n++;
 304:lib/chibios/os/rt/src/chsys.c ****       tp = tp->newer;
 305:lib/chibios/os/rt/src/chsys.c ****     }
 306:lib/chibios/os/rt/src/chsys.c **** 
 307:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the ready list backward.*/
 308:lib/chibios/os/rt/src/chsys.c ****     tp = ch.rlist.older;
 309:lib/chibios/os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 310:lib/chibios/os/rt/src/chsys.c ****       n--;
 311:lib/chibios/os/rt/src/chsys.c ****       tp = tp->older;
 312:lib/chibios/os/rt/src/chsys.c ****     }
 313:lib/chibios/os/rt/src/chsys.c **** 
 314:lib/chibios/os/rt/src/chsys.c ****     /* The number of elements must match.*/
 315:lib/chibios/os/rt/src/chsys.c ****     if (n != (cnt_t)0) {
 316:lib/chibios/os/rt/src/chsys.c ****       return true;
 317:lib/chibios/os/rt/src/chsys.c ****     }
 318:lib/chibios/os/rt/src/chsys.c ****   }
 319:lib/chibios/os/rt/src/chsys.c **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 320:lib/chibios/os/rt/src/chsys.c **** 
 321:lib/chibios/os/rt/src/chsys.c **** #if defined(PORT_INTEGRITY_CHECK)
 322:lib/chibios/os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_PORT) != 0U) {
 323:lib/chibios/os/rt/src/chsys.c ****     PORT_INTEGRITY_CHECK();
 324:lib/chibios/os/rt/src/chsys.c ****   }
 325:lib/chibios/os/rt/src/chsys.c **** #endif
 326:lib/chibios/os/rt/src/chsys.c **** 
 327:lib/chibios/os/rt/src/chsys.c ****   return false;
 360              		.loc 1 327 10 is_stmt 0 view .LVU99
 361 003a 0020     		movs	r0, #0
 296:lib/chibios/os/rt/src/chsys.c ****     thread_t *tp;
 362              		.loc 1 296 6 view .LVU100
 363 003c 4B07     		lsls	r3, r1, #29
 364 003e 09D5     		bpl	.L16
 365              	.LBB154:
 297:lib/chibios/os/rt/src/chsys.c ****     thread_t *tp;
 366              		.loc 1 297 5 is_stmt 1 view .LVU101
 300:lib/chibios/os/rt/src/chsys.c ****     tp = ch.rlist.newer;
 367              		.loc 1 300 5 view .LVU102
 368              	.LVL19:
 301:lib/chibios/os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 369              		.loc 1 301 5 view .LVU103
 301:lib/chibios/os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 370              		.loc 1 301 8 is_stmt 0 view .LVU104
 371 0040 0E4B     		ldr	r3, .L36
 372 0042 1A69     		ldr	r2, [r3, #16]
 373              	.LVL20:
 302:lib/chibios/os/rt/src/chsys.c ****       n++;
 374              		.loc 1 302 5 is_stmt 1 view .LVU105
 375              	.L22:
 302:lib/chibios/os/rt/src/chsys.c ****       n++;
 376              		.loc 1 302 11 is_stmt 0 view .LVU106
 377 0044 9A42     		cmp	r2, r3
 378 0046 12D1     		bne	.L23
 308:lib/chibios/os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 379              		.loc 1 308 5 is_stmt 1 view .LVU107
 308:lib/chibios/os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 380              		.loc 1 308 8 is_stmt 0 view .LVU108
 381 0048 5A69     		ldr	r2, [r3, #20]
 382              	.LVL21:
 309:lib/chibios/os/rt/src/chsys.c ****       n--;
 383              		.loc 1 309 5 is_stmt 1 view .LVU109
 384              	.L24:
 309:lib/chibios/os/rt/src/chsys.c ****       n--;
 385              		.loc 1 309 11 is_stmt 0 view .LVU110
 386 004a 9A42     		cmp	r2, r3
 387 004c 12D1     		bne	.L25
 315:lib/chibios/os/rt/src/chsys.c ****       return true;
 388              		.loc 1 315 5 is_stmt 1 view .LVU111
 315:lib/chibios/os/rt/src/chsys.c ****       return true;
 389              		.loc 1 315 8 is_stmt 0 view .LVU112
 390 004e 431E     		subs	r3, r0, #1
 391 0050 9841     		sbcs	r0, r0, r3
 392              	.LVL22:
 315:lib/chibios/os/rt/src/chsys.c ****       return true;
 393              		.loc 1 315 8 view .LVU113
 394 0052 C0B2     		uxtb	r0, r0
 395              	.LVL23:
 396              	.L16:
 315:lib/chibios/os/rt/src/chsys.c ****       return true;
 397              		.loc 1 315 8 view .LVU114
 398              	.LBE154:
 328:lib/chibios/os/rt/src/chsys.c **** }
 399              		.loc 1 328 1 view .LVU115
 400              		@ sp needed
 401 0054 10BD     		pop	{r4, pc}
 402              	.LVL24:
 403              	.L13:
 404              	.LBB155:
 253:lib/chibios/os/rt/src/chsys.c ****       tp = tp->queue.next;
 405              		.loc 1 253 7 is_stmt 1 view .LVU116
 253:lib/chibios/os/rt/src/chsys.c ****       tp = tp->queue.next;
 406              		.loc 1 253 8 is_stmt 0 view .LVU117
 407 0056 0133     		adds	r3, r3, #1
 408              	.LVL25:
 254:lib/chibios/os/rt/src/chsys.c ****     }
 409              		.loc 1 254 7 is_stmt 1 view .LVU118
 254:lib/chibios/os/rt/src/chsys.c ****     }
 410              		.loc 1 254 10 is_stmt 0 view .LVU119
 411 0058 0068     		ldr	r0, [r0]
 412              	.LVL26:
 254:lib/chibios/os/rt/src/chsys.c ****     }
 413              		.loc 1 254 10 view .LVU120
 414 005a D8E7     		b	.L12
 415              	.L15:
 260:lib/chibios/os/rt/src/chsys.c ****       tp = tp->queue.prev;
 416              		.loc 1 260 7 is_stmt 1 view .LVU121
 260:lib/chibios/os/rt/src/chsys.c ****       tp = tp->queue.prev;
 417              		.loc 1 260 8 is_stmt 0 view .LVU122
 418 005c 013B     		subs	r3, r3, #1
 419              	.LVL27:
 261:lib/chibios/os/rt/src/chsys.c ****     }
 420              		.loc 1 261 7 is_stmt 1 view .LVU123
 261:lib/chibios/os/rt/src/chsys.c ****     }
 421              		.loc 1 261 10 is_stmt 0 view .LVU124
 422 005e 4068     		ldr	r0, [r0, #4]
 423              	.LVL28:
 261:lib/chibios/os/rt/src/chsys.c ****     }
 424              		.loc 1 261 10 view .LVU125
 425 0060 D8E7     		b	.L14
 426              	.LVL29:
 427              	.L19:
 261:lib/chibios/os/rt/src/chsys.c ****     }
 428              		.loc 1 261 10 view .LVU126
 429              	.LBE155:
 430              	.LBB156:
 278:lib/chibios/os/rt/src/chsys.c ****       vtp = vtp->next;
 431              		.loc 1 278 7 is_stmt 1 view .LVU127
 278:lib/chibios/os/rt/src/chsys.c ****       vtp = vtp->next;
 432              		.loc 1 278 8 is_stmt 0 view .LVU128
 433 0062 0133     		adds	r3, r3, #1
 434              	.LVL30:
 279:lib/chibios/os/rt/src/chsys.c ****     }
 435              		.loc 1 279 7 is_stmt 1 view .LVU129
 279:lib/chibios/os/rt/src/chsys.c ****     }
 436              		.loc 1 279 11 is_stmt 0 view .LVU130
 437 0064 1268     		ldr	r2, [r2]
 438              	.LVL31:
 279:lib/chibios/os/rt/src/chsys.c ****     }
 439              		.loc 1 279 11 view .LVU131
 440 0066 E0E7     		b	.L18
 441              	.L21:
 285:lib/chibios/os/rt/src/chsys.c ****       vtp = vtp->prev;
 442              		.loc 1 285 7 is_stmt 1 view .LVU132
 285:lib/chibios/os/rt/src/chsys.c ****       vtp = vtp->prev;
 443              		.loc 1 285 8 is_stmt 0 view .LVU133
 444 0068 013B     		subs	r3, r3, #1
 445              	.LVL32:
 286:lib/chibios/os/rt/src/chsys.c ****     }
 446              		.loc 1 286 7 is_stmt 1 view .LVU134
 286:lib/chibios/os/rt/src/chsys.c ****     }
 447              		.loc 1 286 11 is_stmt 0 view .LVU135
 448 006a 5268     		ldr	r2, [r2, #4]
 449              	.LVL33:
 286:lib/chibios/os/rt/src/chsys.c ****     }
 450              		.loc 1 286 11 view .LVU136
 451 006c E0E7     		b	.L20
 452              	.LVL34:
 453              	.L23:
 286:lib/chibios/os/rt/src/chsys.c ****     }
 454              		.loc 1 286 11 view .LVU137
 455              	.LBE156:
 456              	.LBB157:
 303:lib/chibios/os/rt/src/chsys.c ****       tp = tp->newer;
 457              		.loc 1 303 7 is_stmt 1 view .LVU138
 303:lib/chibios/os/rt/src/chsys.c ****       tp = tp->newer;
 458              		.loc 1 303 8 is_stmt 0 view .LVU139
 459 006e 0130     		adds	r0, r0, #1
 460              	.LVL35:
 304:lib/chibios/os/rt/src/chsys.c ****     }
 461              		.loc 1 304 7 is_stmt 1 view .LVU140
 304:lib/chibios/os/rt/src/chsys.c ****     }
 462              		.loc 1 304 10 is_stmt 0 view .LVU141
 463 0070 1269     		ldr	r2, [r2, #16]
 464              	.LVL36:
 304:lib/chibios/os/rt/src/chsys.c ****     }
 465              		.loc 1 304 10 view .LVU142
 466 0072 E7E7     		b	.L22
 467              	.L25:
 310:lib/chibios/os/rt/src/chsys.c ****       tp = tp->older;
 468              		.loc 1 310 7 is_stmt 1 view .LVU143
 310:lib/chibios/os/rt/src/chsys.c ****       tp = tp->older;
 469              		.loc 1 310 8 is_stmt 0 view .LVU144
 470 0074 0138     		subs	r0, r0, #1
 471              	.LVL37:
 311:lib/chibios/os/rt/src/chsys.c ****     }
 472              		.loc 1 311 7 is_stmt 1 view .LVU145
 311:lib/chibios/os/rt/src/chsys.c ****     }
 473              		.loc 1 311 10 is_stmt 0 view .LVU146
 474 0076 5269     		ldr	r2, [r2, #20]
 475              	.LVL38:
 311:lib/chibios/os/rt/src/chsys.c ****     }
 476              		.loc 1 311 10 view .LVU147
 477 0078 E7E7     		b	.L24
 478              	.L37:
 479 007a C046     		.align	2
 480              	.L36:
 481 007c 00000000 		.word	ch
 482 0080 1C000000 		.word	ch+28
 483              	.LBE157:
 484              		.cfi_endproc
 485              	.LFE157:
 487              		.section	.text.chSysTimerHandlerI,"ax",%progbits
 488              		.align	1
 489              		.global	chSysTimerHandlerI
 490              		.syntax unified
 491              		.code	16
 492              		.thumb_func
 493              		.fpu softvfp
 495              	chSysTimerHandlerI:
 496              	.LFB158:
 329:lib/chibios/os/rt/src/chsys.c **** 
 330:lib/chibios/os/rt/src/chsys.c **** /**
 331:lib/chibios/os/rt/src/chsys.c ****  * @brief   Handles time ticks for round robin preemption and timer increments.
 332:lib/chibios/os/rt/src/chsys.c ****  * @details Decrements the remaining time quantum of the running thread
 333:lib/chibios/os/rt/src/chsys.c ****  *          and preempts it when the quantum is used up. Increments system
 334:lib/chibios/os/rt/src/chsys.c ****  *          time and manages the timers.
 335:lib/chibios/os/rt/src/chsys.c ****  * @note    The frequency of the timer determines the system tick granularity
 336:lib/chibios/os/rt/src/chsys.c ****  *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 337:lib/chibios/os/rt/src/chsys.c ****  *          interval.
 338:lib/chibios/os/rt/src/chsys.c ****  *
 339:lib/chibios/os/rt/src/chsys.c ****  * @iclass
 340:lib/chibios/os/rt/src/chsys.c ****  */
 341:lib/chibios/os/rt/src/chsys.c **** void chSysTimerHandlerI(void) {
 497              		.loc 1 341 31 is_stmt 1 view -0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 8
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 342:lib/chibios/os/rt/src/chsys.c **** 
 343:lib/chibios/os/rt/src/chsys.c ****   chDbgCheckClassI();
 501              		.loc 1 343 21 view .LVU149
 344:lib/chibios/os/rt/src/chsys.c **** 
 345:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_TIME_QUANTUM > 0
 346:lib/chibios/os/rt/src/chsys.c ****   /* Running thread has not used up quantum yet? */
 347:lib/chibios/os/rt/src/chsys.c ****   if (currp->ticks > (tslices_t)0) {
 348:lib/chibios/os/rt/src/chsys.c ****     /* Decrement remaining quantum.*/
 349:lib/chibios/os/rt/src/chsys.c ****     currp->ticks--;
 350:lib/chibios/os/rt/src/chsys.c ****   }
 351:lib/chibios/os/rt/src/chsys.c **** #endif
 352:lib/chibios/os/rt/src/chsys.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 353:lib/chibios/os/rt/src/chsys.c ****   currp->time++;
 354:lib/chibios/os/rt/src/chsys.c **** #endif
 355:lib/chibios/os/rt/src/chsys.c ****   chVTDoTickI();
 502              		.loc 1 355 3 view .LVU150
 503              	.LBB183:
 504              	.LBI183:
 505              		.file 6 "./lib/chibios/os/rt/include/chvt.h"
   1:./lib/chibios/os/rt/include/chvt.h **** /*
   2:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chvt.h **** 
   4:./lib/chibios/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chvt.h **** 
   6:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chvt.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chvt.h **** 
  11:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chvt.h **** 
  16:./lib/chibios/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chvt.h **** */
  19:./lib/chibios/os/rt/include/chvt.h **** 
  20:./lib/chibios/os/rt/include/chvt.h **** /**
  21:./lib/chibios/os/rt/include/chvt.h ****  * @file    chvt.h
  22:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:./lib/chibios/os/rt/include/chvt.h ****  *
  24:./lib/chibios/os/rt/include/chvt.h ****  * @addtogroup time
  25:./lib/chibios/os/rt/include/chvt.h ****  * @{
  26:./lib/chibios/os/rt/include/chvt.h ****  */
  27:./lib/chibios/os/rt/include/chvt.h **** 
  28:./lib/chibios/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:./lib/chibios/os/rt/include/chvt.h **** #define CHVT_H
  30:./lib/chibios/os/rt/include/chvt.h **** 
  31:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chvt.h **** 
  35:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chvt.h **** 
  39:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chvt.h **** 
  43:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:./lib/chibios/os/rt/include/chvt.h ****        "be zero or greater than one"
  46:./lib/chibios/os/rt/include/chvt.h **** #endif
  47:./lib/chibios/os/rt/include/chvt.h **** 
  48:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:./lib/chibios/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:./lib/chibios/os/rt/include/chvt.h **** #endif
  51:./lib/chibios/os/rt/include/chvt.h **** 
  52:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:./lib/chibios/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:./lib/chibios/os/rt/include/chvt.h **** #endif
  55:./lib/chibios/os/rt/include/chvt.h **** 
  56:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  57:./lib/chibios/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  59:./lib/chibios/os/rt/include/chvt.h **** 
  60:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  61:./lib/chibios/os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  63:./lib/chibios/os/rt/include/chvt.h **** 
  64:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  65:./lib/chibios/os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  67:./lib/chibios/os/rt/include/chvt.h **** 
  68:./lib/chibios/os/rt/include/chvt.h **** /*
  69:./lib/chibios/os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:./lib/chibios/os/rt/include/chvt.h ****  */
  71:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  72:./lib/chibios/os/rt/include/chvt.h **** extern "C" {
  73:./lib/chibios/os/rt/include/chvt.h **** #endif
  74:./lib/chibios/os/rt/include/chvt.h ****   void _vt_init(void);
  75:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:./lib/chibios/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  79:./lib/chibios/os/rt/include/chvt.h **** }
  80:./lib/chibios/os/rt/include/chvt.h **** #endif
  81:./lib/chibios/os/rt/include/chvt.h **** 
  82:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  83:./lib/chibios/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  84:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  85:./lib/chibios/os/rt/include/chvt.h **** 
  86:./lib/chibios/os/rt/include/chvt.h **** /**
  87:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  88:./lib/chibios/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  89:./lib/chibios/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  90:./lib/chibios/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  91:./lib/chibios/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  92:./lib/chibios/os/rt/include/chvt.h ****  *
  93:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  94:./lib/chibios/os/rt/include/chvt.h ****  *
  95:./lib/chibios/os/rt/include/chvt.h ****  * @init
  96:./lib/chibios/os/rt/include/chvt.h ****  */
  97:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  98:./lib/chibios/os/rt/include/chvt.h **** 
  99:./lib/chibios/os/rt/include/chvt.h ****   vtp->func = NULL;
 100:./lib/chibios/os/rt/include/chvt.h **** }
 101:./lib/chibios/os/rt/include/chvt.h **** 
 102:./lib/chibios/os/rt/include/chvt.h **** /**
 103:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 104:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 105:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 106:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 107:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 108:./lib/chibios/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 109:./lib/chibios/os/rt/include/chvt.h ****  *          @p systime_t size.
 110:./lib/chibios/os/rt/include/chvt.h ****  *
 111:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 112:./lib/chibios/os/rt/include/chvt.h ****  *
 113:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 114:./lib/chibios/os/rt/include/chvt.h ****  */
 115:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 116:./lib/chibios/os/rt/include/chvt.h **** 
 117:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 118:./lib/chibios/os/rt/include/chvt.h ****   return ch.vtlist.systime;
 119:./lib/chibios/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 120:./lib/chibios/os/rt/include/chvt.h ****   return port_timer_get_time();
 121:./lib/chibios/os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 122:./lib/chibios/os/rt/include/chvt.h **** }
 123:./lib/chibios/os/rt/include/chvt.h **** 
 124:./lib/chibios/os/rt/include/chvt.h **** /**
 125:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 126:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 127:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 128:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 129:./lib/chibios/os/rt/include/chvt.h ****  *
 130:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 131:./lib/chibios/os/rt/include/chvt.h ****  *
 132:./lib/chibios/os/rt/include/chvt.h ****  * @api
 133:./lib/chibios/os/rt/include/chvt.h ****  */
 134:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 135:./lib/chibios/os/rt/include/chvt.h ****   systime_t systime;
 136:./lib/chibios/os/rt/include/chvt.h **** 
 137:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 138:./lib/chibios/os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 139:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 140:./lib/chibios/os/rt/include/chvt.h **** 
 141:./lib/chibios/os/rt/include/chvt.h ****   return systime;
 142:./lib/chibios/os/rt/include/chvt.h **** }
 143:./lib/chibios/os/rt/include/chvt.h **** 
 144:./lib/chibios/os/rt/include/chvt.h **** /**
 145:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 146:./lib/chibios/os/rt/include/chvt.h ****  *
 147:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     start time
 148:./lib/chibios/os/rt/include/chvt.h ****  * @return              The elapsed time.
 149:./lib/chibios/os/rt/include/chvt.h ****  *
 150:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 151:./lib/chibios/os/rt/include/chvt.h ****  */
 152:./lib/chibios/os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 153:./lib/chibios/os/rt/include/chvt.h **** 
 154:./lib/chibios/os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 155:./lib/chibios/os/rt/include/chvt.h **** }
 156:./lib/chibios/os/rt/include/chvt.h **** 
 157:./lib/chibios/os/rt/include/chvt.h **** /**
 158:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 159:./lib/chibios/os/rt/include/chvt.h ****  *          window.
 160:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 161:./lib/chibios/os/rt/include/chvt.h ****  *          whole time range is specified.
 162:./lib/chibios/os/rt/include/chvt.h ****  *
 163:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 164:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 165:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 166:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 167:./lib/chibios/os/rt/include/chvt.h ****  *
 168:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 169:./lib/chibios/os/rt/include/chvt.h ****  */
 170:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 171:./lib/chibios/os/rt/include/chvt.h **** 
 172:./lib/chibios/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 173:./lib/chibios/os/rt/include/chvt.h **** }
 174:./lib/chibios/os/rt/include/chvt.h **** 
 175:./lib/chibios/os/rt/include/chvt.h **** /**
 176:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 177:./lib/chibios/os/rt/include/chvt.h ****  *          window.
 178:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 179:./lib/chibios/os/rt/include/chvt.h ****  *          whole time range is specified.
 180:./lib/chibios/os/rt/include/chvt.h ****  *
 181:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 182:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 183:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 184:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 185:./lib/chibios/os/rt/include/chvt.h ****  *
 186:./lib/chibios/os/rt/include/chvt.h ****  * @api
 187:./lib/chibios/os/rt/include/chvt.h ****  */
 188:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 189:./lib/chibios/os/rt/include/chvt.h **** 
 190:./lib/chibios/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 191:./lib/chibios/os/rt/include/chvt.h **** }
 192:./lib/chibios/os/rt/include/chvt.h **** 
 193:./lib/chibios/os/rt/include/chvt.h **** /**
 194:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 195:./lib/chibios/os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 196:./lib/chibios/os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 197:./lib/chibios/os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 198:./lib/chibios/os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 199:./lib/chibios/os/rt/include/chvt.h ****  *
 200:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 201:./lib/chibios/os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 202:./lib/chibios/os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 203:./lib/chibios/os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 204:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 205:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 206:./lib/chibios/os/rt/include/chvt.h ****  *
 207:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 208:./lib/chibios/os/rt/include/chvt.h ****  */
 209:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 210:./lib/chibios/os/rt/include/chvt.h **** 
 211:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 212:./lib/chibios/os/rt/include/chvt.h **** 
 213:./lib/chibios/os/rt/include/chvt.h ****   if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 214:./lib/chibios/os/rt/include/chvt.h ****     return false;
 215:./lib/chibios/os/rt/include/chvt.h ****   }
 216:./lib/chibios/os/rt/include/chvt.h **** 
 217:./lib/chibios/os/rt/include/chvt.h ****   if (timep != NULL) {
 218:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 219:./lib/chibios/os/rt/include/chvt.h ****     *timep = ch.vtlist.next->delta;
 220:./lib/chibios/os/rt/include/chvt.h **** #else
 221:./lib/chibios/os/rt/include/chvt.h ****     *timep = (ch.vtlist.next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 222:./lib/chibios/os/rt/include/chvt.h ****              chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 223:./lib/chibios/os/rt/include/chvt.h **** #endif
 224:./lib/chibios/os/rt/include/chvt.h ****   }
 225:./lib/chibios/os/rt/include/chvt.h **** 
 226:./lib/chibios/os/rt/include/chvt.h ****   return true;
 227:./lib/chibios/os/rt/include/chvt.h **** }
 228:./lib/chibios/os/rt/include/chvt.h **** 
 229:./lib/chibios/os/rt/include/chvt.h **** /**
 230:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 231:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 232:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 233:./lib/chibios/os/rt/include/chvt.h ****  *
 234:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 235:./lib/chibios/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 236:./lib/chibios/os/rt/include/chvt.h ****  *
 237:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 238:./lib/chibios/os/rt/include/chvt.h ****  */
 239:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 240:./lib/chibios/os/rt/include/chvt.h **** 
 241:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 242:./lib/chibios/os/rt/include/chvt.h **** 
 243:./lib/chibios/os/rt/include/chvt.h ****   return (bool)(vtp->func != NULL);
 244:./lib/chibios/os/rt/include/chvt.h **** }
 245:./lib/chibios/os/rt/include/chvt.h **** 
 246:./lib/chibios/os/rt/include/chvt.h **** /**
 247:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 248:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 249:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 250:./lib/chibios/os/rt/include/chvt.h ****  *
 251:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 252:./lib/chibios/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 253:./lib/chibios/os/rt/include/chvt.h ****  *
 254:./lib/chibios/os/rt/include/chvt.h ****  * @api
 255:./lib/chibios/os/rt/include/chvt.h ****  */
 256:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 257:./lib/chibios/os/rt/include/chvt.h ****   bool b;
 258:./lib/chibios/os/rt/include/chvt.h **** 
 259:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 260:./lib/chibios/os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 261:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 262:./lib/chibios/os/rt/include/chvt.h **** 
 263:./lib/chibios/os/rt/include/chvt.h ****   return b;
 264:./lib/chibios/os/rt/include/chvt.h **** }
 265:./lib/chibios/os/rt/include/chvt.h **** 
 266:./lib/chibios/os/rt/include/chvt.h **** /**
 267:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 268:./lib/chibios/os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 269:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 270:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 271:./lib/chibios/os/rt/include/chvt.h ****  *
 272:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 273:./lib/chibios/os/rt/include/chvt.h ****  *
 274:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 275:./lib/chibios/os/rt/include/chvt.h ****  */
 276:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 277:./lib/chibios/os/rt/include/chvt.h **** 
 278:./lib/chibios/os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 279:./lib/chibios/os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 280:./lib/chibios/os/rt/include/chvt.h ****   }
 281:./lib/chibios/os/rt/include/chvt.h **** }
 282:./lib/chibios/os/rt/include/chvt.h **** 
 283:./lib/chibios/os/rt/include/chvt.h **** /**
 284:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 285:./lib/chibios/os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 286:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 287:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 288:./lib/chibios/os/rt/include/chvt.h ****  *
 289:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 290:./lib/chibios/os/rt/include/chvt.h ****  *
 291:./lib/chibios/os/rt/include/chvt.h ****  * @api
 292:./lib/chibios/os/rt/include/chvt.h ****  */
 293:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 294:./lib/chibios/os/rt/include/chvt.h **** 
 295:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 296:./lib/chibios/os/rt/include/chvt.h ****   chVTResetI(vtp);
 297:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 298:./lib/chibios/os/rt/include/chvt.h **** }
 299:./lib/chibios/os/rt/include/chvt.h **** 
 300:./lib/chibios/os/rt/include/chvt.h **** /**
 301:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Enables a virtual timer.
 302:./lib/chibios/os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 303:./lib/chibios/os/rt/include/chvt.h ****  *          using the new parameters.
 304:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 305:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 306:./lib/chibios/os/rt/include/chvt.h ****  *
 307:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 308:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 309:./lib/chibios/os/rt/include/chvt.h ****  *                      special values are handled as follow:
 310:./lib/chibios/os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 311:./lib/chibios/os/rt/include/chvt.h ****  *                        normal time specification.
 312:./lib/chibios/os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 313:./lib/chibios/os/rt/include/chvt.h ****  *                      .
 314:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 315:./lib/chibios/os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 316:./lib/chibios/os/rt/include/chvt.h ****  *                      be disposed or reused.
 317:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 318:./lib/chibios/os/rt/include/chvt.h ****  *                      function
 319:./lib/chibios/os/rt/include/chvt.h ****  *
 320:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 321:./lib/chibios/os/rt/include/chvt.h ****  */
 322:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 323:./lib/chibios/os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 324:./lib/chibios/os/rt/include/chvt.h **** 
 325:./lib/chibios/os/rt/include/chvt.h ****   chVTResetI(vtp);
 326:./lib/chibios/os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 327:./lib/chibios/os/rt/include/chvt.h **** }
 328:./lib/chibios/os/rt/include/chvt.h **** 
 329:./lib/chibios/os/rt/include/chvt.h **** /**
 330:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Enables a virtual timer.
 331:./lib/chibios/os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 332:./lib/chibios/os/rt/include/chvt.h ****  *          using the new parameters.
 333:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 334:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 335:./lib/chibios/os/rt/include/chvt.h ****  *
 336:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 337:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 338:./lib/chibios/os/rt/include/chvt.h ****  *                      special values are handled as follow:
 339:./lib/chibios/os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 340:./lib/chibios/os/rt/include/chvt.h ****  *                        normal time specification.
 341:./lib/chibios/os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 342:./lib/chibios/os/rt/include/chvt.h ****  *                      .
 343:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 344:./lib/chibios/os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 345:./lib/chibios/os/rt/include/chvt.h ****  *                      be disposed or reused.
 346:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 347:./lib/chibios/os/rt/include/chvt.h ****  *                      function
 348:./lib/chibios/os/rt/include/chvt.h ****  *
 349:./lib/chibios/os/rt/include/chvt.h ****  * @api
 350:./lib/chibios/os/rt/include/chvt.h ****  */
 351:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTSet(virtual_timer_t *vtp, sysinterval_t delay,
 352:./lib/chibios/os/rt/include/chvt.h ****                            vtfunc_t vtfunc, void *par) {
 353:./lib/chibios/os/rt/include/chvt.h **** 
 354:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 355:./lib/chibios/os/rt/include/chvt.h ****   chVTSetI(vtp, delay, vtfunc, par);
 356:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 357:./lib/chibios/os/rt/include/chvt.h **** }
 358:./lib/chibios/os/rt/include/chvt.h **** 
 359:./lib/chibios/os/rt/include/chvt.h **** /**
 360:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Virtual timers ticker.
 361:./lib/chibios/os/rt/include/chvt.h ****  * @note    The system lock is released before entering the callback and
 362:./lib/chibios/os/rt/include/chvt.h ****  *          re-acquired immediately after. It is callback's responsibility
 363:./lib/chibios/os/rt/include/chvt.h ****  *          to acquire the lock if needed. This is done in order to reduce
 364:./lib/chibios/os/rt/include/chvt.h ****  *          interrupts jitter when many timers are in use.
 365:./lib/chibios/os/rt/include/chvt.h ****  *
 366:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 367:./lib/chibios/os/rt/include/chvt.h ****  */
 368:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTDoTickI(void) {
 506              		.loc 6 368 20 view .LVU151
 507              	.LBB184:
 369:./lib/chibios/os/rt/include/chvt.h **** 
 370:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 508              		.loc 6 370 21 view .LVU152
 371:./lib/chibios/os/rt/include/chvt.h **** 
 372:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 373:./lib/chibios/os/rt/include/chvt.h ****   ch.vtlist.systime++;
 374:./lib/chibios/os/rt/include/chvt.h ****   if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
 375:./lib/chibios/os/rt/include/chvt.h ****     /* The list is not empty, processing elements on top.*/
 376:./lib/chibios/os/rt/include/chvt.h ****     --ch.vtlist.next->delta;
 377:./lib/chibios/os/rt/include/chvt.h ****     while (ch.vtlist.next->delta == (sysinterval_t)0) {
 378:./lib/chibios/os/rt/include/chvt.h ****       virtual_timer_t *vtp;
 379:./lib/chibios/os/rt/include/chvt.h ****       vtfunc_t fn;
 380:./lib/chibios/os/rt/include/chvt.h **** 
 381:./lib/chibios/os/rt/include/chvt.h ****       vtp = ch.vtlist.next;
 382:./lib/chibios/os/rt/include/chvt.h ****       fn = vtp->func;
 383:./lib/chibios/os/rt/include/chvt.h ****       vtp->func = NULL;
 384:./lib/chibios/os/rt/include/chvt.h ****       vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 385:./lib/chibios/os/rt/include/chvt.h ****       ch.vtlist.next = vtp->next;
 386:./lib/chibios/os/rt/include/chvt.h ****       chSysUnlockFromISR();
 387:./lib/chibios/os/rt/include/chvt.h ****       fn(vtp->par);
 388:./lib/chibios/os/rt/include/chvt.h ****       chSysLockFromISR();
 389:./lib/chibios/os/rt/include/chvt.h ****     }
 390:./lib/chibios/os/rt/include/chvt.h ****   }
 391:./lib/chibios/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 392:./lib/chibios/os/rt/include/chvt.h ****   virtual_timer_t *vtp;
 509              		.loc 6 392 3 view .LVU153
 393:./lib/chibios/os/rt/include/chvt.h ****   systime_t now;
 510              		.loc 6 393 3 view .LVU154
 394:./lib/chibios/os/rt/include/chvt.h ****   sysinterval_t delta, nowdelta;
 511              		.loc 6 394 3 view .LVU155
 395:./lib/chibios/os/rt/include/chvt.h **** 
 396:./lib/chibios/os/rt/include/chvt.h ****   /* Looping through timers.*/
 397:./lib/chibios/os/rt/include/chvt.h ****   vtp = ch.vtlist.next;
 512              		.loc 6 397 3 view .LVU156
 513              	.LBE184:
 514              	.LBE183:
 341:lib/chibios/os/rt/src/chsys.c **** 
 515              		.loc 1 341 31 is_stmt 0 view .LVU157
 516 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 517              		.cfi_def_cfa_offset 32
 518              		.cfi_offset 0, -32
 519              		.cfi_offset 1, -28
 520              		.cfi_offset 2, -24
 521              		.cfi_offset 4, -20
 522              		.cfi_offset 5, -16
 523              		.cfi_offset 6, -12
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526              	.LBB245:
 527              	.LBB234:
 528              		.loc 6 397 7 view .LVU158
 529 0002 1A4D     		ldr	r5, .L46
 530 0004 EC69     		ldr	r4, [r5, #28]
 531              	.LVL39:
 532              	.L42:
 398:./lib/chibios/os/rt/include/chvt.h ****   while (true) {
 533              		.loc 6 398 3 is_stmt 1 view .LVU159
 399:./lib/chibios/os/rt/include/chvt.h **** 
 400:./lib/chibios/os/rt/include/chvt.h ****     /* Getting the system time as reference.*/
 401:./lib/chibios/os/rt/include/chvt.h ****     now = chVTGetSystemTimeX();
 534              		.loc 6 401 5 view .LVU160
 535              	.LBB185:
 536              	.LBI185:
 115:./lib/chibios/os/rt/include/chvt.h **** 
 537              		.loc 6 115 25 view .LVU161
 538              	.LBE185:
 539              	.LBE234:
 540              	.LBE245:
 120:./lib/chibios/os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 541              		.loc 6 120 3 view .LVU162
 542              	.LBB246:
 543              	.LBB235:
 544              	.LBB190:
 545              	.LBB186:
 546              	.LBI186:
 547              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @file    chcore_timer.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   System timer header file.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @addtogroup ARMCMx_TIMER
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #define CHCORE_TIMER_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* This is the only header in the HAL designed to be include-able alone.*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #include "hal_st.h"
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Derived constants and error checks.                                       */
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module data structures and types.                                         */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module macros.                                                            */
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* External declarations.                                                    */
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module inline functions.                                                  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Starts the alarm.
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *          this call.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   stStartAlarm(time);
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   stStopAlarm();
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Sets the alarm time.
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   stSetAlarm(time);
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Returns the system time.
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @return              The system time.
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 548              		.loc 7 105 25 view .LVU163
 549              	.LBE186:
 550              	.LBE190:
 551              	.LBE235:
 552              	.LBE246:
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   return stGetCounter();
 553              		.loc 7 107 3 view .LVU164
 554              	.LBB247:
 555              	.LBB236:
 556              	.LBB191:
 557              	.LBB189:
 558              	.LBB187:
 559              	.LBI187:
 560              		.file 8 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h"
   1:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*
   2:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
   4:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
   8:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  10:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** */
  16:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  17:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  18:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @file    TIMv1/hal_st_lld.h
  19:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
  23:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @addtogroup ST
  24:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @{
  25:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  26:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  27:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  30:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "mcuconf.h"
  31:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "stm32_registry.h"
  32:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "stm32_tim.h"
  33:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  34:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver constants.                                                         */
  36:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  38:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  39:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                         */
  40:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  41:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  42:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  43:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @name    Configuration options
  44:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @{
  45:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  46:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  47:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   SysTick timer IRQ priority.
  48:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  49:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_ST_IRQ_PRIORITY) || defined(__DOXYGEN__)
  50:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_IRQ_PRIORITY               8
  51:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  52:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  53:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  54:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   TIMx unit (by number) to be used for free running operations.
  55:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @note    You must select a 32 bits timer if a 32 bits @p systick_t type
  56:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *          is required.
  57:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @note    Timers 2, 3, 4 and 5 are supported.
  58:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  59:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_ST_USE_TIMER) || defined(__DOXYGEN__)
  60:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_USE_TIMER                  2
  61:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  62:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /** @} */
  63:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  64:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  65:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                       */
  66:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  67:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  68:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_HAS_TIM2)
  69:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_HAS_TIM2                      FALSE
  70:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  71:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  72:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_HAS_TIM3)
  73:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_HAS_TIM3                      FALSE
  74:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  75:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  76:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_HAS_TIM4)
  77:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_HAS_TIM4                      FALSE
  78:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  79:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  80:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_HAS_TIM5)
  81:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_HAS_TIM5                      FALSE
  82:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  83:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  84:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_HAS_TIM21)
  85:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_HAS_TIM21                     FALSE
  86:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  87:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  88:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_HAS_TIM22)
  89:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_HAS_TIM22                     FALSE
  90:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  91:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  92:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if STM32_ST_USE_TIMER == 2
  93:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                        STM32_TIM2
  94:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  95:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 3
  96:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                        STM32_TIM3
  97:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  98:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 4
  99:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                        STM32_TIM4
 100:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 101:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 5
 102:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                        STM32_TIM5
 103:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 104:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 21
 105:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                        STM32_TIM21
 106:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 107:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 22
 108:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                        STM32_TIM22
 109:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 110:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #else
 111:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "STM32_ST_USE_TIMER specifies an unsupported timer"
 112:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 113:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 114:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                         */
 116:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 117:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 118:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 119:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver macros.                                                            */
 120:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 121:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 122:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 123:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* External declarations.                                                    */
 124:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 125:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 126:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
 127:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** extern "C" {
 128:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 129:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
 130:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
 131:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** }
 132:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 133:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 134:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 135:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                  */
 136:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 137:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 138:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
 139:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
 140:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
 141:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @return              The counter value.
 142:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
 143:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @notapi
 144:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
 145:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
 561              		.loc 8 145 25 view .LVU165
 562              	.LBB188:
 146:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 147:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****   return (systime_t)STM32_ST_TIM->CNT;
 563              		.loc 8 147 3 view .LVU166
 564              		.loc 8 147 10 is_stmt 0 view .LVU167
 565 0006 8023     		movs	r3, #128
 566 0008 DB05     		lsls	r3, r3, #23
 567 000a 5A6A     		ldr	r2, [r3, #36]
 568              	.LVL40:
 569              		.loc 8 147 10 view .LVU168
 570              	.LBE188:
 571              	.LBE187:
 572              	.LBE189:
 573              	.LBE191:
 402:./lib/chibios/os/rt/include/chvt.h ****     nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 574              		.loc 6 402 5 is_stmt 1 view .LVU169
 403:./lib/chibios/os/rt/include/chvt.h **** 
 404:./lib/chibios/os/rt/include/chvt.h ****     /* The list scan is limited by the timers header having
 405:./lib/chibios/os/rt/include/chvt.h ****        "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
 406:./lib/chibios/os/rt/include/chvt.h ****        greater than all deltas.*/
 407:./lib/chibios/os/rt/include/chvt.h ****     if (nowdelta < vtp->delta) {
 575              		.loc 6 407 8 is_stmt 0 view .LVU170
 576 000c A168     		ldr	r1, [r4, #8]
 402:./lib/chibios/os/rt/include/chvt.h ****     nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 577              		.loc 6 402 16 view .LVU171
 578 000e AB6A     		ldr	r3, [r5, #40]
 579              	.LVL41:
 580              	.LBB192:
 581              	.LBI192:
 582              		.file 9 "./lib/chibios/os/rt/include/chtime.h"
   1:./lib/chibios/os/rt/include/chtime.h **** /*
   2:./lib/chibios/os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chtime.h **** 
   4:./lib/chibios/os/rt/include/chtime.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chtime.h **** 
   6:./lib/chibios/os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chtime.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chtime.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chtime.h **** 
  11:./lib/chibios/os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chtime.h **** 
  16:./lib/chibios/os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chtime.h **** */
  19:./lib/chibios/os/rt/include/chtime.h **** 
  20:./lib/chibios/os/rt/include/chtime.h **** /**
  21:./lib/chibios/os/rt/include/chtime.h ****  * @file    chtime.h
  22:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:./lib/chibios/os/rt/include/chtime.h ****  *
  24:./lib/chibios/os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:./lib/chibios/os/rt/include/chtime.h ****  * @details This module is responsible for handling of system time and time
  26:./lib/chibios/os/rt/include/chtime.h ****  *          intervals.
  27:./lib/chibios/os/rt/include/chtime.h ****  * @{
  28:./lib/chibios/os/rt/include/chtime.h ****  */
  29:./lib/chibios/os/rt/include/chtime.h **** 
  30:./lib/chibios/os/rt/include/chtime.h **** #ifndef CHTIME_H
  31:./lib/chibios/os/rt/include/chtime.h **** #define CHTIME_H
  32:./lib/chibios/os/rt/include/chtime.h **** 
  33:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chtime.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chtime.h **** 
  37:./lib/chibios/os/rt/include/chtime.h **** /**
  38:./lib/chibios/os/rt/include/chtime.h ****  * @name    Special time constants
  39:./lib/chibios/os/rt/include/chtime.h ****  * @{
  40:./lib/chibios/os/rt/include/chtime.h ****  */
  41:./lib/chibios/os/rt/include/chtime.h **** /**
  42:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  43:./lib/chibios/os/rt/include/chtime.h ****  *          specification.
  44:./lib/chibios/os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  45:./lib/chibios/os/rt/include/chtime.h ****  *          see the specific function documentation.
  46:./lib/chibios/os/rt/include/chtime.h ****  */
  47:./lib/chibios/os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  48:./lib/chibios/os/rt/include/chtime.h **** 
  49:./lib/chibios/os/rt/include/chtime.h **** /**
  50:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  51:./lib/chibios/os/rt/include/chtime.h ****  *          specification.
  52:./lib/chibios/os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  53:./lib/chibios/os/rt/include/chtime.h ****  *          see the specific function documentation.
  54:./lib/chibios/os/rt/include/chtime.h ****  */
  55:./lib/chibios/os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  56:./lib/chibios/os/rt/include/chtime.h **** 
  57:./lib/chibios/os/rt/include/chtime.h **** /**
  58:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  59:./lib/chibios/os/rt/include/chtime.h ****  */
  60:./lib/chibios/os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  61:./lib/chibios/os/rt/include/chtime.h **** 
  62:./lib/chibios/os/rt/include/chtime.h **** /**
  63:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  64:./lib/chibios/os/rt/include/chtime.h ****  */
  65:./lib/chibios/os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  66:./lib/chibios/os/rt/include/chtime.h **** /** @} */
  67:./lib/chibios/os/rt/include/chtime.h **** 
  68:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  69:./lib/chibios/os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  70:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  71:./lib/chibios/os/rt/include/chtime.h **** 
  72:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  73:./lib/chibios/os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
  74:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  75:./lib/chibios/os/rt/include/chtime.h **** 
  76:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
  77:./lib/chibios/os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
  78:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
  79:./lib/chibios/os/rt/include/chtime.h **** #endif
  80:./lib/chibios/os/rt/include/chtime.h **** 
  81:./lib/chibios/os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
  82:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
  83:./lib/chibios/os/rt/include/chtime.h **** #endif
  84:./lib/chibios/os/rt/include/chtime.h **** 
  85:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
  86:./lib/chibios/os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
  87:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
  88:./lib/chibios/os/rt/include/chtime.h **** #endif
  89:./lib/chibios/os/rt/include/chtime.h **** 
  90:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
  91:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
  92:./lib/chibios/os/rt/include/chtime.h **** #endif
  93:./lib/chibios/os/rt/include/chtime.h **** 
  94:./lib/chibios/os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
  95:./lib/chibios/os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
  96:./lib/chibios/os/rt/include/chtime.h **** #endif
  97:./lib/chibios/os/rt/include/chtime.h **** 
  98:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  99:./lib/chibios/os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 100:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 101:./lib/chibios/os/rt/include/chtime.h **** 
 102:./lib/chibios/os/rt/include/chtime.h **** /**
 103:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of system time.
 104:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 105:./lib/chibios/os/rt/include/chtime.h ****  */
 106:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 107:./lib/chibios/os/rt/include/chtime.h **** typedef uint64_t systime_t;
 108:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 109:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t systime_t;
 110:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 111:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t systime_t;
 112:./lib/chibios/os/rt/include/chtime.h **** #endif
 113:./lib/chibios/os/rt/include/chtime.h **** 
 114:./lib/chibios/os/rt/include/chtime.h **** /**
 115:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of time interval.
 116:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 117:./lib/chibios/os/rt/include/chtime.h ****  */
 118:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 119:./lib/chibios/os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 120:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 121:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 122:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 123:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 124:./lib/chibios/os/rt/include/chtime.h **** #endif
 125:./lib/chibios/os/rt/include/chtime.h **** 
 126:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 127:./lib/chibios/os/rt/include/chtime.h **** /**
 128:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of seconds.
 129:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 130:./lib/chibios/os/rt/include/chtime.h ****  */
 131:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 132:./lib/chibios/os/rt/include/chtime.h **** 
 133:./lib/chibios/os/rt/include/chtime.h **** /**
 134:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 135:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 136:./lib/chibios/os/rt/include/chtime.h ****  */
 137:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 138:./lib/chibios/os/rt/include/chtime.h **** 
 139:./lib/chibios/os/rt/include/chtime.h **** /**
 140:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 141:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 142:./lib/chibios/os/rt/include/chtime.h ****  */
 143:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 144:./lib/chibios/os/rt/include/chtime.h **** 
 145:./lib/chibios/os/rt/include/chtime.h **** /**
 146:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 147:./lib/chibios/os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 148:./lib/chibios/os/rt/include/chtime.h ****  *          only used internally for conversions.
 149:./lib/chibios/os/rt/include/chtime.h ****  */
 150:./lib/chibios/os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 151:./lib/chibios/os/rt/include/chtime.h **** 
 152:./lib/chibios/os/rt/include/chtime.h **** #else
 153:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 154:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 155:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 156:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 157:./lib/chibios/os/rt/include/chtime.h **** #endif
 158:./lib/chibios/os/rt/include/chtime.h **** 
 159:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 160:./lib/chibios/os/rt/include/chtime.h **** /* Module macros.                                                            */
 161:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 162:./lib/chibios/os/rt/include/chtime.h **** 
 163:./lib/chibios/os/rt/include/chtime.h **** /**
 164:./lib/chibios/os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 165:./lib/chibios/os/rt/include/chtime.h ****  * @{
 166:./lib/chibios/os/rt/include/chtime.h ****  */
 167:./lib/chibios/os/rt/include/chtime.h **** /**
 168:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 169:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 170:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 171:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 172:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 173:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 174:./lib/chibios/os/rt/include/chtime.h ****  *
 175:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 176:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 177:./lib/chibios/os/rt/include/chtime.h ****  *
 178:./lib/chibios/os/rt/include/chtime.h ****  * @api
 179:./lib/chibios/os/rt/include/chtime.h ****  */
 180:./lib/chibios/os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 181:./lib/chibios/os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 182:./lib/chibios/os/rt/include/chtime.h **** 
 183:./lib/chibios/os/rt/include/chtime.h **** /**
 184:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 185:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 186:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 187:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 188:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 189:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 190:./lib/chibios/os/rt/include/chtime.h ****  *
 191:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 192:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 193:./lib/chibios/os/rt/include/chtime.h ****  *
 194:./lib/chibios/os/rt/include/chtime.h ****  * @api
 195:./lib/chibios/os/rt/include/chtime.h ****  */
 196:./lib/chibios/os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 197:./lib/chibios/os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 198:./lib/chibios/os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 199:./lib/chibios/os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 200:./lib/chibios/os/rt/include/chtime.h **** 
 201:./lib/chibios/os/rt/include/chtime.h **** /**
 202:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 203:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 204:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 205:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 206:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 207:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 208:./lib/chibios/os/rt/include/chtime.h ****  *
 209:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 210:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 211:./lib/chibios/os/rt/include/chtime.h ****  *
 212:./lib/chibios/os/rt/include/chtime.h ****  * @api
 213:./lib/chibios/os/rt/include/chtime.h ****  */
 214:./lib/chibios/os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 215:./lib/chibios/os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 216:./lib/chibios/os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 217:./lib/chibios/os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 218:./lib/chibios/os/rt/include/chtime.h **** 
 219:./lib/chibios/os/rt/include/chtime.h **** /**
 220:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 221:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 222:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 223:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 224:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 225:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 226:./lib/chibios/os/rt/include/chtime.h ****  *
 227:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 228:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of seconds.
 229:./lib/chibios/os/rt/include/chtime.h ****  *
 230:./lib/chibios/os/rt/include/chtime.h ****  * @api
 231:./lib/chibios/os/rt/include/chtime.h ****  */
 232:./lib/chibios/os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 233:./lib/chibios/os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 234:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 235:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 236:./lib/chibios/os/rt/include/chtime.h **** 
 237:./lib/chibios/os/rt/include/chtime.h **** /**
 238:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 239:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 240:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 241:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 242:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 243:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 244:./lib/chibios/os/rt/include/chtime.h ****  *
 245:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 246:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 247:./lib/chibios/os/rt/include/chtime.h ****  *
 248:./lib/chibios/os/rt/include/chtime.h ****  * @api
 249:./lib/chibios/os/rt/include/chtime.h ****  */
 250:./lib/chibios/os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 251:./lib/chibios/os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 252:./lib/chibios/os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 253:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 254:./lib/chibios/os/rt/include/chtime.h **** 
 255:./lib/chibios/os/rt/include/chtime.h **** /**
 256:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 257:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 258:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 259:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 260:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 261:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 262:./lib/chibios/os/rt/include/chtime.h ****  *
 263:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 264:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of microseconds.
 265:./lib/chibios/os/rt/include/chtime.h ****  *
 266:./lib/chibios/os/rt/include/chtime.h ****  * @api
 267:./lib/chibios/os/rt/include/chtime.h ****  */
 268:./lib/chibios/os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 269:./lib/chibios/os/rt/include/chtime.h ****     (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +      \
 270:./lib/chibios/os/rt/include/chtime.h ****                     (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /    \
 271:./lib/chibios/os/rt/include/chtime.h ****                    (time_conv_t)CH_CFG_ST_FREQUENCY)
 272:./lib/chibios/os/rt/include/chtime.h **** /** @} */
 273:./lib/chibios/os/rt/include/chtime.h **** 
 274:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 275:./lib/chibios/os/rt/include/chtime.h **** /* External declarations.                                                    */
 276:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chtime.h **** 
 278:./lib/chibios/os/rt/include/chtime.h **** /*
 279:./lib/chibios/os/rt/include/chtime.h ****  * Virtual Timers APIs.
 280:./lib/chibios/os/rt/include/chtime.h ****  */
 281:./lib/chibios/os/rt/include/chtime.h **** #ifdef __cplusplus
 282:./lib/chibios/os/rt/include/chtime.h **** extern "C" {
 283:./lib/chibios/os/rt/include/chtime.h **** #endif
 284:./lib/chibios/os/rt/include/chtime.h **** 
 285:./lib/chibios/os/rt/include/chtime.h **** #ifdef __cplusplus
 286:./lib/chibios/os/rt/include/chtime.h **** }
 287:./lib/chibios/os/rt/include/chtime.h **** #endif
 288:./lib/chibios/os/rt/include/chtime.h **** 
 289:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 290:./lib/chibios/os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 291:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 292:./lib/chibios/os/rt/include/chtime.h **** 
 293:./lib/chibios/os/rt/include/chtime.h **** /**
 294:./lib/chibios/os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 295:./lib/chibios/os/rt/include/chtime.h ****  * @{
 296:./lib/chibios/os/rt/include/chtime.h ****  */
 297:./lib/chibios/os/rt/include/chtime.h **** /**
 298:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 299:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 300:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 301:./lib/chibios/os/rt/include/chtime.h ****  *
 302:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 303:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 304:./lib/chibios/os/rt/include/chtime.h ****  *
 305:./lib/chibios/os/rt/include/chtime.h ****  * @special
 306:./lib/chibios/os/rt/include/chtime.h ****  */
 307:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 308:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t ticks;
 309:./lib/chibios/os/rt/include/chtime.h **** 
 310:./lib/chibios/os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 311:./lib/chibios/os/rt/include/chtime.h **** 
 312:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 313:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 314:./lib/chibios/os/rt/include/chtime.h **** 
 315:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 316:./lib/chibios/os/rt/include/chtime.h **** }
 317:./lib/chibios/os/rt/include/chtime.h **** 
 318:./lib/chibios/os/rt/include/chtime.h **** /**
 319:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 320:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 321:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 322:./lib/chibios/os/rt/include/chtime.h ****  *
 323:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 324:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 325:./lib/chibios/os/rt/include/chtime.h ****  *
 326:./lib/chibios/os/rt/include/chtime.h ****  * @special
 327:./lib/chibios/os/rt/include/chtime.h ****  */
 328:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 329:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t ticks;
 330:./lib/chibios/os/rt/include/chtime.h **** 
 331:./lib/chibios/os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 332:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 333:./lib/chibios/os/rt/include/chtime.h **** 
 334:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 335:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 336:./lib/chibios/os/rt/include/chtime.h **** 
 337:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 338:./lib/chibios/os/rt/include/chtime.h **** }
 339:./lib/chibios/os/rt/include/chtime.h **** 
 340:./lib/chibios/os/rt/include/chtime.h **** /**
 341:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 342:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 343:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 344:./lib/chibios/os/rt/include/chtime.h ****  *
 345:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 346:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 347:./lib/chibios/os/rt/include/chtime.h ****  *
 348:./lib/chibios/os/rt/include/chtime.h ****  * @special
 349:./lib/chibios/os/rt/include/chtime.h ****  */
 350:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 351:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t ticks;
 352:./lib/chibios/os/rt/include/chtime.h **** 
 353:./lib/chibios/os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 354:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 355:./lib/chibios/os/rt/include/chtime.h **** 
 356:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 357:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 358:./lib/chibios/os/rt/include/chtime.h **** 
 359:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 360:./lib/chibios/os/rt/include/chtime.h **** }
 361:./lib/chibios/os/rt/include/chtime.h **** 
 362:./lib/chibios/os/rt/include/chtime.h **** /**
 363:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 364:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 365:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 366:./lib/chibios/os/rt/include/chtime.h ****  *
 367:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 368:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of seconds.
 369:./lib/chibios/os/rt/include/chtime.h ****  *
 370:./lib/chibios/os/rt/include/chtime.h ****  * @special
 371:./lib/chibios/os/rt/include/chtime.h ****  */
 372:./lib/chibios/os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 373:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t secs;
 374:./lib/chibios/os/rt/include/chtime.h **** 
 375:./lib/chibios/os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 376:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 377:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 378:./lib/chibios/os/rt/include/chtime.h **** 
 379:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 380:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 381:./lib/chibios/os/rt/include/chtime.h **** 
 382:./lib/chibios/os/rt/include/chtime.h ****   return (time_secs_t)secs;
 383:./lib/chibios/os/rt/include/chtime.h **** }
 384:./lib/chibios/os/rt/include/chtime.h **** 
 385:./lib/chibios/os/rt/include/chtime.h **** /**
 386:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 387:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 388:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 389:./lib/chibios/os/rt/include/chtime.h ****  *
 390:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 391:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 392:./lib/chibios/os/rt/include/chtime.h ****  *
 393:./lib/chibios/os/rt/include/chtime.h ****  * @special
 394:./lib/chibios/os/rt/include/chtime.h ****  */
 395:./lib/chibios/os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 396:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t msecs;
 397:./lib/chibios/os/rt/include/chtime.h **** 
 398:./lib/chibios/os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 399:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 400:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 401:./lib/chibios/os/rt/include/chtime.h **** 
 402:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 403:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 404:./lib/chibios/os/rt/include/chtime.h **** 
 405:./lib/chibios/os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 406:./lib/chibios/os/rt/include/chtime.h **** }
 407:./lib/chibios/os/rt/include/chtime.h **** 
 408:./lib/chibios/os/rt/include/chtime.h **** /**
 409:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 410:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 411:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 412:./lib/chibios/os/rt/include/chtime.h ****  *
 413:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 414:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of microseconds.
 415:./lib/chibios/os/rt/include/chtime.h ****  *
 416:./lib/chibios/os/rt/include/chtime.h ****  * @special
 417:./lib/chibios/os/rt/include/chtime.h ****  */
 418:./lib/chibios/os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 419:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t usecs;
 420:./lib/chibios/os/rt/include/chtime.h **** 
 421:./lib/chibios/os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 422:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 423:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 424:./lib/chibios/os/rt/include/chtime.h **** 
 425:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 426:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 427:./lib/chibios/os/rt/include/chtime.h **** 
 428:./lib/chibios/os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 429:./lib/chibios/os/rt/include/chtime.h **** }
 430:./lib/chibios/os/rt/include/chtime.h **** 
 431:./lib/chibios/os/rt/include/chtime.h **** /**
 432:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 433:./lib/chibios/os/rt/include/chtime.h ****  *
 434:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] systime   base system time
 435:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 436:./lib/chibios/os/rt/include/chtime.h ****  * @return              The new system time.
 437:./lib/chibios/os/rt/include/chtime.h ****  *
 438:./lib/chibios/os/rt/include/chtime.h ****  * @xclass
 439:./lib/chibios/os/rt/include/chtime.h ****  */
 440:./lib/chibios/os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 441:./lib/chibios/os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 442:./lib/chibios/os/rt/include/chtime.h **** 
 443:./lib/chibios/os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 444:./lib/chibios/os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 445:./lib/chibios/os/rt/include/chtime.h **** #endif
 446:./lib/chibios/os/rt/include/chtime.h **** 
 447:./lib/chibios/os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 448:./lib/chibios/os/rt/include/chtime.h **** }
 449:./lib/chibios/os/rt/include/chtime.h **** 
 450:./lib/chibios/os/rt/include/chtime.h **** /**
 451:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 452:./lib/chibios/os/rt/include/chtime.h ****  *
 453:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] start     first system time
 454:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] end       second system time
 455:./lib/chibios/os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 456:./lib/chibios/os/rt/include/chtime.h ****  *
 457:./lib/chibios/os/rt/include/chtime.h ****  * @xclass
 458:./lib/chibios/os/rt/include/chtime.h ****  */
 459:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 583              		.loc 9 459 29 is_stmt 1 view .LVU172
 584              	.LBB193:
 460:./lib/chibios/os/rt/include/chtime.h **** 
 461:./lib/chibios/os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 462:./lib/chibios/os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 463:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 585              		.loc 9 463 3 view .LVU173
 586 0010 174F     		ldr	r7, .L46+4
 587              		.loc 9 463 10 is_stmt 0 view .LVU174
 588 0012 D61A     		subs	r6, r2, r3
 589              	.LVL42:
 590              		.loc 9 463 10 view .LVU175
 591              	.LBE193:
 592              	.LBE192:
 593              		.loc 6 407 5 is_stmt 1 view .LVU176
 594              		.loc 6 407 8 is_stmt 0 view .LVU177
 595 0014 8E42     		cmp	r6, r1
 596 0016 19D3     		bcc	.L39
 597              	.LVL43:
 598              	.L41:
 408:./lib/chibios/os/rt/include/chvt.h ****       break;
 409:./lib/chibios/os/rt/include/chvt.h ****     }
 410:./lib/chibios/os/rt/include/chvt.h **** 
 411:./lib/chibios/os/rt/include/chvt.h ****     /* Consuming all timers between "vtp->lasttime" and now.*/
 412:./lib/chibios/os/rt/include/chvt.h ****     do {
 599              		.loc 6 412 5 is_stmt 1 view .LVU178
 600              	.LBB194:
 413:./lib/chibios/os/rt/include/chvt.h ****       vtfunc_t fn;
 601              		.loc 6 413 7 view .LVU179
 414:./lib/chibios/os/rt/include/chvt.h **** 
 415:./lib/chibios/os/rt/include/chvt.h ****       /* The "last time" becomes this timer's expiration time.*/
 416:./lib/chibios/os/rt/include/chvt.h ****       ch.vtlist.lasttime += vtp->delta;
 602              		.loc 6 416 7 view .LVU180
 603              		.loc 6 416 32 is_stmt 0 view .LVU181
 604 0018 A268     		ldr	r2, [r4, #8]
 605              		.loc 6 416 26 view .LVU182
 606 001a AB6A     		ldr	r3, [r5, #40]
 417:./lib/chibios/os/rt/include/chvt.h ****       nowdelta -= vtp->delta;
 607              		.loc 6 417 16 view .LVU183
 608 001c B61A     		subs	r6, r6, r2
 609              	.LVL44:
 416:./lib/chibios/os/rt/include/chvt.h ****       nowdelta -= vtp->delta;
 610              		.loc 6 416 26 view .LVU184
 611 001e 9B18     		adds	r3, r3, r2
 418:./lib/chibios/os/rt/include/chvt.h **** 
 419:./lib/chibios/os/rt/include/chvt.h ****       vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 420:./lib/chibios/os/rt/include/chvt.h ****       ch.vtlist.next = vtp->next;
 421:./lib/chibios/os/rt/include/chvt.h ****       fn = vtp->func;
 612              		.loc 6 421 10 view .LVU185
 613 0020 E268     		ldr	r2, [r4, #12]
 416:./lib/chibios/os/rt/include/chvt.h ****       nowdelta -= vtp->delta;
 614              		.loc 6 416 26 view .LVU186
 615 0022 AB62     		str	r3, [r5, #40]
 417:./lib/chibios/os/rt/include/chvt.h **** 
 616              		.loc 6 417 7 is_stmt 1 view .LVU187
 617              	.LVL45:
 419:./lib/chibios/os/rt/include/chvt.h ****       ch.vtlist.next = vtp->next;
 618              		.loc 6 419 7 view .LVU188
 619              		.loc 6 421 10 is_stmt 0 view .LVU189
 620 0024 0192     		str	r2, [sp, #4]
 422:./lib/chibios/os/rt/include/chvt.h ****       vtp->func = NULL;
 621              		.loc 6 422 17 view .LVU190
 622 0026 0022     		movs	r2, #0
 419:./lib/chibios/os/rt/include/chvt.h ****       ch.vtlist.next = vtp->next;
 623              		.loc 6 419 10 view .LVU191
 624 0028 2368     		ldr	r3, [r4]
 419:./lib/chibios/os/rt/include/chvt.h ****       ch.vtlist.next = vtp->next;
 625              		.loc 6 419 23 view .LVU192
 626 002a 5F60     		str	r7, [r3, #4]
 420:./lib/chibios/os/rt/include/chvt.h ****       fn = vtp->func;
 627              		.loc 6 420 7 is_stmt 1 view .LVU193
 420:./lib/chibios/os/rt/include/chvt.h ****       fn = vtp->func;
 628              		.loc 6 420 22 is_stmt 0 view .LVU194
 629 002c EB61     		str	r3, [r5, #28]
 421:./lib/chibios/os/rt/include/chvt.h ****       vtp->func = NULL;
 630              		.loc 6 421 7 is_stmt 1 view .LVU195
 631              	.LVL46:
 632              		.loc 6 422 7 view .LVU196
 633              		.loc 6 422 17 is_stmt 0 view .LVU197
 634 002e E260     		str	r2, [r4, #12]
 635              	.LVL47:
 423:./lib/chibios/os/rt/include/chvt.h **** 
 424:./lib/chibios/os/rt/include/chvt.h ****       /* If the list becomes empty then the timer is stopped.*/
 425:./lib/chibios/os/rt/include/chvt.h ****       if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 636              		.loc 6 425 7 is_stmt 1 view .LVU198
 637              		.loc 6 425 10 is_stmt 0 view .LVU199
 638 0030 BB42     		cmp	r3, r7
 639 0032 01D1     		bne	.L40
 426:./lib/chibios/os/rt/include/chvt.h ****         port_timer_stop_alarm();
 640              		.loc 6 426 9 is_stmt 1 view .LVU200
 641              	.LBB195:
 642              	.LBI195:
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 643              		.loc 7 81 20 view .LVU201
 644              	.LBB196:
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 645              		.loc 7 83 3 view .LVU202
 646 0034 FFF7FEFF 		bl	stStopAlarm
 647              	.LVL48:
 648              	.L40:
 649              	.LBE196:
 650              	.LBE195:
 427:./lib/chibios/os/rt/include/chvt.h ****       }
 428:./lib/chibios/os/rt/include/chvt.h **** 
 429:./lib/chibios/os/rt/include/chvt.h ****       /* The callback is invoked outside the kernel critical zone.*/
 430:./lib/chibios/os/rt/include/chvt.h ****       chSysUnlockFromISR();
 651              		.loc 6 430 7 view .LVU203
 652              	.LBB197:
 653              	.LBI197:
 346:./lib/chibios/os/rt/include/chsys.h **** }
 347:./lib/chibios/os/rt/include/chsys.h **** 
 348:./lib/chibios/os/rt/include/chsys.h **** /**
 349:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:./lib/chibios/os/rt/include/chsys.h ****  *
 351:./lib/chibios/os/rt/include/chsys.h ****  * @special
 352:./lib/chibios/os/rt/include/chsys.h ****  */
 353:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 354:./lib/chibios/os/rt/include/chsys.h **** 
 355:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 356:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 357:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 358:./lib/chibios/os/rt/include/chsys.h **** }
 359:./lib/chibios/os/rt/include/chsys.h **** 
 360:./lib/chibios/os/rt/include/chsys.h **** /**
 361:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:./lib/chibios/os/rt/include/chsys.h ****  *
 363:./lib/chibios/os/rt/include/chsys.h ****  * @special
 364:./lib/chibios/os/rt/include/chsys.h ****  */
 365:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 366:./lib/chibios/os/rt/include/chsys.h **** 
 367:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 368:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 369:./lib/chibios/os/rt/include/chsys.h **** 
 370:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 374:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 375:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 377:./lib/chibios/os/rt/include/chsys.h **** 
 378:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 379:./lib/chibios/os/rt/include/chsys.h **** }
 380:./lib/chibios/os/rt/include/chsys.h **** 
 381:./lib/chibios/os/rt/include/chsys.h **** /**
 382:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state from within an interrupt handler.
 383:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 384:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 385:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 386:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 387:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API before invoking any I-class
 388:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 389:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 390:./lib/chibios/os/rt/include/chsys.h ****  *
 391:./lib/chibios/os/rt/include/chsys.h ****  * @special
 392:./lib/chibios/os/rt/include/chsys.h ****  */
 393:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLockFromISR(void) {
 394:./lib/chibios/os/rt/include/chsys.h **** 
 395:./lib/chibios/os/rt/include/chsys.h ****   port_lock_from_isr();
 396:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 397:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 398:./lib/chibios/os/rt/include/chsys.h **** }
 399:./lib/chibios/os/rt/include/chsys.h **** 
 400:./lib/chibios/os/rt/include/chsys.h **** /**
 401:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state from within an interrupt handler.
 402:./lib/chibios/os/rt/include/chsys.h ****  *
 403:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 404:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 405:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 406:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 407:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API after invoking any I-class
 408:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 409:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 410:./lib/chibios/os/rt/include/chsys.h ****  *
 411:./lib/chibios/os/rt/include/chsys.h ****  * @special
 412:./lib/chibios/os/rt/include/chsys.h ****  */
 413:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlockFromISR(void) {
 654              		.loc 4 413 20 view .LVU204
 655              	.LBE197:
 656              	.LBE194:
 657              	.LBE236:
 658              	.LBE247:
 414:./lib/chibios/os/rt/include/chsys.h **** 
 415:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock_from_isr();
 659              		.loc 4 415 31 view .LVU205
 416:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_isr();
 660              		.loc 4 416 33 view .LVU206
 417:./lib/chibios/os/rt/include/chsys.h ****   port_unlock_from_isr();
 661              		.loc 4 417 3 view .LVU207
 662              	.LBB248:
 663              	.LBB237:
 664              	.LBB219:
 665              	.LBB205:
 666              	.LBB198:
 667              	.LBI198:
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 668              		.loc 2 416 20 view .LVU208
 669              	.LBE198:
 670              	.LBE205:
 671              	.LBE219:
 672              	.LBE237:
 673              	.LBE248:
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 674              		.loc 2 418 3 view .LVU209
 675              	.LBB249:
 676              	.LBB238:
 677              	.LBB220:
 678              	.LBB206:
 679              	.LBB203:
 680              	.LBB199:
 681              	.LBI199:
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 682              		.loc 2 396 20 view .LVU210
 683              	.LBE199:
 684              	.LBE203:
 685              	.LBE206:
 686              	.LBE220:
 687              	.LBE238:
 688              	.LBE249:
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 689              		.loc 2 398 3 view .LVU211
 690              	.LBB250:
 691              	.LBB239:
 692              	.LBB221:
 693              	.LBB207:
 694              	.LBB204:
 695              	.LBB202:
 696              	.LBB200:
 697              	.LBI200:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 698              		.loc 5 129 27 view .LVU212
 699              	.LBB201:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 700              		.loc 5 131 3 view .LVU213
 701              		.syntax divided
 702              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 703 0038 62B6     		cpsie i
 704              	@ 0 "" 2
 705              		.thumb
 706              		.syntax unified
 707              	.LBE201:
 708              	.LBE200:
 709              	.LBE202:
 710              	.LBE204:
 711              	.LBE207:
 431:./lib/chibios/os/rt/include/chvt.h ****       fn(vtp->par);
 712              		.loc 6 431 7 view .LVU214
 713 003a 2069     		ldr	r0, [r4, #16]
 714 003c 019B     		ldr	r3, [sp, #4]
 715 003e 9847     		blx	r3
 716              	.LVL49:
 432:./lib/chibios/os/rt/include/chvt.h ****       chSysLockFromISR();
 717              		.loc 6 432 7 view .LVU215
 718              	.LBB208:
 719              	.LBI208:
 393:./lib/chibios/os/rt/include/chsys.h **** 
 720              		.loc 4 393 20 view .LVU216
 721              	.LBE208:
 722              	.LBE221:
 723              	.LBE239:
 724              	.LBE250:
 395:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 725              		.loc 4 395 3 view .LVU217
 726              	.LBB251:
 727              	.LBB240:
 728              	.LBB222:
 729              	.LBB216:
 730              	.LBB209:
 731              	.LBI209:
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 732              		.loc 2 406 20 view .LVU218
 733              	.LBE209:
 734              	.LBE216:
 735              	.LBE222:
 736              	.LBE240:
 737              	.LBE251:
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 738              		.loc 2 408 3 view .LVU219
 739              	.LBB252:
 740              	.LBB241:
 741              	.LBB223:
 742              	.LBB217:
 743              	.LBB214:
 744              	.LBB210:
 745              	.LBI210:
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 746              		.loc 2 387 20 view .LVU220
 747              	.LBE210:
 748              	.LBE214:
 749              	.LBE217:
 750              	.LBE223:
 751              	.LBE241:
 752              	.LBE252:
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 753              		.loc 2 389 3 view .LVU221
 754              	.LBB253:
 755              	.LBB242:
 756              	.LBB224:
 757              	.LBB218:
 758              	.LBB215:
 759              	.LBB213:
 760              	.LBB211:
 761              	.LBI211:
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 762              		.loc 5 140 27 view .LVU222
 763              	.LBB212:
 764              		.loc 5 142 3 view .LVU223
 765              		.syntax divided
 766              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 767 0040 72B6     		cpsid i
 768              	@ 0 "" 2
 769              		.thumb
 770              		.syntax unified
 771              	.LBE212:
 772              	.LBE211:
 773              	.LBE213:
 774              	.LBE215:
 775              	.LBE218:
 776              	.LBE224:
 777              	.LBE242:
 778              	.LBE253:
 396:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 779              		.loc 4 396 34 view .LVU224
 397:./lib/chibios/os/rt/include/chsys.h **** }
 780              		.loc 4 397 29 view .LVU225
 781              	.LBB254:
 782              	.LBB243:
 783              	.LBB225:
 433:./lib/chibios/os/rt/include/chvt.h **** 
 434:./lib/chibios/os/rt/include/chvt.h ****       /* Next element in the list.*/
 435:./lib/chibios/os/rt/include/chvt.h ****       vtp = ch.vtlist.next;
 784              		.loc 6 435 7 view .LVU226
 785              		.loc 6 435 11 is_stmt 0 view .LVU227
 786 0042 EC69     		ldr	r4, [r5, #28]
 787              	.LVL50:
 788              		.loc 6 435 11 view .LVU228
 789              	.LBE225:
 436:./lib/chibios/os/rt/include/chvt.h ****     }
 437:./lib/chibios/os/rt/include/chvt.h ****     while (vtp->delta <= nowdelta);
 790              		.loc 6 437 5 view .LVU229
 791 0044 A368     		ldr	r3, [r4, #8]
 792 0046 9E42     		cmp	r6, r3
 793 0048 E6D2     		bcs	.L41
 794 004a DCE7     		b	.L42
 795              	.LVL51:
 796              	.L39:
 438:./lib/chibios/os/rt/include/chvt.h ****   }
 439:./lib/chibios/os/rt/include/chvt.h **** 
 440:./lib/chibios/os/rt/include/chvt.h ****   /* If the list is empty, nothing else to do.*/
 441:./lib/chibios/os/rt/include/chvt.h ****   if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 797              		.loc 6 441 3 is_stmt 1 view .LVU230
 798              		.loc 6 441 16 is_stmt 0 view .LVU231
 799 004c E969     		ldr	r1, [r5, #28]
 800              		.loc 6 441 6 view .LVU232
 801 004e B942     		cmp	r1, r7
 802 0050 0BD0     		beq	.L38
 442:./lib/chibios/os/rt/include/chvt.h ****     return;
 443:./lib/chibios/os/rt/include/chvt.h ****   }
 444:./lib/chibios/os/rt/include/chvt.h **** 
 445:./lib/chibios/os/rt/include/chvt.h ****   /* The "unprocessed nowdelta" time slice is added to "last time"
 446:./lib/chibios/os/rt/include/chvt.h ****      and subtracted to next timer's delta.*/
 447:./lib/chibios/os/rt/include/chvt.h ****   ch.vtlist.lasttime += nowdelta;
 803              		.loc 6 447 3 is_stmt 1 view .LVU233
 448:./lib/chibios/os/rt/include/chvt.h ****   ch.vtlist.next->delta -= nowdelta;
 804              		.loc 6 448 25 is_stmt 0 view .LVU234
 805 0052 8868     		ldr	r0, [r1, #8]
 447:./lib/chibios/os/rt/include/chvt.h ****   ch.vtlist.next->delta -= nowdelta;
 806              		.loc 6 447 22 view .LVU235
 807 0054 AA62     		str	r2, [r5, #40]
 808              		.loc 6 448 3 is_stmt 1 view .LVU236
 809              		.loc 6 448 25 is_stmt 0 view .LVU237
 810 0056 1B18     		adds	r3, r3, r0
 811 0058 9B1A     		subs	r3, r3, r2
 812 005a 8B60     		str	r3, [r1, #8]
 449:./lib/chibios/os/rt/include/chvt.h **** 
 450:./lib/chibios/os/rt/include/chvt.h ****   /* Recalculating the next alarm time.*/
 451:./lib/chibios/os/rt/include/chvt.h ****   delta = vtp->delta - chTimeDiffX(ch.vtlist.lasttime, now);
 813              		.loc 6 451 3 is_stmt 1 view .LVU238
 814              	.LVL52:
 815              		.loc 6 451 3 is_stmt 0 view .LVU239
 816              	.LBE243:
 817              	.LBE254:
 818              		.loc 9 463 3 is_stmt 1 view .LVU240
 819              	.LBB255:
 820              	.LBB244:
 452:./lib/chibios/os/rt/include/chvt.h ****   if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 821              		.loc 6 452 3 view .LVU241
 453:./lib/chibios/os/rt/include/chvt.h ****     delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 454:./lib/chibios/os/rt/include/chvt.h ****   }
 455:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 456:./lib/chibios/os/rt/include/chvt.h ****   /* The delta could be too large for the physical timer to handle.*/
 457:./lib/chibios/os/rt/include/chvt.h ****   else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 458:./lib/chibios/os/rt/include/chvt.h ****     delta = (sysinterval_t)TIME_MAX_SYSTIME;
 459:./lib/chibios/os/rt/include/chvt.h ****   }
 460:./lib/chibios/os/rt/include/chvt.h **** #endif
 461:./lib/chibios/os/rt/include/chvt.h ****   port_timer_set_alarm(chTimeAddX(now, delta));
 822              		.loc 6 461 3 view .LVU242
 823              	.LBB226:
 824              	.LBI226:
 440:./lib/chibios/os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 825              		.loc 9 440 25 view .LVU243
 826              	.LBB227:
 447:./lib/chibios/os/rt/include/chtime.h **** }
 827              		.loc 9 447 3 view .LVU244
 447:./lib/chibios/os/rt/include/chtime.h **** }
 828              		.loc 9 447 3 is_stmt 0 view .LVU245
 829              	.LBE227:
 830              	.LBE226:
 831              	.LBB229:
 832              	.LBI229:
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 833              		.loc 7 93 20 is_stmt 1 view .LVU246
 834              	.LBB230:
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 835              		.loc 7 95 3 view .LVU247
 836              	.LBE230:
 837              	.LBE229:
 838              	.LBB232:
 839              	.LBB228:
 447:./lib/chibios/os/rt/include/chtime.h **** }
 840              		.loc 9 447 18 is_stmt 0 view .LVU248
 841 005c A068     		ldr	r0, [r4, #8]
 842 005e 0228     		cmp	r0, #2
 843 0060 00D2     		bcs	.L44
 844              	.LVL53:
 447:./lib/chibios/os/rt/include/chtime.h **** }
 845              		.loc 9 447 18 view .LVU249
 846 0062 0220     		movs	r0, #2
 847              	.L44:
 848 0064 8018     		adds	r0, r0, r2
 849              	.LBE228:
 850              	.LBE232:
 851              	.LBB233:
 852              	.LBB231:
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 853              		.loc 7 95 3 view .LVU250
 854 0066 FFF7FEFF 		bl	stSetAlarm
 855              	.LVL54:
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 856              		.loc 7 95 3 view .LVU251
 857              	.LBE231:
 858              	.LBE233:
 859              	.LBE244:
 860              	.LBE255:
 356:lib/chibios/os/rt/src/chsys.c ****   CH_CFG_SYSTEM_TICK_HOOK();
 861              		.loc 1 356 3 is_stmt 1 view .LVU252
 862              		.loc 1 356 28 view .LVU253
 863              	.L38:
 357:lib/chibios/os/rt/src/chsys.c **** }
 864              		.loc 1 357 1 is_stmt 0 view .LVU254
 865              		@ sp needed
 866 006a F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 867              	.L47:
 868              		.align	2
 869              	.L46:
 870 006c 00000000 		.word	ch
 871 0070 1C000000 		.word	ch+28
 872              		.cfi_endproc
 873              	.LFE158:
 875              		.section	.text.chSysGetStatusAndLockX,"ax",%progbits
 876              		.align	1
 877              		.global	chSysGetStatusAndLockX
 878              		.syntax unified
 879              		.code	16
 880              		.thumb_func
 881              		.fpu softvfp
 883              	chSysGetStatusAndLockX:
 884              	.LFB159:
 358:lib/chibios/os/rt/src/chsys.c **** 
 359:lib/chibios/os/rt/src/chsys.c **** /**
 360:lib/chibios/os/rt/src/chsys.c ****  * @brief   Returns the execution status and enters a critical zone.
 361:lib/chibios/os/rt/src/chsys.c ****  * @details This functions enters into a critical zone and can be called
 362:lib/chibios/os/rt/src/chsys.c ****  *          from any context. Because its flexibility it is less efficient
 363:lib/chibios/os/rt/src/chsys.c ****  *          than @p chSysLock() which is preferable when the calling context
 364:lib/chibios/os/rt/src/chsys.c ****  *          is known.
 365:lib/chibios/os/rt/src/chsys.c ****  * @post    The system is in a critical zone.
 366:lib/chibios/os/rt/src/chsys.c ****  *
 367:lib/chibios/os/rt/src/chsys.c ****  * @return              The previous system status, the encoding of this
 368:lib/chibios/os/rt/src/chsys.c ****  *                      status word is architecture-dependent and opaque.
 369:lib/chibios/os/rt/src/chsys.c ****  *
 370:lib/chibios/os/rt/src/chsys.c ****  * @xclass
 371:lib/chibios/os/rt/src/chsys.c ****  */
 372:lib/chibios/os/rt/src/chsys.c **** syssts_t chSysGetStatusAndLockX(void) {
 885              		.loc 1 372 39 is_stmt 1 view -0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889              		@ link register save eliminated.
 373:lib/chibios/os/rt/src/chsys.c **** 
 374:lib/chibios/os/rt/src/chsys.c ****   syssts_t sts = port_get_irq_status();
 890              		.loc 1 374 3 view .LVU256
 891              	.LBB274:
 892              	.LBI274:
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 893              		.loc 2 352 24 view .LVU257
 894              	.LBE274:
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 895              		.loc 2 354 3 view .LVU258
 896              	.LBB277:
 897              	.LBB275:
 898              	.LBI275:
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 899              		.loc 5 382 31 view .LVU259
 900              	.LBB276:
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 901              		.loc 5 384 3 view .LVU260
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 902              		.loc 5 386 3 view .LVU261
 903              		.syntax divided
 904              	@ 386 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 905 0000 EFF31080 		MRS r0, primask
 906              	@ 0 "" 2
 907              	.LVL55:
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 908              		.loc 5 387 3 view .LVU262
 909              		.loc 5 387 3 is_stmt 0 view .LVU263
 910              		.thumb
 911              		.syntax unified
 912              	.LBE276:
 913              	.LBE275:
 914              	.LBE277:
 375:lib/chibios/os/rt/src/chsys.c ****   if (port_irq_enabled(sts)) {
 915              		.loc 1 375 3 is_stmt 1 view .LVU264
 916              	.LBB278:
 917              	.LBI278:
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 918              		.loc 2 366 20 view .LVU265
 919              	.LBB279:
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 920              		.loc 2 368 3 view .LVU266
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 921              		.loc 2 368 3 is_stmt 0 view .LVU267
 922              	.LBE279:
 923              	.LBE278:
 924              		.loc 1 375 6 view .LVU268
 925 0004 C307     		lsls	r3, r0, #31
 926 0006 02D4     		bmi	.L48
 376:lib/chibios/os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 927              		.loc 1 376 5 is_stmt 1 view .LVU269
 928              	.LBB280:
 929              	.LBI280:
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 930              		.loc 2 378 20 view .LVU270
 931              	.LBB281:
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 932              		.loc 2 380 3 view .LVU271
 933              	.LBB282:
 934              	.LBI282:
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 935              		.loc 5 205 31 view .LVU272
 936              	.LBB283:
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 937              		.loc 5 207 3 view .LVU273
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 938              		.loc 5 209 3 view .LVU274
 939              		.syntax divided
 940              	@ 209 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 941 0008 EFF30583 		MRS r3, ipsr
 942              	@ 0 "" 2
 943              	.LVL56:
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 944              		.loc 5 210 3 view .LVU275
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 945              		.loc 5 210 3 is_stmt 0 view .LVU276
 946              		.thumb
 947              		.syntax unified
 948              	.LBE283:
 949              	.LBE282:
 950              	.LBE281:
 951              	.LBE280:
 377:lib/chibios/os/rt/src/chsys.c ****       chSysLockFromISR();
 378:lib/chibios/os/rt/src/chsys.c ****     }
 379:lib/chibios/os/rt/src/chsys.c ****     else {
 380:lib/chibios/os/rt/src/chsys.c ****       chSysLock();
 952              		.loc 1 380 7 is_stmt 1 view .LVU277
 953              	.LBB284:
 954              	.LBI284:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 955              		.loc 4 353 20 view .LVU278
 956              	.LBE284:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 957              		.loc 4 355 3 view .LVU279
 958              	.LBB289:
 959              	.LBB285:
 960              	.LBI285:
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 961              		.loc 2 387 20 view .LVU280
 962              	.LBE285:
 963              	.LBE289:
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 964              		.loc 2 389 3 view .LVU281
 965              	.LBB290:
 966              	.LBB288:
 967              	.LBB286:
 968              	.LBI286:
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 969              		.loc 5 140 27 view .LVU282
 970              	.LBB287:
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 971              		.loc 5 142 3 view .LVU283
 972              		.syntax divided
 973              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 974 000c 72B6     		cpsid i
 975              	@ 0 "" 2
 976              		.thumb
 977              		.syntax unified
 978              	.LBE287:
 979              	.LBE286:
 980              	.LBE288:
 981              	.LBE290:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 982              		.loc 4 356 34 view .LVU284
 357:./lib/chibios/os/rt/include/chsys.h **** }
 983              		.loc 4 357 20 view .LVU285
 381:lib/chibios/os/rt/src/chsys.c ****     }
 382:lib/chibios/os/rt/src/chsys.c ****   }
 383:lib/chibios/os/rt/src/chsys.c ****   return sts;
 984              		.loc 1 383 3 view .LVU286
 985              	.L48:
 384:lib/chibios/os/rt/src/chsys.c **** }
 986              		.loc 1 384 1 is_stmt 0 view .LVU287
 987              		@ sp needed
 988 000e 7047     		bx	lr
 989              		.cfi_endproc
 990              	.LFE159:
 992              		.section	.text.chSysRestoreStatusX,"ax",%progbits
 993              		.align	1
 994              		.global	chSysRestoreStatusX
 995              		.syntax unified
 996              		.code	16
 997              		.thumb_func
 998              		.fpu softvfp
 1000              	chSysRestoreStatusX:
 1001              	.LVL57:
 1002              	.LFB160:
 385:lib/chibios/os/rt/src/chsys.c **** 
 386:lib/chibios/os/rt/src/chsys.c **** /**
 387:lib/chibios/os/rt/src/chsys.c ****  * @brief   Restores the specified execution status and leaves a critical zone.
 388:lib/chibios/os/rt/src/chsys.c ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 389:lib/chibios/os/rt/src/chsys.c ****  *          if exiting the critical zone and if not in ISR context.
 390:lib/chibios/os/rt/src/chsys.c ****  *
 391:lib/chibios/os/rt/src/chsys.c ****  * @param[in] sts       the system status to be restored.
 392:lib/chibios/os/rt/src/chsys.c ****  *
 393:lib/chibios/os/rt/src/chsys.c ****  * @xclass
 394:lib/chibios/os/rt/src/chsys.c ****  */
 395:lib/chibios/os/rt/src/chsys.c **** void chSysRestoreStatusX(syssts_t sts) {
 1003              		.loc 1 395 40 is_stmt 1 view -0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 396:lib/chibios/os/rt/src/chsys.c **** 
 397:lib/chibios/os/rt/src/chsys.c ****   if (port_irq_enabled(sts)) {
 1007              		.loc 1 397 3 view .LVU289
 1008              	.LBB307:
 1009              	.LBI307:
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 1010              		.loc 2 366 20 view .LVU290
 1011              	.LBB308:
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 1012              		.loc 2 368 3 view .LVU291
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 1013              		.loc 2 368 3 is_stmt 0 view .LVU292
 1014              	.LBE308:
 1015              	.LBE307:
 395:lib/chibios/os/rt/src/chsys.c **** 
 1016              		.loc 1 395 40 view .LVU293
 1017 0000 10B5     		push	{r4, lr}
 1018              		.cfi_def_cfa_offset 8
 1019              		.cfi_offset 4, -8
 1020              		.cfi_offset 14, -4
 1021              		.loc 1 397 6 view .LVU294
 1022 0002 C307     		lsls	r3, r0, #31
 1023 0004 04D4     		bmi	.L51
 398:lib/chibios/os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 1024              		.loc 1 398 5 is_stmt 1 view .LVU295
 1025              	.LBB309:
 1026              	.LBI309:
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 1027              		.loc 2 378 20 view .LVU296
 1028              	.LBB310:
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 1029              		.loc 2 380 3 view .LVU297
 1030              	.LBB311:
 1031              	.LBI311:
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1032              		.loc 5 205 31 view .LVU298
 1033              	.LBB312:
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 1034              		.loc 5 207 3 view .LVU299
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 1035              		.loc 5 209 3 view .LVU300
 1036              		.syntax divided
 1037              	@ 209 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1038 0006 EFF30583 		MRS r3, ipsr
 1039              	@ 0 "" 2
 1040              	.LVL58:
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 1041              		.loc 5 210 3 view .LVU301
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 1042              		.loc 5 210 3 is_stmt 0 view .LVU302
 1043              		.thumb
 1044              		.syntax unified
 1045              	.LBE312:
 1046              	.LBE311:
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 1047              		.loc 2 380 31 view .LVU303
 1048 000a DB05     		lsls	r3, r3, #23
 1049              	.LBE310:
 1050              	.LBE309:
 1051              		.loc 1 398 8 view .LVU304
 1052 000c 01D0     		beq	.L53
 1053              	.LVL59:
 1054              	.L54:
 399:lib/chibios/os/rt/src/chsys.c ****       chSysUnlockFromISR();
 400:lib/chibios/os/rt/src/chsys.c ****     }
 401:lib/chibios/os/rt/src/chsys.c ****     else {
 402:lib/chibios/os/rt/src/chsys.c ****       chSchRescheduleS();
 403:lib/chibios/os/rt/src/chsys.c ****       chSysUnlock();
 1055              		.loc 1 403 7 is_stmt 1 view .LVU305
 1056              	.LBB313:
 1057              	.LBI313:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 1058              		.loc 4 365 20 view .LVU306
 1059              	.LBB314:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1060              		.loc 4 367 22 view .LVU307
 368:./lib/chibios/os/rt/include/chsys.h **** 
 1061              		.loc 4 368 33 view .LVU308
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1062              		.loc 4 374 3 view .LVU309
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1063              		.loc 4 374 3 view .LVU310
 378:./lib/chibios/os/rt/include/chsys.h **** }
 1064              		.loc 4 378 3 view .LVU311
 1065              	.LBB315:
 1066              	.LBI315:
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 1067              		.loc 2 396 20 view .LVU312
 1068              	.LBE315:
 1069              	.LBE314:
 1070              	.LBE313:
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 1071              		.loc 2 398 3 view .LVU313
 1072              	.LBB320:
 1073              	.LBB319:
 1074              	.LBB318:
 1075              	.LBB316:
 1076              	.LBI316:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1077              		.loc 5 129 27 view .LVU314
 1078              	.LBB317:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 1079              		.loc 5 131 3 view .LVU315
 1080              		.syntax divided
 1081              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1082 000e 62B6     		cpsie i
 1083              	@ 0 "" 2
 1084              		.thumb
 1085              		.syntax unified
 1086              	.L51:
 1087              	.LBE317:
 1088              	.LBE316:
 1089              	.LBE318:
 1090              	.LBE319:
 1091              	.LBE320:
 404:lib/chibios/os/rt/src/chsys.c ****     }
 405:lib/chibios/os/rt/src/chsys.c ****   }
 406:lib/chibios/os/rt/src/chsys.c **** }
 1092              		.loc 1 406 1 is_stmt 0 view .LVU316
 1093              		@ sp needed
 1094 0010 10BD     		pop	{r4, pc}
 1095              	.LVL60:
 1096              	.L53:
 402:lib/chibios/os/rt/src/chsys.c ****       chSysUnlock();
 1097              		.loc 1 402 7 is_stmt 1 view .LVU317
 1098 0012 FFF7FEFF 		bl	chSchRescheduleS
 1099              	.LVL61:
 402:lib/chibios/os/rt/src/chsys.c ****       chSysUnlock();
 1100              		.loc 1 402 7 is_stmt 0 view .LVU318
 1101 0016 FAE7     		b	.L54
 1102              		.cfi_endproc
 1103              	.LFE160:
 1105              		.global	ch_idle_thread_wa
 1106              		.section	.bss.ch_idle_thread_wa,"aw",%nobits
 1107              		.align	3
 1110              	ch_idle_thread_wa:
 1111 0000 00000000 		.space	208
 1111      00000000 
 1111      00000000 
 1111      00000000 
 1111      00000000 
 1112              		.section	.rodata.idle_descriptor.5835,"a"
 1113              		.align	2
 1114              		.set	.LANCHOR0,. + 0
 1117              	idle_descriptor.5835:
 1118 0000 00000000 		.word	.LC9
 1119 0004 00000000 		.word	ch_idle_thread_wa
 1120 0008 D0000000 		.word	ch_idle_thread_wa+208
 1121 000c 01000000 		.word	1
 1122 0010 00000000 		.word	_idle_thread
 1123 0014 00000000 		.word	0
 1124              		.section	.rodata.str1.1,"aMS",%progbits,1
 1125              	.LC9:
 1126 0000 69646C65 		.ascii	"idle\000"
 1126      00
 1127              		.text
 1128              	.Letext0:
 1129              		.file 10 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\lib\\gcc\\arm-none-eabi\\8.3.1\\i
 1130              		.file 11 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\
 1131              		.file 12 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_std
 1132              		.file 13 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1133              		.file 14 "./lib/chibios/os/rt/include/chsystypes.h"
 1134              		.file 15 "./lib/chibios/os/rt/include/chschd.h"
 1135              		.file 16 "./lib/chibios/os/common/ext/ST/STM32F0xx/stm32f072xb.h"
 1136              		.file 17 "./lib/chibios/os/common/ext/ST/STM32F0xx/system_stm32f0xx.h"
 1137              		.file 18 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1138              		.file 19 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 1139              		.file 20 "./lib/chibios/os/rt/include/chsem.h"
 1140              		.file 21 "./lib/chibios/os/rt/include/chmtx.h"
 1141              		.file 22 "./lib/chibios/os/rt/include/chthreads.h"
 1142              		.file 23 "./lib/chibios/os/rt/include/chregistry.h"
 1143              		.file 24 "./lib/chibios/os/oslib/include/chmemcore.h"
 1144              		.file 25 "./lib/chibios/os/hal/include/hal_st.h"
DEFINED SYMBOLS
                            *ABS*:00000000 chsys.c
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:16     .text._idle_thread:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:23     .text._idle_thread:00000000 _idle_thread
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:56     .text.chSysInit:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:63     .text.chSysInit:00000000 chSysInit
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:184    .text.chSysInit:00000034 $d
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:194    .text.chSysHalt:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:201    .text.chSysHalt:00000000 chSysHalt
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:245    .text.chSysHalt:00000008 $d
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:250    .text.chSysIntegrityCheckI:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:257    .text.chSysIntegrityCheckI:00000000 chSysIntegrityCheckI
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:481    .text.chSysIntegrityCheckI:0000007c $d
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:488    .text.chSysTimerHandlerI:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:495    .text.chSysTimerHandlerI:00000000 chSysTimerHandlerI
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:870    .text.chSysTimerHandlerI:0000006c $d
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:876    .text.chSysGetStatusAndLockX:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:883    .text.chSysGetStatusAndLockX:00000000 chSysGetStatusAndLockX
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:993    .text.chSysRestoreStatusX:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:1000   .text.chSysRestoreStatusX:00000000 chSysRestoreStatusX
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:1110   .bss.ch_idle_thread_wa:00000000 ch_idle_thread_wa
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:1107   .bss.ch_idle_thread_wa:00000000 $d
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:1113   .rodata.idle_descriptor.5835:00000000 $d
C:\Users\kyleo\AppData\Local\Temp\ccCsVn3h.s:1117   .rodata.idle_descriptor.5835:00000000 idle_descriptor.5835

UNDEFINED SYMBOLS
_scheduler_init
_vt_init
_core_init
_thread_init
chThdCreate
ch_debug
ch
stStopAlarm
stSetAlarm
chSchRescheduleS
