   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 2
  11              		.file	"chsem.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.chSemObjectInit,"ax",%progbits
  16              		.align	1
  17              		.global	chSemObjectInit
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	chSemObjectInit:
  25              	.LVL0:
  26              	.LFB154:
  27              		.file 1 "lib/chibios/os/rt/src/chsem.c"
   1:lib/chibios/os/rt/src/chsem.c **** /*
   2:lib/chibios/os/rt/src/chsem.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chsem.c **** 
   4:lib/chibios/os/rt/src/chsem.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chsem.c **** 
   6:lib/chibios/os/rt/src/chsem.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chsem.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chsem.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chsem.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chsem.c **** 
  11:lib/chibios/os/rt/src/chsem.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chsem.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chsem.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chsem.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chsem.c **** 
  16:lib/chibios/os/rt/src/chsem.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chsem.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chsem.c **** */
  19:lib/chibios/os/rt/src/chsem.c **** 
  20:lib/chibios/os/rt/src/chsem.c **** /**
  21:lib/chibios/os/rt/src/chsem.c ****  * @file    chsem.c
  22:lib/chibios/os/rt/src/chsem.c ****  * @brief   Semaphores code.
  23:lib/chibios/os/rt/src/chsem.c ****  *
  24:lib/chibios/os/rt/src/chsem.c ****  * @addtogroup semaphores
  25:lib/chibios/os/rt/src/chsem.c ****  * @details Semaphores related APIs and services.
  26:lib/chibios/os/rt/src/chsem.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/rt/src/chsem.c ****  *          Semaphores are a flexible synchronization primitive, ChibiOS/RT
  28:lib/chibios/os/rt/src/chsem.c ****  *          implements semaphores in their "counting semaphores" variant as
  29:lib/chibios/os/rt/src/chsem.c ****  *          defined by Edsger Dijkstra plus several enhancements like:
  30:lib/chibios/os/rt/src/chsem.c ****  *          - Wait operation with timeout.
  31:lib/chibios/os/rt/src/chsem.c ****  *          - Reset operation.
  32:lib/chibios/os/rt/src/chsem.c ****  *          - Atomic wait+signal operation.
  33:lib/chibios/os/rt/src/chsem.c ****  *          - Return message from the wait operation (OK, RESET, TIMEOUT).
  34:lib/chibios/os/rt/src/chsem.c ****  *          .
  35:lib/chibios/os/rt/src/chsem.c ****  *          The binary semaphores variant can be easily implemented using
  36:lib/chibios/os/rt/src/chsem.c ****  *          counting semaphores.<br>
  37:lib/chibios/os/rt/src/chsem.c ****  *          Operations defined for semaphores:
  38:lib/chibios/os/rt/src/chsem.c ****  *          - <b>Signal</b>: The semaphore counter is increased and if the
  39:lib/chibios/os/rt/src/chsem.c ****  *            result is non-positive then a waiting thread is removed from
  40:lib/chibios/os/rt/src/chsem.c ****  *            the semaphore queue and made ready for execution.
  41:lib/chibios/os/rt/src/chsem.c ****  *          - <b>Wait</b>: The semaphore counter is decreased and if the result
  42:lib/chibios/os/rt/src/chsem.c ****  *            becomes negative the thread is queued in the semaphore and
  43:lib/chibios/os/rt/src/chsem.c ****  *            suspended.
  44:lib/chibios/os/rt/src/chsem.c ****  *          - <b>Reset</b>: The semaphore counter is reset to a non-negative
  45:lib/chibios/os/rt/src/chsem.c ****  *            value and all the threads in the queue are released.
  46:lib/chibios/os/rt/src/chsem.c ****  *          .
  47:lib/chibios/os/rt/src/chsem.c ****  *          Semaphores can be used as guards for mutual exclusion zones
  48:lib/chibios/os/rt/src/chsem.c ****  *          (note that mutexes are recommended for this kind of use) but
  49:lib/chibios/os/rt/src/chsem.c ****  *          also have other uses, queues guards and counters for example.<br>
  50:lib/chibios/os/rt/src/chsem.c ****  *          Semaphores usually use a FIFO queuing strategy but it is possible
  51:lib/chibios/os/rt/src/chsem.c ****  *          to make them order threads by priority by enabling
  52:lib/chibios/os/rt/src/chsem.c ****  *          @p CH_CFG_USE_SEMAPHORES_PRIORITY in @p chconf.h.
  53:lib/chibios/os/rt/src/chsem.c ****  * @pre     In order to use the semaphore APIs the @p CH_CFG_USE_SEMAPHORES
  54:lib/chibios/os/rt/src/chsem.c ****  *          option must be enabled in @p chconf.h.
  55:lib/chibios/os/rt/src/chsem.c ****  * @{
  56:lib/chibios/os/rt/src/chsem.c ****  */
  57:lib/chibios/os/rt/src/chsem.c **** 
  58:lib/chibios/os/rt/src/chsem.c **** #include "ch.h"
  59:lib/chibios/os/rt/src/chsem.c **** 
  60:lib/chibios/os/rt/src/chsem.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  61:lib/chibios/os/rt/src/chsem.c **** 
  62:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  63:lib/chibios/os/rt/src/chsem.c **** /* Module exported variables.                                                */
  64:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  65:lib/chibios/os/rt/src/chsem.c **** 
  66:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  67:lib/chibios/os/rt/src/chsem.c **** /* Module local types.                                                       */
  68:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  69:lib/chibios/os/rt/src/chsem.c **** 
  70:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  71:lib/chibios/os/rt/src/chsem.c **** /* Module local variables.                                                   */
  72:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  73:lib/chibios/os/rt/src/chsem.c **** 
  74:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  75:lib/chibios/os/rt/src/chsem.c **** /* Module local functions.                                                   */
  76:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  77:lib/chibios/os/rt/src/chsem.c **** 
  78:lib/chibios/os/rt/src/chsem.c **** #if CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE
  79:lib/chibios/os/rt/src/chsem.c **** #define sem_insert(tp, qp) queue_prio_insert(tp, qp)
  80:lib/chibios/os/rt/src/chsem.c **** #else
  81:lib/chibios/os/rt/src/chsem.c **** #define sem_insert(tp, qp) queue_insert(tp, qp)
  82:lib/chibios/os/rt/src/chsem.c **** #endif
  83:lib/chibios/os/rt/src/chsem.c **** 
  84:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  85:lib/chibios/os/rt/src/chsem.c **** /* Module exported functions.                                                */
  86:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  87:lib/chibios/os/rt/src/chsem.c **** 
  88:lib/chibios/os/rt/src/chsem.c **** /**
  89:lib/chibios/os/rt/src/chsem.c ****  * @brief   Initializes a semaphore with the specified counter value.
  90:lib/chibios/os/rt/src/chsem.c ****  *
  91:lib/chibios/os/rt/src/chsem.c ****  * @param[out] sp       pointer to a @p semaphore_t structure
  92:lib/chibios/os/rt/src/chsem.c ****  * @param[in] n         initial value of the semaphore counter. Must be
  93:lib/chibios/os/rt/src/chsem.c ****  *                      non-negative.
  94:lib/chibios/os/rt/src/chsem.c ****  *
  95:lib/chibios/os/rt/src/chsem.c ****  * @init
  96:lib/chibios/os/rt/src/chsem.c ****  */
  97:lib/chibios/os/rt/src/chsem.c **** void chSemObjectInit(semaphore_t *sp, cnt_t n) {
  28              		.loc 1 97 48 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  98:lib/chibios/os/rt/src/chsem.c **** 
  99:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  33              		.loc 1 99 3 view .LVU1
  34              		.loc 1 99 3 view .LVU2
 100:lib/chibios/os/rt/src/chsem.c **** 
 101:lib/chibios/os/rt/src/chsem.c ****   queue_init(&sp->queue);
  35              		.loc 1 101 3 view .LVU3
  36              	.LBB67:
  37              	.LBI67:
  38              		.file 2 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 118:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** /**
 122:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:./lib/chibios/os/rt/include/chschd.h ****  */
 124:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 125:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:./lib/chibios/os/rt/include/chschd.h **** };
 127:./lib/chibios/os/rt/include/chschd.h **** 
 128:./lib/chibios/os/rt/include/chschd.h **** /**
 129:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:./lib/chibios/os/rt/include/chschd.h ****  */
 131:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 132:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:./lib/chibios/os/rt/include/chschd.h **** };
 135:./lib/chibios/os/rt/include/chschd.h **** 
 136:./lib/chibios/os/rt/include/chschd.h **** /**
 137:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:./lib/chibios/os/rt/include/chschd.h ****  */
 142:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 143:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:./lib/chibios/os/rt/include/chschd.h **** #endif
 150:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:./lib/chibios/os/rt/include/chschd.h ****   /**
 153:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:./lib/chibios/os/rt/include/chschd.h ****    */
 155:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 156:./lib/chibios/os/rt/include/chschd.h **** #endif
 157:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   /**
 160:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 163:./lib/chibios/os/rt/include/chschd.h ****    */
 164:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:./lib/chibios/os/rt/include/chschd.h **** #endif
 166:./lib/chibios/os/rt/include/chschd.h ****   /**
 167:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:./lib/chibios/os/rt/include/chschd.h ****    */
 169:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 170:./lib/chibios/os/rt/include/chschd.h ****   /**
 171:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:./lib/chibios/os/rt/include/chschd.h ****    */
 173:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 174:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:./lib/chibios/os/rt/include/chschd.h ****   /**
 176:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:./lib/chibios/os/rt/include/chschd.h ****    */
 178:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 179:./lib/chibios/os/rt/include/chschd.h **** #endif
 180:./lib/chibios/os/rt/include/chschd.h ****   /**
 181:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:./lib/chibios/os/rt/include/chschd.h ****    */
 183:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             ticks;
 185:./lib/chibios/os/rt/include/chschd.h **** #endif
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:./lib/chibios/os/rt/include/chschd.h ****    */
 191:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 192:./lib/chibios/os/rt/include/chschd.h **** #endif
 193:./lib/chibios/os/rt/include/chschd.h ****   /**
 194:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:./lib/chibios/os/rt/include/chschd.h ****    */
 198:./lib/chibios/os/rt/include/chschd.h ****   union {
 199:./lib/chibios/os/rt/include/chschd.h ****     /**
 200:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:./lib/chibios/os/rt/include/chschd.h ****      */
 205:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:./lib/chibios/os/rt/include/chschd.h ****     /**
 207:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 211:./lib/chibios/os/rt/include/chschd.h ****      */
 212:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 213:./lib/chibios/os/rt/include/chschd.h ****     /**
 214:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 218:./lib/chibios/os/rt/include/chschd.h ****      */
 219:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 220:./lib/chibios/os/rt/include/chschd.h ****     /**
 221:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 225:./lib/chibios/os/rt/include/chschd.h ****      */
 226:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:./lib/chibios/os/rt/include/chschd.h ****     /**
 229:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:./lib/chibios/os/rt/include/chschd.h **** #endif
 233:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:./lib/chibios/os/rt/include/chschd.h ****     /**
 235:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 239:./lib/chibios/os/rt/include/chschd.h ****      */
 240:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:./lib/chibios/os/rt/include/chschd.h **** #endif
 242:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:./lib/chibios/os/rt/include/chschd.h ****     /**
 244:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 248:./lib/chibios/os/rt/include/chschd.h ****      */
 249:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:./lib/chibios/os/rt/include/chschd.h **** #endif
 251:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:./lib/chibios/os/rt/include/chschd.h ****     /**
 253:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:./lib/chibios/os/rt/include/chschd.h ****      */
 257:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:./lib/chibios/os/rt/include/chschd.h **** #endif
 259:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 260:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:./lib/chibios/os/rt/include/chschd.h ****   /**
 262:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:./lib/chibios/os/rt/include/chschd.h ****    */
 264:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:./lib/chibios/os/rt/include/chschd.h **** #endif
 266:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:./lib/chibios/os/rt/include/chschd.h ****   /**
 268:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:./lib/chibios/os/rt/include/chschd.h ****    */
 270:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:./lib/chibios/os/rt/include/chschd.h **** #endif
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:./lib/chibios/os/rt/include/chschd.h ****    */
 283:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:./lib/chibios/os/rt/include/chschd.h ****   /**
 285:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:./lib/chibios/os/rt/include/chschd.h ****    */
 287:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 288:./lib/chibios/os/rt/include/chschd.h **** #endif
 289:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:./lib/chibios/os/rt/include/chschd.h ****    */
 294:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 295:./lib/chibios/os/rt/include/chschd.h **** #endif
 296:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:./lib/chibios/os/rt/include/chschd.h ****   /**
 298:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:./lib/chibios/os/rt/include/chschd.h ****    */
 300:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:./lib/chibios/os/rt/include/chschd.h **** #endif
 302:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:./lib/chibios/os/rt/include/chschd.h **** #endif
 306:./lib/chibios/os/rt/include/chschd.h **** };
 307:./lib/chibios/os/rt/include/chschd.h **** 
 308:./lib/chibios/os/rt/include/chschd.h **** /**
 309:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:./lib/chibios/os/rt/include/chschd.h ****  *
 311:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:./lib/chibios/os/rt/include/chschd.h ****  */
 313:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 319:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 321:./lib/chibios/os/rt/include/chschd.h **** };
 322:./lib/chibios/os/rt/include/chschd.h **** 
 323:./lib/chibios/os/rt/include/chschd.h **** /**
 324:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:./lib/chibios/os/rt/include/chschd.h ****  */
 329:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 332:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 334:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:./lib/chibios/os/rt/include/chschd.h **** #endif
 338:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:./lib/chibios/os/rt/include/chschd.h ****   /**
 340:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:./lib/chibios/os/rt/include/chschd.h ****    */
 342:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 344:./lib/chibios/os/rt/include/chschd.h **** #endif
 345:./lib/chibios/os/rt/include/chschd.h **** };
 346:./lib/chibios/os/rt/include/chschd.h **** 
 347:./lib/chibios/os/rt/include/chschd.h **** /**
 348:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:./lib/chibios/os/rt/include/chschd.h ****  */
 350:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 351:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 356:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:./lib/chibios/os/rt/include/chschd.h **** #endif
 360:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 363:./lib/chibios/os/rt/include/chschd.h **** };
 364:./lib/chibios/os/rt/include/chschd.h **** 
 365:./lib/chibios/os/rt/include/chschd.h **** /**
 366:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:./lib/chibios/os/rt/include/chschd.h ****  */
 368:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 369:./lib/chibios/os/rt/include/chschd.h ****   /**
 370:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:./lib/chibios/os/rt/include/chschd.h ****    */
 376:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:./lib/chibios/os/rt/include/chschd.h ****   /**
 379:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:./lib/chibios/os/rt/include/chschd.h ****    */
 381:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:./lib/chibios/os/rt/include/chschd.h ****   /**
 383:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:./lib/chibios/os/rt/include/chschd.h ****    */
 385:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:./lib/chibios/os/rt/include/chschd.h **** #endif
 387:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:./lib/chibios/os/rt/include/chschd.h ****   /**
 389:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:./lib/chibios/os/rt/include/chschd.h ****    */
 391:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:./lib/chibios/os/rt/include/chschd.h **** #endif
 393:./lib/chibios/os/rt/include/chschd.h **** };
 394:./lib/chibios/os/rt/include/chschd.h **** 
 395:./lib/chibios/os/rt/include/chschd.h **** /**
 396:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 397:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 399:./lib/chibios/os/rt/include/chschd.h ****  */
 400:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 401:./lib/chibios/os/rt/include/chschd.h ****   /**
 402:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:./lib/chibios/os/rt/include/chschd.h ****    */
 404:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:./lib/chibios/os/rt/include/chschd.h ****   /**
 406:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:./lib/chibios/os/rt/include/chschd.h ****    */
 408:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:./lib/chibios/os/rt/include/chschd.h ****   /**
 410:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 411:./lib/chibios/os/rt/include/chschd.h ****    */
 412:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 417:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:./lib/chibios/os/rt/include/chschd.h ****   /**
 419:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:./lib/chibios/os/rt/include/chschd.h ****    */
 421:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:./lib/chibios/os/rt/include/chschd.h **** #endif
 423:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:./lib/chibios/os/rt/include/chschd.h ****   /**
 425:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:./lib/chibios/os/rt/include/chschd.h ****    */
 427:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:./lib/chibios/os/rt/include/chschd.h **** #endif
 429:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:./lib/chibios/os/rt/include/chschd.h **** };
 431:./lib/chibios/os/rt/include/chschd.h **** 
 432:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 433:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 435:./lib/chibios/os/rt/include/chschd.h **** 
 436:./lib/chibios/os/rt/include/chschd.h **** /**
 437:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:./lib/chibios/os/rt/include/chschd.h ****  *
 439:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 440:./lib/chibios/os/rt/include/chschd.h ****  */
 441:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /**
 444:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:./lib/chibios/os/rt/include/chschd.h ****  */
 448:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:./lib/chibios/os/rt/include/chschd.h **** 
 450:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 451:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 456:./lib/chibios/os/rt/include/chschd.h **** #endif
 457:./lib/chibios/os/rt/include/chschd.h **** 
 458:./lib/chibios/os/rt/include/chschd.h **** /*
 459:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 460:./lib/chibios/os/rt/include/chschd.h ****  */
 461:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 462:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 463:./lib/chibios/os/rt/include/chschd.h **** #endif
 464:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 485:./lib/chibios/os/rt/include/chschd.h **** }
 486:./lib/chibios/os/rt/include/chschd.h **** #endif
 487:./lib/chibios/os/rt/include/chschd.h **** 
 488:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 489:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 491:./lib/chibios/os/rt/include/chschd.h **** 
 492:./lib/chibios/os/rt/include/chschd.h **** /**
 493:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:./lib/chibios/os/rt/include/chschd.h ****  *
 495:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:./lib/chibios/os/rt/include/chschd.h ****  *
 497:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 498:./lib/chibios/os/rt/include/chschd.h ****  */
 499:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:./lib/chibios/os/rt/include/chschd.h **** 
 501:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:./lib/chibios/os/rt/include/chschd.h **** }
 503:./lib/chibios/os/rt/include/chschd.h **** 
 504:./lib/chibios/os/rt/include/chschd.h **** /**
 505:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:./lib/chibios/os/rt/include/chschd.h ****  *
 507:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 509:./lib/chibios/os/rt/include/chschd.h ****  *
 510:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 511:./lib/chibios/os/rt/include/chschd.h ****  */
 512:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:./lib/chibios/os/rt/include/chschd.h **** 
 514:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:./lib/chibios/os/rt/include/chschd.h **** }
 516:./lib/chibios/os/rt/include/chschd.h **** 
 517:./lib/chibios/os/rt/include/chschd.h **** /**
 518:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:./lib/chibios/os/rt/include/chschd.h ****  *
 520:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 522:./lib/chibios/os/rt/include/chschd.h ****  *
 523:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 524:./lib/chibios/os/rt/include/chschd.h ****  */
 525:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:./lib/chibios/os/rt/include/chschd.h **** 
 527:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:./lib/chibios/os/rt/include/chschd.h **** }
 529:./lib/chibios/os/rt/include/chschd.h **** 
 530:./lib/chibios/os/rt/include/chschd.h **** /**
 531:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:./lib/chibios/os/rt/include/chschd.h ****  *
 533:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:./lib/chibios/os/rt/include/chschd.h ****  *
 535:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 536:./lib/chibios/os/rt/include/chschd.h ****  */
 537:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
  39              		.loc 2 537 20 view .LVU4
  40              	.LBB68:
 538:./lib/chibios/os/rt/include/chschd.h **** 
 539:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  41              		.loc 2 539 3 view .LVU5
  42              		.loc 2 539 13 is_stmt 0 view .LVU6
  43 0000 0060     		str	r0, [r0]
 540:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  44              		.loc 2 540 3 is_stmt 1 view .LVU7
  45              		.loc 2 540 13 is_stmt 0 view .LVU8
  46 0002 4060     		str	r0, [r0, #4]
  47              	.LVL1:
  48              		.loc 2 540 13 view .LVU9
  49              	.LBE68:
  50              	.LBE67:
 102:lib/chibios/os/rt/src/chsem.c ****   sp->cnt = n;
  51              		.loc 1 102 3 is_stmt 1 view .LVU10
  52              		.loc 1 102 11 is_stmt 0 view .LVU11
  53 0004 8160     		str	r1, [r0, #8]
 103:lib/chibios/os/rt/src/chsem.c **** }
  54              		.loc 1 103 1 view .LVU12
  55              		@ sp needed
  56 0006 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE154:
  60              		.section	.text.chSemResetI,"ax",%progbits
  61              		.align	1
  62              		.global	chSemResetI
  63              		.syntax unified
  64              		.code	16
  65              		.thumb_func
  66              		.fpu softvfp
  68              	chSemResetI:
  69              	.LVL2:
  70              	.LFB156:
 104:lib/chibios/os/rt/src/chsem.c **** 
 105:lib/chibios/os/rt/src/chsem.c **** /**
 106:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a reset operation on the semaphore.
 107:lib/chibios/os/rt/src/chsem.c ****  * @post    After invoking this function all the threads waiting on the
 108:lib/chibios/os/rt/src/chsem.c ****  *          semaphore, if any, are released and the semaphore counter is set
 109:lib/chibios/os/rt/src/chsem.c ****  *          to the specified, non negative, value.
 110:lib/chibios/os/rt/src/chsem.c ****  * @note    The released threads can recognize they were waked up by a reset
 111:lib/chibios/os/rt/src/chsem.c ****  *          rather than a signal because the @p chSemWait() will return
 112:lib/chibios/os/rt/src/chsem.c ****  *          @p MSG_RESET instead of @p MSG_OK.
 113:lib/chibios/os/rt/src/chsem.c ****  *
 114:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 115:lib/chibios/os/rt/src/chsem.c ****  * @param[in] n         the new value of the semaphore counter. The value must
 116:lib/chibios/os/rt/src/chsem.c ****  *                      be non-negative.
 117:lib/chibios/os/rt/src/chsem.c ****  *
 118:lib/chibios/os/rt/src/chsem.c ****  * @api
 119:lib/chibios/os/rt/src/chsem.c ****  */
 120:lib/chibios/os/rt/src/chsem.c **** void chSemReset(semaphore_t *sp, cnt_t n) {
 121:lib/chibios/os/rt/src/chsem.c **** 
 122:lib/chibios/os/rt/src/chsem.c ****   chSysLock();
 123:lib/chibios/os/rt/src/chsem.c ****   chSemResetI(sp, n);
 124:lib/chibios/os/rt/src/chsem.c ****   chSchRescheduleS();
 125:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 126:lib/chibios/os/rt/src/chsem.c **** }
 127:lib/chibios/os/rt/src/chsem.c **** 
 128:lib/chibios/os/rt/src/chsem.c **** /**
 129:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a reset operation on the semaphore.
 130:lib/chibios/os/rt/src/chsem.c ****  * @post    After invoking this function all the threads waiting on the
 131:lib/chibios/os/rt/src/chsem.c ****  *          semaphore, if any, are released and the semaphore counter is set
 132:lib/chibios/os/rt/src/chsem.c ****  *          to the specified, non negative, value.
 133:lib/chibios/os/rt/src/chsem.c ****  * @post    This function does not reschedule so a call to a rescheduling
 134:lib/chibios/os/rt/src/chsem.c ****  *          function must be performed before unlocking the kernel. Note that
 135:lib/chibios/os/rt/src/chsem.c ****  *          interrupt handlers always reschedule on exit so an explicit
 136:lib/chibios/os/rt/src/chsem.c ****  *          reschedule must not be performed in ISRs.
 137:lib/chibios/os/rt/src/chsem.c ****  * @note    The released threads can recognize they were waked up by a reset
 138:lib/chibios/os/rt/src/chsem.c ****  *          rather than a signal because the @p chSemWait() will return
 139:lib/chibios/os/rt/src/chsem.c ****  *          @p MSG_RESET instead of @p MSG_OK.
 140:lib/chibios/os/rt/src/chsem.c ****  *
 141:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 142:lib/chibios/os/rt/src/chsem.c ****  * @param[in] n         the new value of the semaphore counter. The value must
 143:lib/chibios/os/rt/src/chsem.c ****  *                      be non-negative.
 144:lib/chibios/os/rt/src/chsem.c ****  *
 145:lib/chibios/os/rt/src/chsem.c ****  * @iclass
 146:lib/chibios/os/rt/src/chsem.c ****  */
 147:lib/chibios/os/rt/src/chsem.c **** void chSemResetI(semaphore_t *sp, cnt_t n) {
  71              		.loc 1 147 44 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 148:lib/chibios/os/rt/src/chsem.c ****   cnt_t cnt;
  75              		.loc 1 148 3 view .LVU14
 149:lib/chibios/os/rt/src/chsem.c **** 
 150:lib/chibios/os/rt/src/chsem.c ****   chDbgCheckClassI();
  76              		.loc 1 150 21 view .LVU15
 151:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  77              		.loc 1 151 3 view .LVU16
  78              		.loc 1 151 3 view .LVU17
 152:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
  79              		.loc 1 152 3 view .LVU18
  80              		.loc 1 152 3 view .LVU19
 153:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 154:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 155:lib/chibios/os/rt/src/chsem.c **** 
 156:lib/chibios/os/rt/src/chsem.c ****   cnt = sp->cnt;
  81              		.loc 1 156 3 view .LVU20
 147:lib/chibios/os/rt/src/chsem.c ****   cnt_t cnt;
  82              		.loc 1 147 44 is_stmt 0 view .LVU21
  83 0000 70B5     		push	{r4, r5, r6, lr}
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 4, -16
  86              		.cfi_offset 5, -12
  87              		.cfi_offset 6, -8
  88              		.cfi_offset 14, -4
 157:lib/chibios/os/rt/src/chsem.c ****   sp->cnt = n;
 158:lib/chibios/os/rt/src/chsem.c ****   while (++cnt <= (cnt_t)0) {
 159:lib/chibios/os/rt/src/chsem.c ****     chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
  89              		.loc 1 159 58 view .LVU22
  90 0002 0226     		movs	r6, #2
 147:lib/chibios/os/rt/src/chsem.c ****   cnt_t cnt;
  91              		.loc 1 147 44 view .LVU23
  92 0004 0500     		movs	r5, r0
 156:lib/chibios/os/rt/src/chsem.c ****   sp->cnt = n;
  93              		.loc 1 156 7 view .LVU24
  94 0006 8468     		ldr	r4, [r0, #8]
  95              	.LVL3:
 157:lib/chibios/os/rt/src/chsem.c ****   sp->cnt = n;
  96              		.loc 1 157 3 is_stmt 1 view .LVU25
  97              		.loc 1 159 58 is_stmt 0 view .LVU26
  98 0008 7642     		rsbs	r6, r6, #0
 157:lib/chibios/os/rt/src/chsem.c ****   sp->cnt = n;
  99              		.loc 1 157 11 view .LVU27
 100 000a 8160     		str	r1, [r0, #8]
 158:lib/chibios/os/rt/src/chsem.c ****     chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 101              		.loc 1 158 3 is_stmt 1 view .LVU28
 102              	.LVL4:
 103              	.L3:
 158:lib/chibios/os/rt/src/chsem.c ****     chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 104              		.loc 1 158 9 is_stmt 0 view .LVU29
 105 000c 0134     		adds	r4, r4, #1
 106              	.LVL5:
 158:lib/chibios/os/rt/src/chsem.c ****     chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 107              		.loc 1 158 9 view .LVU30
 108 000e 002C     		cmp	r4, #0
 109 0010 00DD     		ble	.L4
 160:lib/chibios/os/rt/src/chsem.c ****   }
 161:lib/chibios/os/rt/src/chsem.c **** }
 110              		.loc 1 161 1 view .LVU31
 111              		@ sp needed
 112              	.LVL6:
 113              	.LVL7:
 114              		.loc 1 161 1 view .LVU32
 115 0012 70BD     		pop	{r4, r5, r6, pc}
 116              	.LVL8:
 117              	.L4:
 159:lib/chibios/os/rt/src/chsem.c ****   }
 118              		.loc 1 159 5 is_stmt 1 view .LVU33
 119 0014 2800     		movs	r0, r5
 120 0016 FFF7FEFF 		bl	queue_lifo_remove
 121              	.LVL9:
 122 001a FFF7FEFF 		bl	chSchReadyI
 123              	.LVL10:
 159:lib/chibios/os/rt/src/chsem.c ****   }
 124              		.loc 1 159 58 is_stmt 0 view .LVU34
 125 001e 0662     		str	r6, [r0, #32]
 126 0020 F4E7     		b	.L3
 127              		.cfi_endproc
 128              	.LFE156:
 130              		.section	.text.chSemReset,"ax",%progbits
 131              		.align	1
 132              		.global	chSemReset
 133              		.syntax unified
 134              		.code	16
 135              		.thumb_func
 136              		.fpu softvfp
 138              	chSemReset:
 139              	.LVL11:
 140              	.LFB155:
 120:lib/chibios/os/rt/src/chsem.c **** 
 141              		.loc 1 120 43 is_stmt 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 122:lib/chibios/os/rt/src/chsem.c ****   chSemResetI(sp, n);
 145              		.loc 1 122 3 view .LVU36
 146              	.LBB69:
 147              	.LBI69:
 148              		.file 3 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  */
  66:./lib/chibios/os/rt/include/chsys.h **** /**
  67:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:./lib/chibios/os/rt/include/chsys.h ****  *
  71:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  73:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  75:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:./lib/chibios/os/rt/include/chsys.h ****  */
  77:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:./lib/chibios/os/rt/include/chsys.h **** #else
  81:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:./lib/chibios/os/rt/include/chsys.h **** #endif
  83:./lib/chibios/os/rt/include/chsys.h **** 
  84:./lib/chibios/os/rt/include/chsys.h **** /**
  85:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:./lib/chibios/os/rt/include/chsys.h ****  *
  89:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  91:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  93:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:./lib/chibios/os/rt/include/chsys.h ****  */
  95:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:./lib/chibios/os/rt/include/chsys.h **** #else
  99:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:./lib/chibios/os/rt/include/chsys.h **** #endif
 101:./lib/chibios/os/rt/include/chsys.h **** 
 102:./lib/chibios/os/rt/include/chsys.h **** /**
 103:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:./lib/chibios/os/rt/include/chsys.h ****  *
 107:./lib/chibios/os/rt/include/chsys.h ****  * @special
 108:./lib/chibios/os/rt/include/chsys.h ****  */
 109:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:./lib/chibios/os/rt/include/chsys.h **** 
 116:./lib/chibios/os/rt/include/chsys.h **** /**
 117:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:./lib/chibios/os/rt/include/chsys.h ****  *
 122:./lib/chibios/os/rt/include/chsys.h ****  * @special
 123:./lib/chibios/os/rt/include/chsys.h ****  */
 124:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:./lib/chibios/os/rt/include/chsys.h **** 
 130:./lib/chibios/os/rt/include/chsys.h **** /**
 131:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 134:./lib/chibios/os/rt/include/chsys.h ****  *
 135:./lib/chibios/os/rt/include/chsys.h ****  * @special
 136:./lib/chibios/os/rt/include/chsys.h ****  */
 137:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 139:./lib/chibios/os/rt/include/chsys.h **** 
 140:./lib/chibios/os/rt/include/chsys.h **** /**
 141:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:./lib/chibios/os/rt/include/chsys.h ****  */
 143:./lib/chibios/os/rt/include/chsys.h **** /**
 144:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:./lib/chibios/os/rt/include/chsys.h ****  *
 149:./lib/chibios/os/rt/include/chsys.h ****  * @special
 150:./lib/chibios/os/rt/include/chsys.h ****  */
 151:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 153:./lib/chibios/os/rt/include/chsys.h **** 
 154:./lib/chibios/os/rt/include/chsys.h **** /**
 155:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:./lib/chibios/os/rt/include/chsys.h ****  * @{
 157:./lib/chibios/os/rt/include/chsys.h ****  */
 158:./lib/chibios/os/rt/include/chsys.h **** /**
 159:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:./lib/chibios/os/rt/include/chsys.h ****  *
 163:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:./lib/chibios/os/rt/include/chsys.h ****  *
 167:./lib/chibios/os/rt/include/chsys.h ****  * @api
 168:./lib/chibios/os/rt/include/chsys.h ****  */
 169:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:./lib/chibios/os/rt/include/chsys.h **** 
 171:./lib/chibios/os/rt/include/chsys.h **** /**
 172:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:./lib/chibios/os/rt/include/chsys.h ****  *
 177:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:./lib/chibios/os/rt/include/chsys.h ****  *
 181:./lib/chibios/os/rt/include/chsys.h ****  * @api
 182:./lib/chibios/os/rt/include/chsys.h ****  */
 183:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:./lib/chibios/os/rt/include/chsys.h **** 
 185:./lib/chibios/os/rt/include/chsys.h **** /**
 186:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:./lib/chibios/os/rt/include/chsys.h ****  *
 191:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:./lib/chibios/os/rt/include/chsys.h ****  *
 195:./lib/chibios/os/rt/include/chsys.h ****  * @api
 196:./lib/chibios/os/rt/include/chsys.h ****  */
 197:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:./lib/chibios/os/rt/include/chsys.h **** 
 199:./lib/chibios/os/rt/include/chsys.h **** /**
 200:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:./lib/chibios/os/rt/include/chsys.h ****  *
 205:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:./lib/chibios/os/rt/include/chsys.h ****  *
 209:./lib/chibios/os/rt/include/chsys.h ****  * @api
 210:./lib/chibios/os/rt/include/chsys.h ****  */
 211:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:./lib/chibios/os/rt/include/chsys.h **** 
 213:./lib/chibios/os/rt/include/chsys.h **** /**
 214:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:./lib/chibios/os/rt/include/chsys.h ****  *
 219:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:./lib/chibios/os/rt/include/chsys.h ****  *
 223:./lib/chibios/os/rt/include/chsys.h ****  * @api
 224:./lib/chibios/os/rt/include/chsys.h ****  */
 225:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:./lib/chibios/os/rt/include/chsys.h **** 
 227:./lib/chibios/os/rt/include/chsys.h **** /**
 228:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:./lib/chibios/os/rt/include/chsys.h ****  *
 233:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:./lib/chibios/os/rt/include/chsys.h ****  *
 237:./lib/chibios/os/rt/include/chsys.h ****  * @api
 238:./lib/chibios/os/rt/include/chsys.h ****  */
 239:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 241:./lib/chibios/os/rt/include/chsys.h **** 
 242:./lib/chibios/os/rt/include/chsys.h **** /**
 243:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:./lib/chibios/os/rt/include/chsys.h ****  *
 247:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:./lib/chibios/os/rt/include/chsys.h ****  *
 250:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 251:./lib/chibios/os/rt/include/chsys.h ****  */
 252:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:./lib/chibios/os/rt/include/chsys.h **** #endif
 255:./lib/chibios/os/rt/include/chsys.h **** 
 256:./lib/chibios/os/rt/include/chsys.h **** /**
 257:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:./lib/chibios/os/rt/include/chsys.h ****  *
 261:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:./lib/chibios/os/rt/include/chsys.h ****  *
 264:./lib/chibios/os/rt/include/chsys.h ****  * @special
 265:./lib/chibios/os/rt/include/chsys.h ****  */
 266:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 268:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:./lib/chibios/os/rt/include/chsys.h **** }
 273:./lib/chibios/os/rt/include/chsys.h **** 
 274:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 275:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** 
 278:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:./lib/chibios/os/rt/include/chsys.h **** #endif
 281:./lib/chibios/os/rt/include/chsys.h **** 
 282:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 283:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 284:./lib/chibios/os/rt/include/chsys.h **** #endif
 285:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 286:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:./lib/chibios/os/rt/include/chsys.h **** #endif
 294:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 295:./lib/chibios/os/rt/include/chsys.h **** }
 296:./lib/chibios/os/rt/include/chsys.h **** #endif
 297:./lib/chibios/os/rt/include/chsys.h **** 
 298:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 299:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** 
 302:./lib/chibios/os/rt/include/chsys.h **** /**
 303:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:./lib/chibios/os/rt/include/chsys.h ****  *
 308:./lib/chibios/os/rt/include/chsys.h ****  * @special
 309:./lib/chibios/os/rt/include/chsys.h ****  */
 310:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:./lib/chibios/os/rt/include/chsys.h **** 
 312:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 313:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 314:./lib/chibios/os/rt/include/chsys.h **** }
 315:./lib/chibios/os/rt/include/chsys.h **** 
 316:./lib/chibios/os/rt/include/chsys.h **** /**
 317:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 321:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:./lib/chibios/os/rt/include/chsys.h ****  *
 325:./lib/chibios/os/rt/include/chsys.h ****  * @special
 326:./lib/chibios/os/rt/include/chsys.h ****  */
 327:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:./lib/chibios/os/rt/include/chsys.h **** 
 329:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 330:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:./lib/chibios/os/rt/include/chsys.h **** }
 332:./lib/chibios/os/rt/include/chsys.h **** 
 333:./lib/chibios/os/rt/include/chsys.h **** /**
 334:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:./lib/chibios/os/rt/include/chsys.h ****  *
 340:./lib/chibios/os/rt/include/chsys.h ****  * @special
 341:./lib/chibios/os/rt/include/chsys.h ****  */
 342:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:./lib/chibios/os/rt/include/chsys.h **** 
 344:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 345:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 346:./lib/chibios/os/rt/include/chsys.h **** }
 347:./lib/chibios/os/rt/include/chsys.h **** 
 348:./lib/chibios/os/rt/include/chsys.h **** /**
 349:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:./lib/chibios/os/rt/include/chsys.h ****  *
 351:./lib/chibios/os/rt/include/chsys.h ****  * @special
 352:./lib/chibios/os/rt/include/chsys.h ****  */
 353:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 149              		.loc 3 353 20 view .LVU37
 150              	.LBE69:
 354:./lib/chibios/os/rt/include/chsys.h **** 
 355:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 151              		.loc 3 355 3 view .LVU38
 152              	.LBB77:
 153              	.LBB70:
 154              	.LBI70:
 155              		.file 4 "./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @file    chcore_v6m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   ARMv6-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @addtogroup ARMCMx_V6M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifndef CHCORE_V6M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CHCORE_V6M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_SUPPORTS_RT                FALSE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WORKING_AREA_ALIGN         PORT_STACK_ALIGN
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /** @} */
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   PendSV priority level.
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    This priority is enforced to be equal to @p 0,
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          this handler always has the highest priority that cannot preempt
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          the kernel.
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_PRIORITY_PENDSV          0
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module pre-compile time settings.                                         */
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Stack size for the system idle thread.
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This size depends on the idle thread implementation, usually
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          the idle thread should take no more space than those reserved
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    In this port it is set to 16 because the idle thread does have
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          a stack frame when compiling without optimizations. You may
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          reduce this value to zero when compiling with optimizations.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE)
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This constant is used in the calculation of the correct working
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          area size.
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    In this port this value is conservatively set to 64 because the
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          with compiler optimizations disabled. The value can be reduced
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          when compiler optimizations are enabled.
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(PORT_INT_REQUIRED_STACK)
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INT_REQUIRED_STACK         64
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Alternate preemption method.
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details Activating this option will make the Kernel use the PendSV
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          handler for preemption instead of the NMI handler.
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifndef CORTEX_ALTERNATE_SWITCH
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_ALTERNATE_SWITCH         FALSE
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Derived constants and error checks.                                       */
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(CH_CUSTOMER_LIC_PORT_CM0)
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #error "CH_CUSTOMER_LIC_PORT_CM0 not defined"
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if CH_CUSTOMER_LIC_PORT_CM0 == FALSE
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #error "ChibiOS Cortex-M0 port not licensed"
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Handling a GCC problem impacting ARMv6-M.*/
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if defined(__GNUC__) && !defined(PORT_IGNORE_GCC_VERSION_CHECK)
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if __GNUC__ > 5
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #warning "This compiler has a know problem with Cortex-M0, see bugs: 88167, 88656."
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #warning "*** Use GCC version 5 or below ***"
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @name    Architecture and Compiler
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if ((CORTEX_MODEL == 0) && !defined(__CORE_CM0PLUS_H_DEPENDANT)) ||        \
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     defined(__DOXYGEN__)
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Macro defining the specific ARM architecture.
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_ARM_v6M
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Name of the implemented architecture.
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv6-M"
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Name of the architecture variant.
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_CORE_VARIANT_NAME          "Cortex-M0"
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif (CORTEX_MODEL == 0) && defined(__CORE_CM0PLUS_H_DEPENDANT)
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_ARM_v6M
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv6-M"
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_CORE_VARIANT_NAME          "Cortex-M0+"
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Port-specific information string.
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CORTEX_ALTERNATE_SWITCH == FALSE) || defined(__DOXYGEN__)
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INFO                       "Preemption through NMI"
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INFO                       "Preemption through PendSV"
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /** @} */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Maximum usable priority for normal ISRs.
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CORTEX_ALTERNATE_SWITCH == TRUE) || defined(__DOXYGEN__)
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      1
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module data structures and types.                                         */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(_FROM_ASM_)
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  /* The documentation of the following declarations is in chconf.h in order
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     to not have duplicated structure names into the documentation.*/
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(__DOXYGEN__)
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** struct port_extctx {
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r0;
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r1;
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r2;
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r3;
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r12;
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      lr_thd;
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      pc;
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      xpsr;
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** };
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** struct port_intctx {
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r8;
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r9;
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r10;
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r11;
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r4;
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r5;
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r6;
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r7;
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      lr;
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** };
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif /* !defined(__DOXYGEN__) */
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module macros.                                                            */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This code usually setup the context switching frame represented
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          by an @p port_intctx structure.
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                                         sizeof (struct port_intctx));       \
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->r4 = (regarm_t)(pf);                                        \
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->r5 = (regarm_t)(arg);                                       \
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->lr = (regarm_t)_port_thread_start;                          \
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Computes the thread working area global size.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    There is no need to perform alignments in this macro.
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WA_SIZE(n) (sizeof (struct port_intctx) +                      \
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                          sizeof (struct port_extctx) +                      \
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Static working area allocation.
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro is used to allocate a static thread working area
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          aligned as both position and size.
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] s         the name to be assigned to the stack array
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] n         the stack size to be assigned to the thread
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ prologue code.
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          enabled to invoke system APIs.
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__builtin_return_address(0)
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif defined(__ICCARM__)
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__get_LR()
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif defined(__CC_ARM)
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__return_address()
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ epilogue code.
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          enabled to invoke system APIs.
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue(_saved_lr)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ handler function declaration.
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    @p id can be a function name or a vector number depending on the
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          port implementation.
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Fast IRQ handler function declaration.
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    @p id can be a function name or a vector number depending on the
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          port implementation.
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Performs a context switch between two threads.
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This is the most critical code in any port, this function
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          is responsible for the context switch between 2 threads.
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          switch performance so optimize here as much as you can.
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] ntp       the thread to be switched in
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] otp       the thread to be switched out
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define port_switch(ntp, otp) {                                             \
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     chSysHalt("stack overflow");                                            \
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   }                                                                         \
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   _port_switch(ntp, otp);                                                   \
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* External declarations.                                                    */
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** extern "C" {
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_irq_epilogue(regarm_t lr);
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_thread_start(void);
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_switch_from_isr(void);
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_exit_from_isr(void);
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module inline functions.                                                  */
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Port-related initialization code.
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_init(void) {
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Returns a word encoding the current interrupts status.
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The interrupts status.
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline syssts_t port_get_irq_status(void) {
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (syssts_t)__get_PRIMASK();
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Checks the interrupt status.
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] sts       the interrupt status word
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The interrupt status.
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval false        the word specified a disabled interrupts status.
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval true         the word specified an enabled interrupts status.
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline bool port_irq_enabled(syssts_t sts) {
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Determines the current execution context.
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The execution context.
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval false        not running in ISR mode.
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval true         running in ISR mode.
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline bool port_is_isr_context(void) {
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-lock action.
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function disables interrupts globally.
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_lock(void) {
 156              		.loc 4 387 20 view .LVU39
 157              	.LBE70:
 158              	.LBE77:
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __disable_irq();
 159              		.loc 4 389 3 view .LVU40
 160              	.LBB78:
 161              	.LBB75:
 162              	.LBB71:
 163              	.LBI71:
 164              		.file 5 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 165              		.loc 5 140 27 view .LVU41
 166              	.LBB72:
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 167              		.loc 5 142 3 view .LVU42
 168              	.LBE72:
 169              	.LBE71:
 170              	.LBE75:
 171              	.LBE78:
 120:lib/chibios/os/rt/src/chsem.c **** 
 172              		.loc 1 120 43 is_stmt 0 view .LVU43
 173 0000 10B5     		push	{r4, lr}
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 4, -8
 176              		.cfi_offset 14, -4
 177              	.LBB79:
 178              	.LBB76:
 179              	.LBB74:
 180              	.LBB73:
 181              		.loc 5 142 3 view .LVU44
 182              		.syntax divided
 183              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 184 0002 72B6     		cpsid i
 185              	@ 0 "" 2
 186              		.thumb
 187              		.syntax unified
 188              	.LBE73:
 189              	.LBE74:
 190              	.LBE76:
 191              	.LBE79:
 356:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 192              		.loc 3 356 34 is_stmt 1 view .LVU45
 357:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 193              		.loc 3 357 20 view .LVU46
 123:lib/chibios/os/rt/src/chsem.c ****   chSchRescheduleS();
 194              		.loc 1 123 3 view .LVU47
 195 0004 FFF7FEFF 		bl	chSemResetI
 196              	.LVL12:
 124:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 197              		.loc 1 124 3 view .LVU48
 198 0008 FFF7FEFF 		bl	chSchRescheduleS
 199              	.LVL13:
 125:lib/chibios/os/rt/src/chsem.c **** }
 200              		.loc 1 125 3 view .LVU49
 201              	.LBB80:
 202              	.LBI80:
 358:./lib/chibios/os/rt/include/chsys.h **** }
 359:./lib/chibios/os/rt/include/chsys.h **** 
 360:./lib/chibios/os/rt/include/chsys.h **** /**
 361:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:./lib/chibios/os/rt/include/chsys.h ****  *
 363:./lib/chibios/os/rt/include/chsys.h ****  * @special
 364:./lib/chibios/os/rt/include/chsys.h ****  */
 365:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 203              		.loc 3 365 20 view .LVU50
 204              	.LBB81:
 366:./lib/chibios/os/rt/include/chsys.h **** 
 367:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 205              		.loc 3 367 22 view .LVU51
 368:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 206              		.loc 3 368 33 view .LVU52
 369:./lib/chibios/os/rt/include/chsys.h **** 
 370:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 374:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 207              		.loc 3 374 3 view .LVU53
 208              		.loc 3 374 3 view .LVU54
 375:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 377:./lib/chibios/os/rt/include/chsys.h **** 
 378:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 209              		.loc 3 378 3 view .LVU55
 210              	.LBB82:
 211              	.LBI82:
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-unlock action.
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function enables interrupts globally.
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_unlock(void) {
 212              		.loc 4 396 20 view .LVU56
 213              	.LBE82:
 214              	.LBE81:
 215              	.LBE80:
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __enable_irq();
 216              		.loc 4 398 3 view .LVU57
 217              	.LBB87:
 218              	.LBB86:
 219              	.LBB85:
 220              	.LBB83:
 221              	.LBI83:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 222              		.loc 5 129 27 view .LVU58
 223              	.LBB84:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 224              		.loc 5 131 3 view .LVU59
 225              		.syntax divided
 226              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 227 000c 62B6     		cpsie i
 228              	@ 0 "" 2
 229              		.thumb
 230              		.syntax unified
 231              	.LBE84:
 232              	.LBE83:
 233              	.LBE85:
 234              	.LBE86:
 235              	.LBE87:
 126:lib/chibios/os/rt/src/chsem.c **** 
 236              		.loc 1 126 1 is_stmt 0 view .LVU60
 237              		@ sp needed
 238 000e 10BD     		pop	{r4, pc}
 239              		.cfi_endproc
 240              	.LFE155:
 242              		.section	.text.chSemWaitS,"ax",%progbits
 243              		.align	1
 244              		.global	chSemWaitS
 245              		.syntax unified
 246              		.code	16
 247              		.thumb_func
 248              		.fpu softvfp
 250              	chSemWaitS:
 251              	.LVL14:
 252              	.LFB158:
 162:lib/chibios/os/rt/src/chsem.c **** 
 163:lib/chibios/os/rt/src/chsem.c **** /**
 164:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore.
 165:lib/chibios/os/rt/src/chsem.c ****  *
 166:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 167:lib/chibios/os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 168:lib/chibios/os/rt/src/chsem.c ****  *                      released from the semaphore.
 169:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 170:lib/chibios/os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 171:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 172:lib/chibios/os/rt/src/chsem.c ****  *
 173:lib/chibios/os/rt/src/chsem.c ****  * @api
 174:lib/chibios/os/rt/src/chsem.c ****  */
 175:lib/chibios/os/rt/src/chsem.c **** msg_t chSemWait(semaphore_t *sp) {
 176:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 177:lib/chibios/os/rt/src/chsem.c **** 
 178:lib/chibios/os/rt/src/chsem.c ****   chSysLock();
 179:lib/chibios/os/rt/src/chsem.c ****   msg = chSemWaitS(sp);
 180:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 181:lib/chibios/os/rt/src/chsem.c **** 
 182:lib/chibios/os/rt/src/chsem.c ****   return msg;
 183:lib/chibios/os/rt/src/chsem.c **** }
 184:lib/chibios/os/rt/src/chsem.c **** 
 185:lib/chibios/os/rt/src/chsem.c **** /**
 186:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore.
 187:lib/chibios/os/rt/src/chsem.c ****  *
 188:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 189:lib/chibios/os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 190:lib/chibios/os/rt/src/chsem.c ****  *                      released from the semaphore.
 191:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 192:lib/chibios/os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 193:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 194:lib/chibios/os/rt/src/chsem.c ****  *
 195:lib/chibios/os/rt/src/chsem.c ****  * @sclass
 196:lib/chibios/os/rt/src/chsem.c ****  */
 197:lib/chibios/os/rt/src/chsem.c **** msg_t chSemWaitS(semaphore_t *sp) {
 253              		.loc 1 197 35 is_stmt 1 view -0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 198:lib/chibios/os/rt/src/chsem.c **** 
 199:lib/chibios/os/rt/src/chsem.c ****   chDbgCheckClassS();
 257              		.loc 1 199 21 view .LVU62
 200:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 258              		.loc 1 200 3 view .LVU63
 259              		.loc 1 200 3 view .LVU64
 201:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 260              		.loc 1 201 3 view .LVU65
 261              		.loc 1 201 3 view .LVU66
 202:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 203:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 204:lib/chibios/os/rt/src/chsem.c **** 
 205:lib/chibios/os/rt/src/chsem.c ****   if (--sp->cnt < (cnt_t)0) {
 262              		.loc 1 205 3 view .LVU67
 263              		.loc 1 205 7 is_stmt 0 view .LVU68
 264 0000 8368     		ldr	r3, [r0, #8]
 197:lib/chibios/os/rt/src/chsem.c **** 
 265              		.loc 1 197 35 view .LVU69
 266 0002 10B5     		push	{r4, lr}
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 4, -8
 269              		.cfi_offset 14, -4
 270              		.loc 1 205 7 view .LVU70
 271 0004 013B     		subs	r3, r3, #1
 197:lib/chibios/os/rt/src/chsem.c **** 
 272              		.loc 1 197 35 view .LVU71
 273 0006 0100     		movs	r1, r0
 274              		.loc 1 205 6 view .LVU72
 275 0008 8360     		str	r3, [r0, #8]
 206:lib/chibios/os/rt/src/chsem.c ****     currp->u.wtsemp = sp;
 207:lib/chibios/os/rt/src/chsem.c ****     sem_insert(currp, &sp->queue);
 208:lib/chibios/os/rt/src/chsem.c ****     chSchGoSleepS(CH_STATE_WTSEM);
 209:lib/chibios/os/rt/src/chsem.c **** 
 210:lib/chibios/os/rt/src/chsem.c ****     return currp->u.rdymsg;
 211:lib/chibios/os/rt/src/chsem.c ****   }
 212:lib/chibios/os/rt/src/chsem.c **** 
 213:lib/chibios/os/rt/src/chsem.c ****   return MSG_OK;
 276              		.loc 1 213 10 view .LVU73
 277 000a 0020     		movs	r0, #0
 278              	.LVL15:
 205:lib/chibios/os/rt/src/chsem.c ****     currp->u.wtsemp = sp;
 279              		.loc 1 205 6 view .LVU74
 280 000c 8342     		cmp	r3, r0
 281 000e 09DA     		bge	.L6
 282              	.LVL16:
 283              	.LBB90:
 284              	.LBI90:
 197:lib/chibios/os/rt/src/chsem.c **** 
 285              		.loc 1 197 7 is_stmt 1 view .LVU75
 286              	.LBB91:
 206:lib/chibios/os/rt/src/chsem.c ****     currp->u.wtsemp = sp;
 287              		.loc 1 206 5 view .LVU76
 288 0010 054C     		ldr	r4, .L9
 289 0012 A069     		ldr	r0, [r4, #24]
 206:lib/chibios/os/rt/src/chsem.c ****     currp->u.wtsemp = sp;
 290              		.loc 1 206 21 is_stmt 0 view .LVU77
 291 0014 0162     		str	r1, [r0, #32]
 207:lib/chibios/os/rt/src/chsem.c ****     chSchGoSleepS(CH_STATE_WTSEM);
 292              		.loc 1 207 5 is_stmt 1 view .LVU78
 293 0016 FFF7FEFF 		bl	queue_insert
 294              	.LVL17:
 208:lib/chibios/os/rt/src/chsem.c **** 
 295              		.loc 1 208 5 view .LVU79
 296 001a 0520     		movs	r0, #5
 297 001c FFF7FEFF 		bl	chSchGoSleepS
 298              	.LVL18:
 210:lib/chibios/os/rt/src/chsem.c ****   }
 299              		.loc 1 210 5 view .LVU80
 210:lib/chibios/os/rt/src/chsem.c ****   }
 300              		.loc 1 210 20 is_stmt 0 view .LVU81
 301 0020 A369     		ldr	r3, [r4, #24]
 302 0022 186A     		ldr	r0, [r3, #32]
 303              	.LVL19:
 304              	.L6:
 210:lib/chibios/os/rt/src/chsem.c ****   }
 305              		.loc 1 210 20 view .LVU82
 306              	.LBE91:
 307              	.LBE90:
 214:lib/chibios/os/rt/src/chsem.c **** }
 308              		.loc 1 214 1 view .LVU83
 309              		@ sp needed
 310 0024 10BD     		pop	{r4, pc}
 311              	.L10:
 312 0026 C046     		.align	2
 313              	.L9:
 314 0028 00000000 		.word	ch
 315              		.cfi_endproc
 316              	.LFE158:
 318              		.section	.text.chSemWait,"ax",%progbits
 319              		.align	1
 320              		.global	chSemWait
 321              		.syntax unified
 322              		.code	16
 323              		.thumb_func
 324              		.fpu softvfp
 326              	chSemWait:
 327              	.LVL20:
 328              	.LFB157:
 175:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 329              		.loc 1 175 34 is_stmt 1 view -0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 176:lib/chibios/os/rt/src/chsem.c **** 
 333              		.loc 1 176 3 view .LVU85
 178:lib/chibios/os/rt/src/chsem.c ****   msg = chSemWaitS(sp);
 334              		.loc 1 178 3 view .LVU86
 335              	.LBB92:
 336              	.LBI92:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 337              		.loc 3 353 20 view .LVU87
 338              	.LBE92:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 339              		.loc 3 355 3 view .LVU88
 340              	.LBB100:
 341              	.LBB93:
 342              	.LBI93:
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 343              		.loc 4 387 20 view .LVU89
 344              	.LBE93:
 345              	.LBE100:
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 346              		.loc 4 389 3 view .LVU90
 347              	.LBB101:
 348              	.LBB98:
 349              	.LBB94:
 350              	.LBI94:
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 351              		.loc 5 140 27 view .LVU91
 352              	.LBB95:
 353              		.loc 5 142 3 view .LVU92
 354              	.LBE95:
 355              	.LBE94:
 356              	.LBE98:
 357              	.LBE101:
 175:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 358              		.loc 1 175 34 is_stmt 0 view .LVU93
 359 0000 10B5     		push	{r4, lr}
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 4, -8
 362              		.cfi_offset 14, -4
 363              	.LBB102:
 364              	.LBB99:
 365              	.LBB97:
 366              	.LBB96:
 367              		.loc 5 142 3 view .LVU94
 368              		.syntax divided
 369              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 370 0002 72B6     		cpsid i
 371              	@ 0 "" 2
 372              		.thumb
 373              		.syntax unified
 374              	.LBE96:
 375              	.LBE97:
 376              	.LBE99:
 377              	.LBE102:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 378              		.loc 3 356 34 is_stmt 1 view .LVU95
 357:./lib/chibios/os/rt/include/chsys.h **** }
 379              		.loc 3 357 20 view .LVU96
 179:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 380              		.loc 1 179 3 view .LVU97
 179:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 381              		.loc 1 179 9 is_stmt 0 view .LVU98
 382 0004 FFF7FEFF 		bl	chSemWaitS
 383              	.LVL21:
 180:lib/chibios/os/rt/src/chsem.c **** 
 384              		.loc 1 180 3 is_stmt 1 view .LVU99
 385              	.LBB103:
 386              	.LBI103:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 387              		.loc 3 365 20 view .LVU100
 388              	.LBB104:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 389              		.loc 3 367 22 view .LVU101
 368:./lib/chibios/os/rt/include/chsys.h **** 
 390              		.loc 3 368 33 view .LVU102
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 391              		.loc 3 374 3 view .LVU103
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 392              		.loc 3 374 3 view .LVU104
 393              		.loc 3 378 3 view .LVU105
 394              	.LBB105:
 395              	.LBI105:
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 396              		.loc 4 396 20 view .LVU106
 397              	.LBE105:
 398              	.LBE104:
 399              	.LBE103:
 400              		.loc 4 398 3 view .LVU107
 401              	.LBB110:
 402              	.LBB109:
 403              	.LBB108:
 404              	.LBB106:
 405              	.LBI106:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 406              		.loc 5 129 27 view .LVU108
 407              	.LBB107:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 408              		.loc 5 131 3 view .LVU109
 409              		.syntax divided
 410              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 411 0008 62B6     		cpsie i
 412              	@ 0 "" 2
 413              		.thumb
 414              		.syntax unified
 415              	.LBE107:
 416              	.LBE106:
 417              	.LBE108:
 418              	.LBE109:
 419              	.LBE110:
 182:lib/chibios/os/rt/src/chsem.c **** }
 420              		.loc 1 182 3 view .LVU110
 183:lib/chibios/os/rt/src/chsem.c **** 
 421              		.loc 1 183 1 is_stmt 0 view .LVU111
 422              		@ sp needed
 423 000a 10BD     		pop	{r4, pc}
 424              		.cfi_endproc
 425              	.LFE157:
 427              		.section	.text.chSemWaitTimeoutS,"ax",%progbits
 428              		.align	1
 429              		.global	chSemWaitTimeoutS
 430              		.syntax unified
 431              		.code	16
 432              		.thumb_func
 433              		.fpu softvfp
 435              	chSemWaitTimeoutS:
 436              	.LVL22:
 437              	.LFB160:
 215:lib/chibios/os/rt/src/chsem.c **** 
 216:lib/chibios/os/rt/src/chsem.c **** /**
 217:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore with timeout specification.
 218:lib/chibios/os/rt/src/chsem.c ****  *
 219:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 220:lib/chibios/os/rt/src/chsem.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 221:lib/chibios/os/rt/src/chsem.c ****  *                      the following special values are allowed:
 222:lib/chibios/os/rt/src/chsem.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 223:lib/chibios/os/rt/src/chsem.c ****  *                      - @a TIME_INFINITE no timeout.
 224:lib/chibios/os/rt/src/chsem.c ****  *                      .
 225:lib/chibios/os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 226:lib/chibios/os/rt/src/chsem.c ****  *                      released from the semaphore.
 227:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 228:lib/chibios/os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 229:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 230:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 231:lib/chibios/os/rt/src/chsem.c ****  *                      the specified timeout.
 232:lib/chibios/os/rt/src/chsem.c ****  *
 233:lib/chibios/os/rt/src/chsem.c ****  * @api
 234:lib/chibios/os/rt/src/chsem.c ****  */
 235:lib/chibios/os/rt/src/chsem.c **** msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 236:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 237:lib/chibios/os/rt/src/chsem.c **** 
 238:lib/chibios/os/rt/src/chsem.c ****   chSysLock();
 239:lib/chibios/os/rt/src/chsem.c ****   msg = chSemWaitTimeoutS(sp, timeout);
 240:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 241:lib/chibios/os/rt/src/chsem.c **** 
 242:lib/chibios/os/rt/src/chsem.c ****   return msg;
 243:lib/chibios/os/rt/src/chsem.c **** }
 244:lib/chibios/os/rt/src/chsem.c **** 
 245:lib/chibios/os/rt/src/chsem.c **** /**
 246:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore with timeout specification.
 247:lib/chibios/os/rt/src/chsem.c ****  *
 248:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 249:lib/chibios/os/rt/src/chsem.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 250:lib/chibios/os/rt/src/chsem.c ****  *                      the following special values are allowed:
 251:lib/chibios/os/rt/src/chsem.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 252:lib/chibios/os/rt/src/chsem.c ****  *                      - @a TIME_INFINITE no timeout.
 253:lib/chibios/os/rt/src/chsem.c ****  *                      .
 254:lib/chibios/os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 255:lib/chibios/os/rt/src/chsem.c ****  *                      released from the semaphore.
 256:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 257:lib/chibios/os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 258:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 259:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 260:lib/chibios/os/rt/src/chsem.c ****  *                      the specified timeout.
 261:lib/chibios/os/rt/src/chsem.c ****  *
 262:lib/chibios/os/rt/src/chsem.c ****  * @sclass
 263:lib/chibios/os/rt/src/chsem.c ****  */
 264:lib/chibios/os/rt/src/chsem.c **** msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout) {
 438              		.loc 1 264 65 is_stmt 1 view -0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 265:lib/chibios/os/rt/src/chsem.c **** 
 266:lib/chibios/os/rt/src/chsem.c ****   chDbgCheckClassS();
 442              		.loc 1 266 21 view .LVU113
 267:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 443              		.loc 1 267 3 view .LVU114
 444              		.loc 1 267 3 view .LVU115
 268:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 445              		.loc 1 268 3 view .LVU116
 446              		.loc 1 268 3 view .LVU117
 269:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 270:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 271:lib/chibios/os/rt/src/chsem.c **** 
 272:lib/chibios/os/rt/src/chsem.c ****   if (--sp->cnt < (cnt_t)0) {
 447              		.loc 1 272 3 view .LVU118
 448              		.loc 1 272 11 is_stmt 0 view .LVU119
 449 0000 8268     		ldr	r2, [r0, #8]
 264:lib/chibios/os/rt/src/chsem.c **** 
 450              		.loc 1 264 65 view .LVU120
 451 0002 10B5     		push	{r4, lr}
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 4, -8
 454              		.cfi_offset 14, -4
 264:lib/chibios/os/rt/src/chsem.c **** 
 455              		.loc 1 264 65 view .LVU121
 456 0004 0C00     		movs	r4, r1
 457              		.loc 1 272 7 view .LVU122
 458 0006 511E     		subs	r1, r2, #1
 459              	.LVL23:
 264:lib/chibios/os/rt/src/chsem.c **** 
 460              		.loc 1 264 65 view .LVU123
 461 0008 0300     		movs	r3, r0
 462              		.loc 1 272 6 view .LVU124
 463 000a 8160     		str	r1, [r0, #8]
 273:lib/chibios/os/rt/src/chsem.c ****     if (TIME_IMMEDIATE == timeout) {
 274:lib/chibios/os/rt/src/chsem.c ****       sp->cnt++;
 275:lib/chibios/os/rt/src/chsem.c **** 
 276:lib/chibios/os/rt/src/chsem.c ****       return MSG_TIMEOUT;
 277:lib/chibios/os/rt/src/chsem.c ****     }
 278:lib/chibios/os/rt/src/chsem.c ****     currp->u.wtsemp = sp;
 279:lib/chibios/os/rt/src/chsem.c ****     sem_insert(currp, &sp->queue);
 280:lib/chibios/os/rt/src/chsem.c **** 
 281:lib/chibios/os/rt/src/chsem.c ****     return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 282:lib/chibios/os/rt/src/chsem.c ****   }
 283:lib/chibios/os/rt/src/chsem.c **** 
 284:lib/chibios/os/rt/src/chsem.c ****   return MSG_OK;
 464              		.loc 1 284 10 view .LVU125
 465 000c 0020     		movs	r0, #0
 466              	.LVL24:
 272:lib/chibios/os/rt/src/chsem.c ****     if (TIME_IMMEDIATE == timeout) {
 467              		.loc 1 272 6 view .LVU126
 468 000e 8142     		cmp	r1, r0
 469 0010 03DA     		bge	.L12
 273:lib/chibios/os/rt/src/chsem.c ****     if (TIME_IMMEDIATE == timeout) {
 470              		.loc 1 273 5 is_stmt 1 view .LVU127
 273:lib/chibios/os/rt/src/chsem.c ****     if (TIME_IMMEDIATE == timeout) {
 471              		.loc 1 273 8 is_stmt 0 view .LVU128
 472 0012 8442     		cmp	r4, r0
 473 0014 02D1     		bne	.L14
 274:lib/chibios/os/rt/src/chsem.c **** 
 474              		.loc 1 274 7 is_stmt 1 view .LVU129
 274:lib/chibios/os/rt/src/chsem.c **** 
 475              		.loc 1 274 14 is_stmt 0 view .LVU130
 476 0016 9A60     		str	r2, [r3, #8]
 276:lib/chibios/os/rt/src/chsem.c ****     }
 477              		.loc 1 276 7 is_stmt 1 view .LVU131
 276:lib/chibios/os/rt/src/chsem.c ****     }
 478              		.loc 1 276 14 is_stmt 0 view .LVU132
 479 0018 0138     		subs	r0, r0, #1
 480              	.LVL25:
 481              	.L12:
 285:lib/chibios/os/rt/src/chsem.c **** }
 482              		.loc 1 285 1 view .LVU133
 483              		@ sp needed
 484              	.LVL26:
 485              		.loc 1 285 1 view .LVU134
 486 001a 10BD     		pop	{r4, pc}
 487              	.LVL27:
 488              	.L14:
 489              	.LBB113:
 490              	.LBI113:
 264:lib/chibios/os/rt/src/chsem.c **** 
 491              		.loc 1 264 7 is_stmt 1 view .LVU135
 492              	.LBB114:
 278:lib/chibios/os/rt/src/chsem.c ****     sem_insert(currp, &sp->queue);
 493              		.loc 1 278 5 view .LVU136
 494 001c 054A     		ldr	r2, .L16
 279:lib/chibios/os/rt/src/chsem.c **** 
 495              		.loc 1 279 5 is_stmt 0 view .LVU137
 496 001e 1900     		movs	r1, r3
 278:lib/chibios/os/rt/src/chsem.c ****     sem_insert(currp, &sp->queue);
 497              		.loc 1 278 5 view .LVU138
 498 0020 9069     		ldr	r0, [r2, #24]
 278:lib/chibios/os/rt/src/chsem.c ****     sem_insert(currp, &sp->queue);
 499              		.loc 1 278 21 view .LVU139
 500 0022 0362     		str	r3, [r0, #32]
 279:lib/chibios/os/rt/src/chsem.c **** 
 501              		.loc 1 279 5 is_stmt 1 view .LVU140
 502 0024 FFF7FEFF 		bl	queue_insert
 503              	.LVL28:
 281:lib/chibios/os/rt/src/chsem.c ****   }
 504              		.loc 1 281 5 view .LVU141
 281:lib/chibios/os/rt/src/chsem.c ****   }
 505              		.loc 1 281 12 is_stmt 0 view .LVU142
 506 0028 2100     		movs	r1, r4
 507 002a 0520     		movs	r0, #5
 508 002c FFF7FEFF 		bl	chSchGoSleepTimeoutS
 509              	.LVL29:
 281:lib/chibios/os/rt/src/chsem.c ****   }
 510              		.loc 1 281 12 view .LVU143
 511 0030 F3E7     		b	.L12
 512              	.L17:
 513 0032 C046     		.align	2
 514              	.L16:
 515 0034 00000000 		.word	ch
 516              	.LBE114:
 517              	.LBE113:
 518              		.cfi_endproc
 519              	.LFE160:
 521              		.section	.text.chSemWaitTimeout,"ax",%progbits
 522              		.align	1
 523              		.global	chSemWaitTimeout
 524              		.syntax unified
 525              		.code	16
 526              		.thumb_func
 527              		.fpu softvfp
 529              	chSemWaitTimeout:
 530              	.LVL30:
 531              	.LFB159:
 235:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 532              		.loc 1 235 64 is_stmt 1 view -0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 236:lib/chibios/os/rt/src/chsem.c **** 
 536              		.loc 1 236 3 view .LVU145
 238:lib/chibios/os/rt/src/chsem.c ****   msg = chSemWaitTimeoutS(sp, timeout);
 537              		.loc 1 238 3 view .LVU146
 538              	.LBB115:
 539              	.LBI115:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 540              		.loc 3 353 20 view .LVU147
 541              	.LBE115:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 542              		.loc 3 355 3 view .LVU148
 543              	.LBB123:
 544              	.LBB116:
 545              	.LBI116:
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 546              		.loc 4 387 20 view .LVU149
 547              	.LBE116:
 548              	.LBE123:
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 549              		.loc 4 389 3 view .LVU150
 550              	.LBB124:
 551              	.LBB121:
 552              	.LBB117:
 553              	.LBI117:
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 554              		.loc 5 140 27 view .LVU151
 555              	.LBB118:
 556              		.loc 5 142 3 view .LVU152
 557              	.LBE118:
 558              	.LBE117:
 559              	.LBE121:
 560              	.LBE124:
 235:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 561              		.loc 1 235 64 is_stmt 0 view .LVU153
 562 0000 10B5     		push	{r4, lr}
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 4, -8
 565              		.cfi_offset 14, -4
 566              	.LBB125:
 567              	.LBB122:
 568              	.LBB120:
 569              	.LBB119:
 570              		.loc 5 142 3 view .LVU154
 571              		.syntax divided
 572              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 573 0002 72B6     		cpsid i
 574              	@ 0 "" 2
 575              		.thumb
 576              		.syntax unified
 577              	.LBE119:
 578              	.LBE120:
 579              	.LBE122:
 580              	.LBE125:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 581              		.loc 3 356 34 is_stmt 1 view .LVU155
 357:./lib/chibios/os/rt/include/chsys.h **** }
 582              		.loc 3 357 20 view .LVU156
 239:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 583              		.loc 1 239 3 view .LVU157
 239:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 584              		.loc 1 239 9 is_stmt 0 view .LVU158
 585 0004 FFF7FEFF 		bl	chSemWaitTimeoutS
 586              	.LVL31:
 240:lib/chibios/os/rt/src/chsem.c **** 
 587              		.loc 1 240 3 is_stmt 1 view .LVU159
 588              	.LBB126:
 589              	.LBI126:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 590              		.loc 3 365 20 view .LVU160
 591              	.LBB127:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 592              		.loc 3 367 22 view .LVU161
 368:./lib/chibios/os/rt/include/chsys.h **** 
 593              		.loc 3 368 33 view .LVU162
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 594              		.loc 3 374 3 view .LVU163
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 595              		.loc 3 374 3 view .LVU164
 596              		.loc 3 378 3 view .LVU165
 597              	.LBB128:
 598              	.LBI128:
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 599              		.loc 4 396 20 view .LVU166
 600              	.LBE128:
 601              	.LBE127:
 602              	.LBE126:
 603              		.loc 4 398 3 view .LVU167
 604              	.LBB133:
 605              	.LBB132:
 606              	.LBB131:
 607              	.LBB129:
 608              	.LBI129:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 609              		.loc 5 129 27 view .LVU168
 610              	.LBB130:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 611              		.loc 5 131 3 view .LVU169
 612              		.syntax divided
 613              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 614 0008 62B6     		cpsie i
 615              	@ 0 "" 2
 616              		.thumb
 617              		.syntax unified
 618              	.LBE130:
 619              	.LBE129:
 620              	.LBE131:
 621              	.LBE132:
 622              	.LBE133:
 242:lib/chibios/os/rt/src/chsem.c **** }
 623              		.loc 1 242 3 view .LVU170
 243:lib/chibios/os/rt/src/chsem.c **** 
 624              		.loc 1 243 1 is_stmt 0 view .LVU171
 625              		@ sp needed
 626 000a 10BD     		pop	{r4, pc}
 627              		.cfi_endproc
 628              	.LFE159:
 630              		.section	.text.chSemSignal,"ax",%progbits
 631              		.align	1
 632              		.global	chSemSignal
 633              		.syntax unified
 634              		.code	16
 635              		.thumb_func
 636              		.fpu softvfp
 638              	chSemSignal:
 639              	.LVL32:
 640              	.LFB161:
 286:lib/chibios/os/rt/src/chsem.c **** 
 287:lib/chibios/os/rt/src/chsem.c **** /**
 288:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a signal operation on a semaphore.
 289:lib/chibios/os/rt/src/chsem.c ****  *
 290:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 291:lib/chibios/os/rt/src/chsem.c ****  *
 292:lib/chibios/os/rt/src/chsem.c ****  * @api
 293:lib/chibios/os/rt/src/chsem.c ****  */
 294:lib/chibios/os/rt/src/chsem.c **** void chSemSignal(semaphore_t *sp) {
 641              		.loc 1 294 35 is_stmt 1 view -0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 295:lib/chibios/os/rt/src/chsem.c **** 
 296:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 645              		.loc 1 296 3 view .LVU173
 646              		.loc 1 296 3 view .LVU174
 297:lib/chibios/os/rt/src/chsem.c **** 
 298:lib/chibios/os/rt/src/chsem.c ****   chSysLock();
 647              		.loc 1 298 3 view .LVU175
 648              	.LBB134:
 649              	.LBI134:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 650              		.loc 3 353 20 view .LVU176
 651              	.LBE134:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 652              		.loc 3 355 3 view .LVU177
 653              	.LBB142:
 654              	.LBB135:
 655              	.LBI135:
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 656              		.loc 4 387 20 view .LVU178
 657              	.LBE135:
 658              	.LBE142:
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 659              		.loc 4 389 3 view .LVU179
 660              	.LBB143:
 661              	.LBB140:
 662              	.LBB136:
 663              	.LBI136:
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 664              		.loc 5 140 27 view .LVU180
 665              	.LBB137:
 666              		.loc 5 142 3 view .LVU181
 667              	.LBE137:
 668              	.LBE136:
 669              	.LBE140:
 670              	.LBE143:
 294:lib/chibios/os/rt/src/chsem.c **** 
 671              		.loc 1 294 35 is_stmt 0 view .LVU182
 672 0000 10B5     		push	{r4, lr}
 673              		.cfi_def_cfa_offset 8
 674              		.cfi_offset 4, -8
 675              		.cfi_offset 14, -4
 676              	.LBB144:
 677              	.LBB141:
 678              	.LBB139:
 679              	.LBB138:
 680              		.loc 5 142 3 view .LVU183
 681              		.syntax divided
 682              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 683 0002 72B6     		cpsid i
 684              	@ 0 "" 2
 685              		.thumb
 686              		.syntax unified
 687              	.LBE138:
 688              	.LBE139:
 689              	.LBE141:
 690              	.LBE144:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 691              		.loc 3 356 34 is_stmt 1 view .LVU184
 357:./lib/chibios/os/rt/include/chsys.h **** }
 692              		.loc 3 357 20 view .LVU185
 299:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 693              		.loc 1 299 3 view .LVU186
 694              		.loc 1 299 3 view .LVU187
 300:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 301:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 302:lib/chibios/os/rt/src/chsem.c ****   if (++sp->cnt <= (cnt_t)0) {
 695              		.loc 1 302 3 view .LVU188
 696              		.loc 1 302 7 is_stmt 0 view .LVU189
 697 0004 8368     		ldr	r3, [r0, #8]
 698 0006 0133     		adds	r3, r3, #1
 699              		.loc 1 302 6 view .LVU190
 700 0008 8360     		str	r3, [r0, #8]
 701 000a 002B     		cmp	r3, #0
 702 000c 04DC     		bgt	.L20
 303:lib/chibios/os/rt/src/chsem.c ****     chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 703              		.loc 1 303 5 is_stmt 1 view .LVU191
 704 000e FFF7FEFF 		bl	queue_fifo_remove
 705              	.LVL33:
 706              		.loc 1 303 5 is_stmt 0 view .LVU192
 707 0012 0021     		movs	r1, #0
 708 0014 FFF7FEFF 		bl	chSchWakeupS
 709              	.LVL34:
 710              	.L20:
 304:lib/chibios/os/rt/src/chsem.c ****   }
 305:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 711              		.loc 1 305 3 is_stmt 1 view .LVU193
 712              	.LBB145:
 713              	.LBI145:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 714              		.loc 3 365 20 view .LVU194
 715              	.LBB146:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 716              		.loc 3 367 22 view .LVU195
 368:./lib/chibios/os/rt/include/chsys.h **** 
 717              		.loc 3 368 33 view .LVU196
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 718              		.loc 3 374 3 view .LVU197
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 719              		.loc 3 374 3 view .LVU198
 720              		.loc 3 378 3 view .LVU199
 721              	.LBB147:
 722              	.LBI147:
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 723              		.loc 4 396 20 view .LVU200
 724              	.LBE147:
 725              	.LBE146:
 726              	.LBE145:
 727              		.loc 4 398 3 view .LVU201
 728              	.LBB152:
 729              	.LBB151:
 730              	.LBB150:
 731              	.LBB148:
 732              	.LBI148:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 733              		.loc 5 129 27 view .LVU202
 734              	.LBB149:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 735              		.loc 5 131 3 view .LVU203
 736              		.syntax divided
 737              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 738 0018 62B6     		cpsie i
 739              	@ 0 "" 2
 740              		.thumb
 741              		.syntax unified
 742              	.LBE149:
 743              	.LBE148:
 744              	.LBE150:
 745              	.LBE151:
 746              	.LBE152:
 306:lib/chibios/os/rt/src/chsem.c **** }
 747              		.loc 1 306 1 is_stmt 0 view .LVU204
 748              		@ sp needed
 749 001a 10BD     		pop	{r4, pc}
 750              		.cfi_endproc
 751              	.LFE161:
 753              		.section	.text.chSemSignalI,"ax",%progbits
 754              		.align	1
 755              		.global	chSemSignalI
 756              		.syntax unified
 757              		.code	16
 758              		.thumb_func
 759              		.fpu softvfp
 761              	chSemSignalI:
 762              	.LVL35:
 763              	.LFB162:
 307:lib/chibios/os/rt/src/chsem.c **** 
 308:lib/chibios/os/rt/src/chsem.c **** /**
 309:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a signal operation on a semaphore.
 310:lib/chibios/os/rt/src/chsem.c ****  * @post    This function does not reschedule so a call to a rescheduling
 311:lib/chibios/os/rt/src/chsem.c ****  *          function must be performed before unlocking the kernel. Note that
 312:lib/chibios/os/rt/src/chsem.c ****  *          interrupt handlers always reschedule on exit so an explicit
 313:lib/chibios/os/rt/src/chsem.c ****  *          reschedule must not be performed in ISRs.
 314:lib/chibios/os/rt/src/chsem.c ****  *
 315:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp    pointer to a @p semaphore_t structure
 316:lib/chibios/os/rt/src/chsem.c ****  *
 317:lib/chibios/os/rt/src/chsem.c ****  * @iclass
 318:lib/chibios/os/rt/src/chsem.c ****  */
 319:lib/chibios/os/rt/src/chsem.c **** void chSemSignalI(semaphore_t *sp) {
 764              		.loc 1 319 36 is_stmt 1 view -0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 320:lib/chibios/os/rt/src/chsem.c **** 
 321:lib/chibios/os/rt/src/chsem.c ****   chDbgCheckClassI();
 768              		.loc 1 321 21 view .LVU206
 322:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 769              		.loc 1 322 3 view .LVU207
 770              		.loc 1 322 3 view .LVU208
 323:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 771              		.loc 1 323 3 view .LVU209
 772              		.loc 1 323 3 view .LVU210
 324:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 325:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 326:lib/chibios/os/rt/src/chsem.c **** 
 327:lib/chibios/os/rt/src/chsem.c ****   if (++sp->cnt <= (cnt_t)0) {
 773              		.loc 1 327 3 view .LVU211
 774              		.loc 1 327 7 is_stmt 0 view .LVU212
 775 0000 8368     		ldr	r3, [r0, #8]
 319:lib/chibios/os/rt/src/chsem.c **** 
 776              		.loc 1 319 36 view .LVU213
 777 0002 10B5     		push	{r4, lr}
 778              		.cfi_def_cfa_offset 8
 779              		.cfi_offset 4, -8
 780              		.cfi_offset 14, -4
 781              		.loc 1 327 7 view .LVU214
 782 0004 0133     		adds	r3, r3, #1
 783              		.loc 1 327 6 view .LVU215
 784 0006 8360     		str	r3, [r0, #8]
 785 0008 002B     		cmp	r3, #0
 786 000a 05DC     		bgt	.L21
 787              	.LBB153:
 328:lib/chibios/os/rt/src/chsem.c ****     /* Note, it is done this way in order to allow a tail call on
 329:lib/chibios/os/rt/src/chsem.c ****              chSchReadyI().*/
 330:lib/chibios/os/rt/src/chsem.c ****     thread_t *tp = queue_fifo_remove(&sp->queue);
 788              		.loc 1 330 5 is_stmt 1 view .LVU216
 789              		.loc 1 330 20 is_stmt 0 view .LVU217
 790 000c FFF7FEFF 		bl	queue_fifo_remove
 791              	.LVL36:
 331:lib/chibios/os/rt/src/chsem.c ****     tp->u.rdymsg = MSG_OK;
 792              		.loc 1 331 5 is_stmt 1 view .LVU218
 793              		.loc 1 331 18 is_stmt 0 view .LVU219
 794 0010 0023     		movs	r3, #0
 795 0012 0362     		str	r3, [r0, #32]
 332:lib/chibios/os/rt/src/chsem.c ****     (void) chSchReadyI(tp);
 796              		.loc 1 332 5 is_stmt 1 view .LVU220
 797              		.loc 1 332 12 is_stmt 0 view .LVU221
 798 0014 FFF7FEFF 		bl	chSchReadyI
 799              	.LVL37:
 800              	.L21:
 801              		.loc 1 332 12 view .LVU222
 802              	.LBE153:
 333:lib/chibios/os/rt/src/chsem.c ****   }
 334:lib/chibios/os/rt/src/chsem.c **** }
 803              		.loc 1 334 1 view .LVU223
 804              		@ sp needed
 805 0018 10BD     		pop	{r4, pc}
 806              		.cfi_endproc
 807              	.LFE162:
 809              		.section	.text.chSemAddCounterI,"ax",%progbits
 810              		.align	1
 811              		.global	chSemAddCounterI
 812              		.syntax unified
 813              		.code	16
 814              		.thumb_func
 815              		.fpu softvfp
 817              	chSemAddCounterI:
 818              	.LVL38:
 819              	.LFB163:
 335:lib/chibios/os/rt/src/chsem.c **** 
 336:lib/chibios/os/rt/src/chsem.c **** /**
 337:lib/chibios/os/rt/src/chsem.c ****  * @brief   Adds the specified value to the semaphore counter.
 338:lib/chibios/os/rt/src/chsem.c ****  * @post    This function does not reschedule so a call to a rescheduling
 339:lib/chibios/os/rt/src/chsem.c ****  *          function must be performed before unlocking the kernel. Note that
 340:lib/chibios/os/rt/src/chsem.c ****  *          interrupt handlers always reschedule on exit so an explicit
 341:lib/chibios/os/rt/src/chsem.c ****  *          reschedule must not be performed in ISRs.
 342:lib/chibios/os/rt/src/chsem.c ****  *
 343:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 344:lib/chibios/os/rt/src/chsem.c ****  * @param[in] n         value to be added to the semaphore counter. The value
 345:lib/chibios/os/rt/src/chsem.c ****  *                      must be positive.
 346:lib/chibios/os/rt/src/chsem.c ****  *
 347:lib/chibios/os/rt/src/chsem.c ****  * @iclass
 348:lib/chibios/os/rt/src/chsem.c ****  */
 349:lib/chibios/os/rt/src/chsem.c **** void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 820              		.loc 1 349 49 is_stmt 1 view -0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              		.loc 1 349 49 is_stmt 0 view .LVU225
 825 0000 70B5     		push	{r4, r5, r6, lr}
 826              		.cfi_def_cfa_offset 16
 827              		.cfi_offset 4, -16
 828              		.cfi_offset 5, -12
 829              		.cfi_offset 6, -8
 830              		.cfi_offset 14, -4
 831 0002 0500     		movs	r5, r0
 832 0004 0C00     		movs	r4, r1
 350:lib/chibios/os/rt/src/chsem.c **** 
 351:lib/chibios/os/rt/src/chsem.c ****   chDbgCheckClassI();
 833              		.loc 1 351 21 is_stmt 1 view .LVU226
 352:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck((sp != NULL) && (n > (cnt_t)0));
 834              		.loc 1 352 3 view .LVU227
 835              		.loc 1 352 3 view .LVU228
 353:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 836              		.loc 1 353 3 view .LVU229
 837              		.loc 1 353 3 view .LVU230
 838              	.LVL39:
 839              	.L24:
 354:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 355:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 356:lib/chibios/os/rt/src/chsem.c **** 
 357:lib/chibios/os/rt/src/chsem.c ****   while (n > (cnt_t)0) {
 840              		.loc 1 357 9 is_stmt 0 view .LVU231
 841 0006 002C     		cmp	r4, #0
 842 0008 00DC     		bgt	.L26
 358:lib/chibios/os/rt/src/chsem.c ****     if (++sp->cnt <= (cnt_t)0) {
 359:lib/chibios/os/rt/src/chsem.c ****       chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 360:lib/chibios/os/rt/src/chsem.c ****     }
 361:lib/chibios/os/rt/src/chsem.c ****     n--;
 362:lib/chibios/os/rt/src/chsem.c ****   }
 363:lib/chibios/os/rt/src/chsem.c **** }
 843              		.loc 1 363 1 view .LVU232
 844              		@ sp needed
 845              	.LVL40:
 846              	.LVL41:
 847              		.loc 1 363 1 view .LVU233
 848 000a 70BD     		pop	{r4, r5, r6, pc}
 849              	.LVL42:
 850              	.L26:
 358:lib/chibios/os/rt/src/chsem.c ****     if (++sp->cnt <= (cnt_t)0) {
 851              		.loc 1 358 5 is_stmt 1 view .LVU234
 358:lib/chibios/os/rt/src/chsem.c ****     if (++sp->cnt <= (cnt_t)0) {
 852              		.loc 1 358 9 is_stmt 0 view .LVU235
 853 000c AB68     		ldr	r3, [r5, #8]
 854 000e 0133     		adds	r3, r3, #1
 358:lib/chibios/os/rt/src/chsem.c ****     if (++sp->cnt <= (cnt_t)0) {
 855              		.loc 1 358 8 view .LVU236
 856 0010 AB60     		str	r3, [r5, #8]
 857 0012 002B     		cmp	r3, #0
 858 0014 06DC     		bgt	.L25
 359:lib/chibios/os/rt/src/chsem.c ****     }
 859              		.loc 1 359 7 is_stmt 1 view .LVU237
 860 0016 2800     		movs	r0, r5
 861 0018 FFF7FEFF 		bl	queue_fifo_remove
 862              	.LVL43:
 863 001c FFF7FEFF 		bl	chSchReadyI
 864              	.LVL44:
 359:lib/chibios/os/rt/src/chsem.c ****     }
 865              		.loc 1 359 60 is_stmt 0 view .LVU238
 866 0020 0023     		movs	r3, #0
 867 0022 0362     		str	r3, [r0, #32]
 868              	.L25:
 361:lib/chibios/os/rt/src/chsem.c ****   }
 869              		.loc 1 361 5 is_stmt 1 view .LVU239
 361:lib/chibios/os/rt/src/chsem.c ****   }
 870              		.loc 1 361 6 is_stmt 0 view .LVU240
 871 0024 013C     		subs	r4, r4, #1
 872              	.LVL45:
 361:lib/chibios/os/rt/src/chsem.c ****   }
 873              		.loc 1 361 6 view .LVU241
 874 0026 EEE7     		b	.L24
 875              		.cfi_endproc
 876              	.LFE163:
 878              		.section	.text.chSemSignalWait,"ax",%progbits
 879              		.align	1
 880              		.global	chSemSignalWait
 881              		.syntax unified
 882              		.code	16
 883              		.thumb_func
 884              		.fpu softvfp
 886              	chSemSignalWait:
 887              	.LVL46:
 888              	.LFB164:
 364:lib/chibios/os/rt/src/chsem.c **** 
 365:lib/chibios/os/rt/src/chsem.c **** /**
 366:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs atomic signal and wait operations on two semaphores.
 367:lib/chibios/os/rt/src/chsem.c ****  *
 368:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sps       pointer to a @p semaphore_t structure to be signaled
 369:lib/chibios/os/rt/src/chsem.c ****  * @param[in] spw       pointer to a @p semaphore_t structure to wait on
 370:lib/chibios/os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 371:lib/chibios/os/rt/src/chsem.c ****  *                      released from the semaphore.
 372:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 373:lib/chibios/os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 374:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 375:lib/chibios/os/rt/src/chsem.c ****  *
 376:lib/chibios/os/rt/src/chsem.c ****  * @api
 377:lib/chibios/os/rt/src/chsem.c ****  */
 378:lib/chibios/os/rt/src/chsem.c **** msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 889              		.loc 1 378 59 is_stmt 1 view -0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 0
 892              		@ frame_needed = 0, uses_anonymous_args = 0
 379:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 893              		.loc 1 379 3 view .LVU243
 380:lib/chibios/os/rt/src/chsem.c **** 
 381:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck((sps != NULL) && (spw != NULL));
 894              		.loc 1 381 3 view .LVU244
 895              		.loc 1 381 3 view .LVU245
 382:lib/chibios/os/rt/src/chsem.c **** 
 383:lib/chibios/os/rt/src/chsem.c ****   chSysLock();
 896              		.loc 1 383 3 view .LVU246
 897              	.LBB154:
 898              	.LBI154:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 899              		.loc 3 353 20 view .LVU247
 900              	.LBE154:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 901              		.loc 3 355 3 view .LVU248
 902              	.LBB162:
 903              	.LBB155:
 904              	.LBI155:
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 905              		.loc 4 387 20 view .LVU249
 906              	.LBE155:
 907              	.LBE162:
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 908              		.loc 4 389 3 view .LVU250
 909              	.LBB163:
 910              	.LBB160:
 911              	.LBB156:
 912              	.LBI156:
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 913              		.loc 5 140 27 view .LVU251
 914              	.LBB157:
 915              		.loc 5 142 3 view .LVU252
 916              	.LBE157:
 917              	.LBE156:
 918              	.LBE160:
 919              	.LBE163:
 378:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 920              		.loc 1 378 59 is_stmt 0 view .LVU253
 921 0000 70B5     		push	{r4, r5, r6, lr}
 922              		.cfi_def_cfa_offset 16
 923              		.cfi_offset 4, -16
 924              		.cfi_offset 5, -12
 925              		.cfi_offset 6, -8
 926              		.cfi_offset 14, -4
 378:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 927              		.loc 1 378 59 view .LVU254
 928 0002 0C00     		movs	r4, r1
 929              	.LBB164:
 930              	.LBB161:
 931              	.LBB159:
 932              	.LBB158:
 933              		.loc 5 142 3 view .LVU255
 934              		.syntax divided
 935              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 936 0004 72B6     		cpsid i
 937              	@ 0 "" 2
 938              		.thumb
 939              		.syntax unified
 940              	.LBE158:
 941              	.LBE159:
 942              	.LBE161:
 943              	.LBE164:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 944              		.loc 3 356 34 is_stmt 1 view .LVU256
 357:./lib/chibios/os/rt/include/chsys.h **** }
 945              		.loc 3 357 20 view .LVU257
 384:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sps->cnt >= (cnt_t)0) && queue_isempty(&sps->queue)) ||
 946              		.loc 1 384 3 view .LVU258
 947              		.loc 1 384 3 view .LVU259
 385:lib/chibios/os/rt/src/chsem.c ****               ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
 386:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 387:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
 948              		.loc 1 387 3 view .LVU260
 949              		.loc 1 387 3 view .LVU261
 388:lib/chibios/os/rt/src/chsem.c ****               ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
 389:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 390:lib/chibios/os/rt/src/chsem.c ****   if (++sps->cnt <= (cnt_t)0) {
 950              		.loc 1 390 3 view .LVU262
 951              		.loc 1 390 7 is_stmt 0 view .LVU263
 952 0006 8368     		ldr	r3, [r0, #8]
 953 0008 0133     		adds	r3, r3, #1
 954              		.loc 1 390 6 view .LVU264
 955 000a 8360     		str	r3, [r0, #8]
 956 000c 002B     		cmp	r3, #0
 957 000e 05DC     		bgt	.L28
 391:lib/chibios/os/rt/src/chsem.c ****     chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 958              		.loc 1 391 5 is_stmt 1 view .LVU265
 959 0010 FFF7FEFF 		bl	queue_fifo_remove
 960              	.LVL47:
 961              		.loc 1 391 5 is_stmt 0 view .LVU266
 962 0014 FFF7FEFF 		bl	chSchReadyI
 963              	.LVL48:
 964              		.loc 1 391 59 view .LVU267
 965 0018 0023     		movs	r3, #0
 966 001a 0362     		str	r3, [r0, #32]
 967              	.L28:
 392:lib/chibios/os/rt/src/chsem.c ****   }
 393:lib/chibios/os/rt/src/chsem.c ****   if (--spw->cnt < (cnt_t)0) {
 968              		.loc 1 393 3 is_stmt 1 view .LVU268
 969              		.loc 1 393 7 is_stmt 0 view .LVU269
 970 001c A368     		ldr	r3, [r4, #8]
 971 001e 013B     		subs	r3, r3, #1
 972              		.loc 1 393 6 view .LVU270
 973 0020 A360     		str	r3, [r4, #8]
 974 0022 002B     		cmp	r3, #0
 975 0024 0CDA     		bge	.L29
 976              	.LBB165:
 394:lib/chibios/os/rt/src/chsem.c ****     thread_t *ctp = currp;
 977              		.loc 1 394 5 is_stmt 1 view .LVU271
 978              		.loc 1 394 15 is_stmt 0 view .LVU272
 979 0026 084B     		ldr	r3, .L31
 395:lib/chibios/os/rt/src/chsem.c ****     sem_insert(ctp, &spw->queue);
 980              		.loc 1 395 5 view .LVU273
 981 0028 2100     		movs	r1, r4
 394:lib/chibios/os/rt/src/chsem.c ****     thread_t *ctp = currp;
 982              		.loc 1 394 15 view .LVU274
 983 002a 9D69     		ldr	r5, [r3, #24]
 984              	.LVL49:
 985              		.loc 1 395 5 is_stmt 1 view .LVU275
 986 002c 2800     		movs	r0, r5
 987 002e FFF7FEFF 		bl	queue_insert
 988              	.LVL50:
 396:lib/chibios/os/rt/src/chsem.c ****     ctp->u.wtsemp = spw;
 989              		.loc 1 396 5 view .LVU276
 397:lib/chibios/os/rt/src/chsem.c ****     chSchGoSleepS(CH_STATE_WTSEM);
 990              		.loc 1 397 5 is_stmt 0 view .LVU277
 991 0032 0520     		movs	r0, #5
 396:lib/chibios/os/rt/src/chsem.c ****     ctp->u.wtsemp = spw;
 992              		.loc 1 396 19 view .LVU278
 993 0034 2C62     		str	r4, [r5, #32]
 994              		.loc 1 397 5 is_stmt 1 view .LVU279
 995 0036 FFF7FEFF 		bl	chSchGoSleepS
 996              	.LVL51:
 398:lib/chibios/os/rt/src/chsem.c ****     msg = ctp->u.rdymsg;
 997              		.loc 1 398 5 view .LVU280
 998              		.loc 1 398 9 is_stmt 0 view .LVU281
 999 003a 286A     		ldr	r0, [r5, #32]
 1000              	.LVL52:
 1001              	.L30:
 1002              		.loc 1 398 9 view .LVU282
 1003              	.LBE165:
 399:lib/chibios/os/rt/src/chsem.c ****   }
 400:lib/chibios/os/rt/src/chsem.c ****   else {
 401:lib/chibios/os/rt/src/chsem.c ****     chSchRescheduleS();
 402:lib/chibios/os/rt/src/chsem.c ****     msg = MSG_OK;
 403:lib/chibios/os/rt/src/chsem.c ****   }
 404:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 1004              		.loc 1 404 3 is_stmt 1 view .LVU283
 1005              	.LBB166:
 1006              	.LBI166:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 1007              		.loc 3 365 20 view .LVU284
 1008              	.LBB167:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1009              		.loc 3 367 22 view .LVU285
 368:./lib/chibios/os/rt/include/chsys.h **** 
 1010              		.loc 3 368 33 view .LVU286
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1011              		.loc 3 374 3 view .LVU287
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1012              		.loc 3 374 3 view .LVU288
 1013              		.loc 3 378 3 view .LVU289
 1014              	.LBB168:
 1015              	.LBI168:
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 1016              		.loc 4 396 20 view .LVU290
 1017              	.LBE168:
 1018              	.LBE167:
 1019              	.LBE166:
 1020              		.loc 4 398 3 view .LVU291
 1021              	.LBB173:
 1022              	.LBB172:
 1023              	.LBB171:
 1024              	.LBB169:
 1025              	.LBI169:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1026              		.loc 5 129 27 view .LVU292
 1027              	.LBB170:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 1028              		.loc 5 131 3 view .LVU293
 1029              		.syntax divided
 1030              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1031 003c 62B6     		cpsie i
 1032              	@ 0 "" 2
 1033              		.thumb
 1034              		.syntax unified
 1035              	.LBE170:
 1036              	.LBE169:
 1037              	.LBE171:
 1038              	.LBE172:
 1039              	.LBE173:
 405:lib/chibios/os/rt/src/chsem.c **** 
 406:lib/chibios/os/rt/src/chsem.c ****   return msg;
 1040              		.loc 1 406 3 view .LVU294
 407:lib/chibios/os/rt/src/chsem.c **** }
 1041              		.loc 1 407 1 is_stmt 0 view .LVU295
 1042              		@ sp needed
 1043              	.LVL53:
 1044              		.loc 1 407 1 view .LVU296
 1045 003e 70BD     		pop	{r4, r5, r6, pc}
 1046              	.LVL54:
 1047              	.L29:
 401:lib/chibios/os/rt/src/chsem.c ****     msg = MSG_OK;
 1048              		.loc 1 401 5 is_stmt 1 view .LVU297
 1049 0040 FFF7FEFF 		bl	chSchRescheduleS
 1050              	.LVL55:
 402:lib/chibios/os/rt/src/chsem.c ****   }
 1051              		.loc 1 402 5 view .LVU298
 402:lib/chibios/os/rt/src/chsem.c ****   }
 1052              		.loc 1 402 9 is_stmt 0 view .LVU299
 1053 0044 0020     		movs	r0, #0
 1054 0046 F9E7     		b	.L30
 1055              	.L32:
 1056              		.align	2
 1057              	.L31:
 1058 0048 00000000 		.word	ch
 1059              		.cfi_endproc
 1060              	.LFE164:
 1062              		.text
 1063              	.Letext0:
 1064              		.file 6 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_
 1065              		.file 7 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdi
 1066              		.file 8 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1067              		.file 9 "./lib/chibios/os/rt/include/chsystypes.h"
 1068              		.file 10 "./lib/chibios/os/rt/include/chtime.h"
 1069              		.file 11 "./lib/chibios/os/common/ext/ST/STM32F0xx/system_stm32f0xx.h"
 1070              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1071              		.file 13 "./lib/chibios/os/rt/include/chsem.h"
 1072              		.file 14 "./lib/chibios/os/rt/include/chmtx.h"
 1073              		.file 15 "./lib/chibios/os/rt/include/chregistry.h"
 1074              		.file 16 "./lib/chibios/os/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:00000000 chsem.c
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:16     .text.chSemObjectInit:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:24     .text.chSemObjectInit:00000000 chSemObjectInit
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:61     .text.chSemResetI:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:68     .text.chSemResetI:00000000 chSemResetI
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:131    .text.chSemReset:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:138    .text.chSemReset:00000000 chSemReset
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:243    .text.chSemWaitS:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:250    .text.chSemWaitS:00000000 chSemWaitS
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:314    .text.chSemWaitS:00000028 $d
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:319    .text.chSemWait:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:326    .text.chSemWait:00000000 chSemWait
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:428    .text.chSemWaitTimeoutS:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:435    .text.chSemWaitTimeoutS:00000000 chSemWaitTimeoutS
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:515    .text.chSemWaitTimeoutS:00000034 $d
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:522    .text.chSemWaitTimeout:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:529    .text.chSemWaitTimeout:00000000 chSemWaitTimeout
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:631    .text.chSemSignal:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:638    .text.chSemSignal:00000000 chSemSignal
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:754    .text.chSemSignalI:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:761    .text.chSemSignalI:00000000 chSemSignalI
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:810    .text.chSemAddCounterI:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:817    .text.chSemAddCounterI:00000000 chSemAddCounterI
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:879    .text.chSemSignalWait:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:886    .text.chSemSignalWait:00000000 chSemSignalWait
C:\Users\kyleo\AppData\Local\Temp\cci897gr.s:1058   .text.chSemSignalWait:00000048 $d

UNDEFINED SYMBOLS
queue_lifo_remove
chSchReadyI
chSchRescheduleS
queue_insert
chSchGoSleepS
ch
chSchGoSleepTimeoutS
queue_fifo_remove
chSchWakeupS
