   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 2
  11              		.file	"stm32_dma.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.dmaInit,"ax",%progbits
  16              		.align	1
  17              		.global	dmaInit
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	dmaInit:
  25              	.LFB187:
  26              		.file 1 "lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c"
   1:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*
   2:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
   4:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     you may not use this file except in compliance with the License.
   6:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     You may obtain a copy of the License at
   7:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
   8:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  10:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     Unless required by applicable law or agreed to in writing, software
  11:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     See the License for the specific language governing permissions and
  14:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     limitations under the License.
  15:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** */
  16:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  17:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
  18:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @file    DMAv1/stm32_dma.c
  19:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA helper driver code.
  20:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
  21:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @addtogroup STM32_DMA
  22:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @details DMA sharing helper driver. In the STM32 the DMA streams are a
  23:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          shared resource, this driver allows to allocate and free DMA
  24:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          streams at runtime in order to allow all the other device
  25:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          drivers to coordinate the access to the resource.
  26:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @note    The DMA ISR handlers are all declared into this module because
  27:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          sharing, the various device drivers can associate a callback to
  28:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          ISRs when allocating streams.
  29:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @{
  30:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
  31:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  32:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #include "hal.h"
  33:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  34:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /* The following macro is only defined if some driver requiring DMA services
  35:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****    has been enabled.*/
  36:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA_REQUIRED) || defined(__DOXYGEN__)
  37:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  38:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
  39:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /* Driver local definitions.                                                 */
  40:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
  41:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  42:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
  43:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   Mask of the DMA1 streams in @p dma_streams_mask.
  44:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
  45:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define STM32_DMA1_STREAMS_MASK     ((1U << STM32_DMA1_NUM_CHANNELS) - 1U)
  46:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  47:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
  48:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   Mask of the DMA2 streams in @p dma_streams_mask.
  49:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
  50:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define STM32_DMA2_STREAMS_MASK     (((1U << STM32_DMA2_NUM_CHANNELS) -     \
  51:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****                                      1U) << STM32_DMA1_NUM_CHANNELS)
  52:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  53:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA_SUPPORTS_CSELR == TRUE
  54:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  55:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(DMA1_CSELR)
  56:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_VARIANT                &DMA1_CSELR->CSELR
  57:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #else
  58:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_VARIANT                &DMA1->CSELR
  59:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
  60:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  61:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(DMA2_CSELR)
  62:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_VARIANT                &DMA2_CSELR->CSELR
  63:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #else
  64:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_VARIANT                &DMA2->CSELR
  65:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
  66:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  67:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH1_VARIANT            DMA1_VARIANT
  68:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH2_VARIANT            DMA1_VARIANT
  69:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH3_VARIANT            DMA1_VARIANT
  70:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH4_VARIANT            DMA1_VARIANT
  71:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH5_VARIANT            DMA1_VARIANT
  72:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH6_VARIANT            DMA1_VARIANT
  73:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH7_VARIANT            DMA1_VARIANT
  74:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH1_VARIANT            DMA2_VARIANT
  75:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH2_VARIANT            DMA2_VARIANT
  76:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH3_VARIANT            DMA2_VARIANT
  77:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH4_VARIANT            DMA2_VARIANT
  78:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH5_VARIANT            DMA2_VARIANT
  79:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH6_VARIANT            DMA2_VARIANT
  80:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH7_VARIANT            DMA2_VARIANT
  81:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  82:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #elif STM32_DMA_SUPPORTS_DMAMUX == TRUE
  83:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  84:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH1_VARIANT            DMAMUX1_Channel0
  85:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH2_VARIANT            DMAMUX1_Channel1
  86:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH3_VARIANT            DMAMUX1_Channel2
  87:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH4_VARIANT            DMAMUX1_Channel3
  88:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH5_VARIANT            DMAMUX1_Channel4
  89:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH6_VARIANT            DMAMUX1_Channel5
  90:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH7_VARIANT            DMAMUX1_Channel6
  91:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH1_VARIANT            DMAMUX1_Channel7
  92:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH2_VARIANT            DMAMUX1_Channel8
  93:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH3_VARIANT            DMAMUX1_Channel9
  94:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH4_VARIANT            DMAMUX1_Channel10
  95:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH5_VARIANT            DMAMUX1_Channel11
  96:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH6_VARIANT            DMAMUX1_Channel12
  97:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH7_VARIANT            DMAMUX1_Channel13
  98:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
  99:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #else /* !(STM32_DMA_SUPPORTS_DMAMUX == TRUE) */
 100:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 101:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH1_VARIANT            0
 102:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH2_VARIANT            0
 103:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH3_VARIANT            0
 104:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH4_VARIANT            0
 105:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH5_VARIANT            0
 106:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH6_VARIANT            0
 107:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH7_VARIANT            0
 108:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH1_VARIANT            0
 109:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH2_VARIANT            0
 110:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH3_VARIANT            0
 111:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH4_VARIANT            0
 112:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH5_VARIANT            0
 113:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH6_VARIANT            0
 114:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH7_VARIANT            0
 115:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 116:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif /* !(STM32_DMA_SUPPORTS_DMAMUX == TRUE) */
 117:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 118:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*
 119:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * Default ISR collision masks.
 120:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 121:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA1_CH1_CMASK)
 122:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH1_CMASK              0x00000001U
 123:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 124:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 125:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA1_CH2_CMASK)
 126:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH2_CMASK              0x00000002U
 127:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 128:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 129:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA1_CH3_CMASK)
 130:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH3_CMASK              0x00000004U
 131:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 132:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 133:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA1_CH4_CMASK)
 134:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH4_CMASK              0x00000008U
 135:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 136:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 137:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA1_CH5_CMASK)
 138:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH5_CMASK              0x00000010U
 139:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 140:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 141:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA1_CH6_CMASK)
 142:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH6_CMASK              0x00000020U
 143:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 144:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 145:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA1_CH7_CMASK)
 146:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA1_CH7_CMASK              0x00000040U
 147:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 148:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 149:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA2_CH1_CMASK)
 150:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH1_CMASK              0x00000080U
 151:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 152:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 153:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA2_CH2_CMASK)
 154:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH2_CMASK              0x00000100U
 155:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 156:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 157:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA2_CH3_CMASK)
 158:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH3_CMASK              0x00000200U
 159:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 160:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 161:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA2_CH4_CMASK)
 162:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH4_CMASK              0x00000400U
 163:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 164:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 165:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA2_CH5_CMASK)
 166:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH5_CMASK              0x00000800U
 167:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 168:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 169:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA2_CH6_CMASK)
 170:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH6_CMASK              0x00001000U
 171:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 172:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 173:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if !defined(DMA2_CH7_CMASK)
 174:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #define DMA2_CH7_CMASK              0x00002000U
 175:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 176:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 177:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
 178:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /* Driver exported variables.                                                */
 179:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
 180:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 181:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 182:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA streams descriptors.
 183:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @details This table keeps the association between an unique stream
 184:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          identifier and the involved physical registers.
 185:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @note    Don't use this array directly, use the appropriate wrapper macros
 186:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          instead: @p STM32_DMA1_STREAM1, @p STM32_DMA1_STREAM2 etc.
 187:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 188:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** const stm32_dma_stream_t _stm32_dma_streams[STM32_DMA_STREAMS] = {
 189:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA1, DMA1_Channel1, DMA1_CH1_CMASK, DMA1_CH1_VARIANT,  0,  0, STM32_DMA1_CH1_NUMBER},
 190:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA1, DMA1_Channel2, DMA1_CH2_CMASK, DMA1_CH2_VARIANT,  4,  1, STM32_DMA1_CH2_NUMBER},
 191:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA1, DMA1_Channel3, DMA1_CH3_CMASK, DMA1_CH3_VARIANT,  8,  2, STM32_DMA1_CH3_NUMBER},
 192:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA1, DMA1_Channel4, DMA1_CH4_CMASK, DMA1_CH4_VARIANT, 12,  3, STM32_DMA1_CH4_NUMBER},
 193:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA1, DMA1_Channel5, DMA1_CH5_CMASK, DMA1_CH5_VARIANT, 16,  4, STM32_DMA1_CH5_NUMBER},
 194:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA1_NUM_CHANNELS > 5
 195:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA1, DMA1_Channel6, DMA1_CH6_CMASK, DMA1_CH6_VARIANT, 20,  5, STM32_DMA1_CH6_NUMBER},
 196:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA1_NUM_CHANNELS > 6
 197:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA1, DMA1_Channel7, DMA1_CH7_CMASK, DMA1_CH7_VARIANT, 24,  6, STM32_DMA1_CH7_NUMBER},
 198:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA2_NUM_CHANNELS > 0
 199:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA2, DMA2_Channel1, DMA2_CH1_CMASK, DMA2_CH1_VARIANT,  0,  7, STM32_DMA2_CH1_NUMBER},
 200:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA2, DMA2_Channel2, DMA2_CH2_CMASK, DMA2_CH2_VARIANT,  4,  8, STM32_DMA2_CH2_NUMBER},
 201:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA2, DMA2_Channel3, DMA2_CH3_CMASK, DMA2_CH3_VARIANT,  8,  9, STM32_DMA2_CH3_NUMBER},
 202:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA2, DMA2_Channel4, DMA2_CH4_CMASK, DMA2_CH4_VARIANT, 12, 10, STM32_DMA2_CH4_NUMBER},
 203:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA2, DMA2_Channel5, DMA2_CH5_CMASK, DMA2_CH5_VARIANT, 16, 11, STM32_DMA2_CH5_NUMBER},
 204:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA2_NUM_CHANNELS > 5
 205:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA2, DMA2_Channel6, DMA2_CH6_CMASK, DMA2_CH6_VARIANT, 20, 12, STM32_DMA2_CH6_NUMBER},
 206:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA2_NUM_CHANNELS > 6
 207:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   {DMA2, DMA2_Channel7, DMA2_CH7_CMASK, DMA2_CH7_VARIANT, 24, 13, STM32_DMA2_CH7_NUMBER},
 208:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 209:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 210:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 211:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 212:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 213:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** };
 214:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 215:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
 216:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /* Driver local variables and types.                                         */
 217:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
 218:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 219:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 220:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   Global DMA-related data structures.
 221:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 222:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** static struct {
 223:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   /**
 224:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****    * @brief   Mask of the allocated streams.
 225:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****    */
 226:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   uint32_t          allocated_mask;
 227:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   /**
 228:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****    * @brief   Mask of the enabled streams ISRs.
 229:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****    */
 230:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   uint32_t          isr_mask;
 231:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   /**
 232:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****    * @brief   DMA IRQ redirectors.
 233:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****    */
 234:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   struct {
 235:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     /**
 236:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****      * @brief   DMA callback function.
 237:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****      */
 238:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     stm32_dmaisr_t    func;
 239:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     /**
 240:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****      * @brief   DMA callback parameter.
 241:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****      */
 242:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     void              *param;
 243:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   } streams[STM32_DMA_STREAMS];
 244:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** } dma;
 245:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 246:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
 247:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /* Driver local functions.                                                   */
 248:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
 249:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 250:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
 251:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /* Driver interrupt handlers.                                                */
 252:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
 253:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 254:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA1_CH1_HANDLER) || defined(__DOXYGEN__)
 255:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 256:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA1 stream 1 shared ISR.
 257:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 258:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 259:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 260:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 261:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 262:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 263:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 264:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA1_STREAM1);
 265:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 266:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 267:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 268:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 269:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 270:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA1_CH2_HANDLER) || defined(__DOXYGEN__)
 271:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 272:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA1 stream 2 shared ISR.
 273:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 274:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 275:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 276:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 277:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 278:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 279:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 280:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA1_STREAM2);
 281:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 282:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 283:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 284:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 285:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 286:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA1_CH3_HANDLER) || defined(__DOXYGEN__)
 287:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 288:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA1 stream 3 shared ISR.
 289:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 290:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 291:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 292:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 293:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 294:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 295:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 296:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA1_STREAM3);
 297:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 298:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 299:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 300:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 301:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 302:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA1_CH4_HANDLER) || defined(__DOXYGEN__)
 303:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 304:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA1 stream 4 shared ISR.
 305:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 306:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 307:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 308:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 309:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 310:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 311:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 312:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA1_STREAM4);
 313:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 314:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 315:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 316:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 317:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 318:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA1_CH5_HANDLER) || defined(__DOXYGEN__)
 319:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 320:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA1 stream 5 shared ISR.
 321:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 322:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 323:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 324:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 325:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 326:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 327:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 328:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA1_STREAM5);
 329:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 330:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 331:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 332:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 333:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 334:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA1_CH6_HANDLER) || defined(__DOXYGEN__)
 335:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 336:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA1 stream 6 shared ISR.
 337:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 338:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 339:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 340:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 341:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 342:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 343:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 344:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA1_STREAM6);
 345:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 346:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 347:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 348:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 349:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 350:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA1_CH7_HANDLER) || defined(__DOXYGEN__)
 351:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 352:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA1 stream 7 shared ISR.
 353:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 354:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 355:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 356:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 357:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 358:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 359:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 360:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA1_STREAM7);
 361:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 362:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 363:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 364:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 365:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 366:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA2_CH1_HANDLER) || defined(__DOXYGEN__)
 367:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 368:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA2 stream 1 shared ISR.
 369:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 370:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 371:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 372:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 373:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 374:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 375:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 376:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA2_STREAM1);
 377:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 378:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 379:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 380:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 381:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 382:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA2_CH2_HANDLER) || defined(__DOXYGEN__)
 383:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 384:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA2 stream 2 shared ISR.
 385:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 386:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 387:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 388:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 389:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 390:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 391:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 392:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA2_STREAM2);
 393:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 394:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 395:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 396:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 397:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 398:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA2_CH3_HANDLER) || defined(__DOXYGEN__)
 399:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 400:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA2 stream 3 shared ISR.
 401:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 402:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 403:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 404:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 405:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 406:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 407:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 408:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA2_STREAM3);
 409:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 410:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 411:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 412:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 413:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 414:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA2_CH4_HANDLER) || defined(__DOXYGEN__)
 415:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 416:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA2 stream 4 shared ISR.
 417:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 418:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 419:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 420:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 421:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 422:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 423:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 424:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA2_STREAM4);
 425:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 426:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 427:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 428:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 429:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 430:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA2_CH5_HANDLER) || defined(__DOXYGEN__)
 431:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 432:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA2 stream 5 shared ISR.
 433:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 434:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 435:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 436:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 437:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 438:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 439:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 440:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA2_STREAM5);
 441:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 442:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 443:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 444:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 445:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 446:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA2_CH6_HANDLER) || defined(__DOXYGEN__)
 447:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 448:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA2 stream 6 shared ISR.
 449:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 450:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 451:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 452:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 453:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 454:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 455:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 456:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA2_STREAM6);
 457:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 458:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 459:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 460:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 461:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 462:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if defined(STM32_DMA2_CH7_HANDLER) || defined(__DOXYGEN__)
 463:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 464:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   DMA2 stream 7 shared ISR.
 465:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 466:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @isr
 467:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 468:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 469:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 470:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_PROLOGUE();
 471:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 472:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaServeInterrupt(STM32_DMA2_STREAM7);
 473:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 474:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   OSAL_IRQ_EPILOGUE();
 475:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 476:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 477:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 478:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
 479:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /* Driver exported functions.                                                */
 480:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /*===========================================================================*/
 481:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 482:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 483:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   STM32 DMA helper initialization.
 484:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 485:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @init
 486:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 487:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** void dmaInit(void) {
  27              		.loc 1 487 20 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
 488:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   int i;
  31              		.loc 1 488 3 view .LVU1
 489:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 490:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dma.allocated_mask = 0U;
  32              		.loc 1 490 3 view .LVU2
  33              		.loc 1 490 22 is_stmt 0 view .LVU3
  34 0000 0023     		movs	r3, #0
 491:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dma.isr_mask       = 0U;
  35              		.loc 1 491 22 view .LVU4
  36 0002 0122     		movs	r2, #1
 490:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dma.isr_mask       = 0U;
  37              		.loc 1 490 22 view .LVU5
  38 0004 0848     		ldr	r0, .L4
  39 0006 0949     		ldr	r1, .L4+4
 487:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   int i;
  40              		.loc 1 487 20 view .LVU6
  41 0008 10B5     		push	{r4, lr}
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 4, -8
  44              		.cfi_offset 14, -4
 490:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dma.isr_mask       = 0U;
  45              		.loc 1 490 22 view .LVU7
  46 000a 0360     		str	r3, [r0]
  47              		.loc 1 491 3 is_stmt 1 view .LVU8
  48              		.loc 1 491 22 is_stmt 0 view .LVU9
  49 000c 4360     		str	r3, [r0, #4]
 492:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   for (i = 0; i < STM32_DMA_STREAMS; i++) {
  50              		.loc 1 492 3 is_stmt 1 view .LVU10
  51              	.LVL0:
  52              	.L2:
 493:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
  53              		.loc 1 493 5 discriminator 3 view .LVU11
  54              		.loc 1 493 26 is_stmt 0 discriminator 3 view .LVU12
  55 000e 4C68     		ldr	r4, [r1, #4]
  56 0010 1031     		adds	r1, r1, #16
  57              		.loc 1 493 40 discriminator 3 view .LVU13
  58 0012 2360     		str	r3, [r4]
 494:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     dma.streams[i].func = NULL;
  59              		.loc 1 494 5 is_stmt 1 discriminator 3 view .LVU14
  60              		.loc 1 494 25 is_stmt 0 discriminator 3 view .LVU15
  61 0014 D400     		lsls	r4, r2, #3
  62 0016 0132     		adds	r2, r2, #1
  63              	.LVL1:
  64              		.loc 1 494 25 discriminator 3 view .LVU16
  65 0018 0351     		str	r3, [r0, r4]
  66              	.LVL2:
 492:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   for (i = 0; i < STM32_DMA_STREAMS; i++) {
  67              		.loc 1 492 3 discriminator 3 view .LVU17
  68 001a 082A     		cmp	r2, #8
  69 001c F7D1     		bne	.L2
 495:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 496:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   DMA1->IFCR = 0xFFFFFFFFU;
  70              		.loc 1 496 3 is_stmt 1 view .LVU18
  71              		.loc 1 496 14 is_stmt 0 view .LVU19
  72 001e 044B     		ldr	r3, .L4+8
  73 0020 093A     		subs	r2, r2, #9
  74 0022 5A60     		str	r2, [r3, #4]
 497:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA2_NUM_CHANNELS > 0
 498:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   DMA2->IFCR = 0xFFFFFFFFU;
 499:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 500:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
  75              		.loc 1 500 1 view .LVU20
  76              		@ sp needed
  77 0024 10BD     		pop	{r4, pc}
  78              	.L5:
  79 0026 C046     		.align	2
  80              	.L4:
  81 0028 00000000 		.word	.LANCHOR0
  82 002c 00000000 		.word	.LANCHOR1
  83 0030 00000240 		.word	1073872896
  84              		.cfi_endproc
  85              	.LFE187:
  87              		.section	.text.dmaStreamAllocI,"ax",%progbits
  88              		.align	1
  89              		.global	dmaStreamAllocI
  90              		.syntax unified
  91              		.code	16
  92              		.thumb_func
  93              		.fpu softvfp
  95              	dmaStreamAllocI:
  96              	.LVL3:
  97              	.LFB188:
 501:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 502:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 503:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   Allocates a DMA stream.
 504:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @details The stream is allocated and, if required, the DMA clock enabled.
 505:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          The function also enables the IRQ vector associated to the stream
 506:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          and initializes its priority.
 507:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 508:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] id        numeric identifiers of a specific stream or:
 509:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                      - @p STM32_DMA_STREAM_ID_ANY for any stream.
 510:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                      - @p STM32_DMA_STREAM_ID_ANY_DMA1 for any stream
 511:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                        on DMA1.
 512:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                      - @p STM32_DMA_STREAM_ID_ANY_DMA2 for any stream
 513:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                        on DMA2.
 514:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                      .
 515:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] priority  IRQ priority for the DMA stream
 516:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] func      handling function pointer, can be @p NULL
 517:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] param     a parameter to be passed to the handling function
 518:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @return              Pointer to the allocated @p stm32_dma_stream_t
 519:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                      structure.
 520:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @retval NULL         if a/the stream is not available.
 521:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 522:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @iclass
 523:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 524:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 525:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****                                           uint32_t priority,
 526:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****                                           stm32_dmaisr_t func,
 527:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****                                           void *param) {
  98              		.loc 1 527 56 is_stmt 1 view -0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 8
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 528:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   uint32_t i, startid, endid;
 102              		.loc 1 528 3 view .LVU22
 529:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 530:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   osalDbgCheckClassI();
 103              		.loc 1 530 23 view .LVU23
 531:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 532:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   if (id < STM32_DMA_STREAMS) {
 104              		.loc 1 532 3 view .LVU24
 527:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   uint32_t i, startid, endid;
 105              		.loc 1 527 56 is_stmt 0 view .LVU25
 106 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 107              		.cfi_def_cfa_offset 32
 108              		.cfi_offset 0, -32
 109              		.cfi_offset 1, -28
 110              		.cfi_offset 2, -24
 111              		.cfi_offset 4, -20
 112              		.cfi_offset 5, -16
 113              		.cfi_offset 6, -12
 114              		.cfi_offset 7, -8
 115              		.cfi_offset 14, -4
 533:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     startid = id;
 534:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     endid   = id;
 535:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 536:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA_SUPPORTS_DMAMUX == TRUE
 537:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   else if (id == STM32_DMA_STREAM_ID_ANY) {
 538:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     startid = 0U;
 539:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     endid   = STM32_DMA_STREAMS - 1U;
 540:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 541:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   else if (id == STM32_DMA_STREAM_ID_ANY_DMA1) {
 542:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     startid = 0U;
 543:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     endid   = STM32_DMA1_NUM_CHANNELS - 1U;
 544:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 545:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA2_NUM_CHANNELS > 0
 546:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   else if (id == STM32_DMA_STREAM_ID_ANY_DMA2) {
 547:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     startid = 7U;
 548:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     endid   = STM32_DMA_STREAMS - 1U;
 549:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 550:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 551:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 552:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   else {
 553:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     osalDbgCheck(false);
 554:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     return NULL;
 116              		.loc 1 554 12 view .LVU26
 117 0002 0024     		movs	r4, #0
 527:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   uint32_t i, startid, endid;
 118              		.loc 1 527 56 view .LVU27
 119 0004 0092     		str	r2, [sp]
 120 0006 0191     		str	r1, [sp, #4]
 121 0008 1A00     		movs	r2, r3
 122              	.LVL4:
 532:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     startid = id;
 123              		.loc 1 532 6 view .LVU28
 124 000a 0628     		cmp	r0, #6
 125 000c 34D8     		bhi	.L6
 126              	.LVL5:
 127              	.LBB56:
 128              	.LBB57:
 129              	.LBB58:
 555:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 556:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 557:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   for (i = startid; i <= endid; i++) {
 558:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     uint32_t mask = (1U << i);
 130              		.loc 1 558 5 is_stmt 1 view .LVU29
 131              		.loc 1 558 14 is_stmt 0 view .LVU30
 132 000e 0127     		movs	r7, #1
 133 0010 8740     		lsls	r7, r7, r0
 134              	.LVL6:
 559:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     if ((dma.allocated_mask & mask) == 0U) {
 135              		.loc 1 559 5 is_stmt 1 view .LVU31
 136              		.loc 1 559 13 is_stmt 0 view .LVU32
 137 0012 1A4B     		ldr	r3, .L15
 138              	.LVL7:
 139              		.loc 1 559 13 view .LVU33
 140 0014 1968     		ldr	r1, [r3]
 141              	.LVL8:
 142              		.loc 1 559 13 view .LVU34
 143 0016 8C46     		mov	ip, r1
 144              		.loc 1 559 8 view .LVU35
 145 0018 3942     		tst	r1, r7
 146 001a 2DD1     		bne	.L6
 147              	.LBB59:
 560:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 148              		.loc 1 560 7 is_stmt 1 view .LVU36
 561:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 562:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       /* Installs the DMA handler.*/
 563:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       dma.streams[i].func  = func;
 149              		.loc 1 563 28 is_stmt 0 view .LVU37
 150 001c 0099     		ldr	r1, [sp]
 560:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 151              		.loc 1 560 33 view .LVU38
 152 001e 0501     		lsls	r5, r0, #4
 153              		.loc 1 563 28 view .LVU39
 154 0020 0130     		adds	r0, r0, #1
 155              	.LVL9:
 156              		.loc 1 563 28 view .LVU40
 157 0022 C000     		lsls	r0, r0, #3
 158              	.LVL10:
 159              		.loc 1 563 28 view .LVU41
 160 0024 C150     		str	r1, [r0, r3]
 564:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       dma.streams[i].param = param;
 161              		.loc 1 564 28 view .LVU42
 162 0026 1818     		adds	r0, r3, r0
 163 0028 4260     		str	r2, [r0, #4]
 565:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       dma.allocated_mask  |= mask;
 164              		.loc 1 565 27 view .LVU43
 165 002a 6046     		mov	r0, ip
 566:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 567:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       /* Enabling DMA clocks required by the current streams set.*/
 568:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 569:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****         rccEnableDMA1(true);
 166              		.loc 1 569 9 view .LVU44
 167 002c 0122     		movs	r2, #1
 168              	.LVL11:
 565:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       dma.allocated_mask  |= mask;
 169              		.loc 1 565 27 view .LVU45
 170 002e 3843     		orrs	r0, r7
 171 0030 1860     		str	r0, [r3]
 172              		.loc 1 569 9 view .LVU46
 173 0032 1348     		ldr	r0, .L15+4
 560:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 174              		.loc 1 560 33 view .LVU47
 175 0034 134E     		ldr	r6, .L15+8
 176              		.loc 1 569 9 view .LVU48
 177 0036 4169     		ldr	r1, [r0, #20]
 560:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 178              		.loc 1 560 33 view .LVU49
 179 0038 7419     		adds	r4, r6, r5
 180              	.LVL12:
 563:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       dma.streams[i].param = param;
 181              		.loc 1 563 7 is_stmt 1 view .LVU50
 564:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       dma.allocated_mask  |= mask;
 182              		.loc 1 564 7 view .LVU51
 565:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 183              		.loc 1 565 7 view .LVU52
 568:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****         rccEnableDMA1(true);
 184              		.loc 1 568 7 view .LVU53
 185              		.loc 1 569 9 view .LVU54
 186 003a 1143     		orrs	r1, r2
 570:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       }
 571:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA2_NUM_CHANNELS > 0
 572:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 573:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****         rccEnableDMA2(true);
 574:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       }
 575:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 576:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 577:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if (STM32_DMA_SUPPORTS_DMAMUX == TRUE) && defined(rccEnableDMAMUX)
 578:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       /* Enabling DMAMUX if present.*/
 579:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       if (dma.allocated_mask != 0U) {
 580:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****         rccEnableDMAMUX(true);
 581:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       }
 582:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 583:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 584:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       /* Enables the associated IRQ vector if not already enabled and if a
 585:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****          callback is defined.*/
 586:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       if (func != NULL) {
 187              		.loc 1 586 10 is_stmt 0 view .LVU55
 188 003c 009A     		ldr	r2, [sp]
 569:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       }
 189              		.loc 1 569 9 view .LVU56
 190 003e 4161     		str	r1, [r0, #20]
 569:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       }
 191              		.loc 1 569 9 is_stmt 1 view .LVU57
 192 0040 4069     		ldr	r0, [r0, #20]
 569:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       }
 193              		.loc 1 569 28 view .LVU58
 194              		.loc 1 586 7 view .LVU59
 195              		.loc 1 586 10 is_stmt 0 view .LVU60
 196 0042 002A     		cmp	r2, #0
 197 0044 0BD0     		beq	.L8
 587:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****         if ((dma.isr_mask & dmastp->cmask) == 0U) {
 198              		.loc 1 587 9 is_stmt 1 view .LVU61
 199              		.loc 1 587 27 is_stmt 0 view .LVU62
 200 0046 5B68     		ldr	r3, [r3, #4]
 201              	.LVL13:
 202              		.loc 1 587 12 view .LVU63
 203 0048 A268     		ldr	r2, [r4, #8]
 204 004a 1A42     		tst	r2, r3
 205 004c 03D1     		bne	.L9
 588:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****           nvicEnableVector(dmastp->vector, priority);
 206              		.loc 1 588 11 is_stmt 1 view .LVU64
 207 004e E07B     		ldrb	r0, [r4, #15]
 208 0050 0199     		ldr	r1, [sp, #4]
 209 0052 FFF7FEFF 		bl	nvicEnableVector
 210              	.LVL14:
 211              	.L9:
 589:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****         }
 590:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****         dma.isr_mask |= mask;
 212              		.loc 1 590 9 view .LVU65
 213              		.loc 1 590 22 is_stmt 0 view .LVU66
 214 0056 094B     		ldr	r3, .L15
 215 0058 5A68     		ldr	r2, [r3, #4]
 216 005a 1743     		orrs	r7, r2
 217              	.LVL15:
 218              		.loc 1 590 22 view .LVU67
 219 005c 5F60     		str	r7, [r3, #4]
 220              	.L8:
 591:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       }
 592:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 593:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       /* Putting the stream in a known state.*/
 594:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       dmaStreamDisable(dmastp);
 221              		.loc 1 594 7 is_stmt 1 view .LVU68
 222 005e 0F20     		movs	r0, #15
 223 0060 7119     		adds	r1, r6, r5
 224 0062 4B68     		ldr	r3, [r1, #4]
 225 0064 497B     		ldrb	r1, [r1, #13]
 226 0066 1A68     		ldr	r2, [r3]
 227 0068 8243     		bics	r2, r0
 228 006a 1A60     		str	r2, [r3]
 229              		.loc 1 594 7 view .LVU69
 230 006c 0E22     		movs	r2, #14
 231 006e 8A40     		lsls	r2, r2, r1
 232 0070 7059     		ldr	r0, [r6, r5]
 233 0072 4260     		str	r2, [r0, #4]
 234              		.loc 1 594 7 view .LVU70
 235              		.loc 1 594 31 view .LVU71
 595:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 236              		.loc 1 595 7 view .LVU72
 237              		.loc 1 595 28 is_stmt 0 view .LVU73
 238 0074 0022     		movs	r2, #0
 239 0076 1A60     		str	r2, [r3]
 596:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 597:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       return dmastp;
 240              		.loc 1 597 7 is_stmt 1 view .LVU74
 241              	.LVL16:
 242              	.L6:
 243              		.loc 1 597 7 is_stmt 0 view .LVU75
 244              	.LBE59:
 245              	.LBE58:
 246              	.LBE57:
 247              	.LBE56:
 598:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     }
 599:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 600:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 601:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   return NULL;
 602:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 248              		.loc 1 602 1 view .LVU76
 249 0078 2000     		movs	r0, r4
 250              		@ sp needed
 251 007a FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 252              	.L16:
 253              		.align	2
 254              	.L15:
 255 007c 00000000 		.word	.LANCHOR0
 256 0080 00100240 		.word	1073876992
 257 0084 00000000 		.word	.LANCHOR1
 258              		.cfi_endproc
 259              	.LFE188:
 261              		.section	.text.dmaStreamAlloc,"ax",%progbits
 262              		.align	1
 263              		.global	dmaStreamAlloc
 264              		.syntax unified
 265              		.code	16
 266              		.thumb_func
 267              		.fpu softvfp
 269              	dmaStreamAlloc:
 270              	.LVL17:
 271              	.LFB189:
 603:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 604:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 605:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   Allocates a DMA stream.
 606:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @details The stream is allocated and, if required, the DMA clock enabled.
 607:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          The function also enables the IRQ vector associated to the stream
 608:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          and initializes its priority.
 609:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 610:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] id        numeric identifiers of a specific stream or:
 611:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                      - @p STM32_DMA_STREAM_ID_ANY for any stream.
 612:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                      - @p STM32_DMA_STREAM_ID_ANY_DMA1 for any stream
 613:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                        on DMA1.
 614:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                      - @p STM32_DMA_STREAM_ID_ANY_DMA2 for any stream
 615:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                        on DMA2.
 616:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                      .
 617:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] priority  IRQ priority for the DMA stream
 618:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] func      handling function pointer, can be @p NULL
 619:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] param     a parameter to be passed to the handling function
 620:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @return              Pointer to the allocated @p stm32_dma_stream_t
 621:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *                      structure.
 622:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @retval NULL         if a/the stream is not available.
 623:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 624:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @api
 625:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 626:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** const stm32_dma_stream_t *dmaStreamAlloc(uint32_t id,
 627:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****                                          uint32_t priority,
 628:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****                                          stm32_dmaisr_t func,
 629:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****                                          void *param) {
 272              		.loc 1 629 55 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 630:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   const stm32_dma_stream_t *dmastp;
 276              		.loc 1 630 3 view .LVU78
 631:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 632:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   osalSysLock();
 277              		.loc 1 632 3 view .LVU79
 278              	.LBB60:
 279              	.LBI60:
 280              		.file 2 "./lib/chibios/os/hal/osal/rt/osal.h"
   1:./lib/chibios/os/hal/osal/rt/osal.h **** /*
   2:./lib/chibios/os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:./lib/chibios/os/hal/osal/rt/osal.h **** 
   4:./lib/chibios/os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/osal/rt/osal.h **** 
   8:./lib/chibios/os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/osal/rt/osal.h **** 
  10:./lib/chibios/os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/osal/rt/osal.h ****     limitations under the License.
  15:./lib/chibios/os/hal/osal/rt/osal.h **** */
  16:./lib/chibios/os/hal/osal/rt/osal.h **** 
  17:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  18:./lib/chibios/os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:./lib/chibios/os/hal/osal/rt/osal.h ****  *
  21:./lib/chibios/os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  23:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  24:./lib/chibios/os/hal/osal/rt/osal.h **** 
  25:./lib/chibios/os/hal/osal/rt/osal.h **** #ifndef OSAL_H
  26:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_H
  27:./lib/chibios/os/hal/osal/rt/osal.h **** 
  28:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:./lib/chibios/os/hal/osal/rt/osal.h **** 
  32:./lib/chibios/os/hal/osal/rt/osal.h **** #include "ch.h"
  33:./lib/chibios/os/hal/osal/rt/osal.h **** 
  34:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/osal/rt/osal.h **** 
  38:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  39:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  41:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  42:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./lib/chibios/os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  45:./lib/chibios/os/hal/osal/rt/osal.h **** 
  46:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./lib/chibios/os/hal/osal/rt/osal.h **** #define TRUE                                1
  48:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  49:./lib/chibios/os/hal/osal/rt/osal.h **** 
  50:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        false
  51:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         true
  52:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  53:./lib/chibios/os/hal/osal/rt/osal.h **** 
  54:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  55:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  56:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Messages
  57:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  58:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  59:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_OK                              (msg_t)0
  60:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  63:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  64:./lib/chibios/os/hal/osal/rt/osal.h **** 
  65:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  66:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  67:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  69:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  70:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  73:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  74:./lib/chibios/os/hal/osal/rt/osal.h **** 
  75:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  76:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  78:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  79:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  83:./lib/chibios/os/hal/osal/rt/osal.h **** 
  84:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  85:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  87:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  88:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  89:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  91:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./lib/chibios/os/hal/osal/rt/osal.h **** 
  93:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  94:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  96:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./lib/chibios/os/hal/osal/rt/osal.h **** 
  98:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  99:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 101:./lib/chibios/os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 104:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 106:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 107:./lib/chibios/os/hal/osal/rt/osal.h **** 
 108:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/osal/rt/osal.h **** 
 112:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/osal/rt/osal.h **** 
 116:./lib/chibios/os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 121:./lib/chibios/os/hal/osal/rt/osal.h **** 
 122:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 125:./lib/chibios/os/hal/osal/rt/osal.h **** 
 126:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/osal/rt/osal.h **** 
 130:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 131:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 132:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 134:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 136:./lib/chibios/os/hal/osal/rt/osal.h **** 
 137:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 138:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 139:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 141:./lib/chibios/os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 143:./lib/chibios/os/hal/osal/rt/osal.h **** 
 144:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 145:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 146:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 148:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 150:./lib/chibios/os/hal/osal/rt/osal.h **** 
 151:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 152:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 153:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of system time interval.
 154:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 155:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t sysinterval_t;
 156:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 157:./lib/chibios/os/hal/osal/rt/osal.h **** 
 158:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 159:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 160:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 161:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 162:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 163:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 164:./lib/chibios/os/hal/osal/rt/osal.h **** 
 165:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 166:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 167:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 168:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 169:./lib/chibios/os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 170:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 171:./lib/chibios/os/hal/osal/rt/osal.h **** 
 172:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 173:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 174:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 175:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 176:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 177:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 178:./lib/chibios/os/hal/osal/rt/osal.h **** 
 179:./lib/chibios/os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 180:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 181:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 182:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 183:./lib/chibios/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 184:./lib/chibios/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 185:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 186:./lib/chibios/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 187:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 188:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct event_source event_source_t;
 189:./lib/chibios/os/hal/osal/rt/osal.h **** 
 190:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 191:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event source callback.
 192:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 193:./lib/chibios/os/hal/osal/rt/osal.h ****  *          exclusively as an example and for convenience.
 194:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 195:./lib/chibios/os/hal/osal/rt/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 196:./lib/chibios/os/hal/osal/rt/osal.h **** 
 197:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 198:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Events source object.
 199:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 200:./lib/chibios/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 201:./lib/chibios/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 202:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 203:./lib/chibios/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 204:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 205:./lib/chibios/os/hal/osal/rt/osal.h **** struct event_source {
 206:./lib/chibios/os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 207:./lib/chibios/os/hal/osal/rt/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 208:./lib/chibios/os/hal/osal/rt/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 209:./lib/chibios/os/hal/osal/rt/osal.h **** };
 210:./lib/chibios/os/hal/osal/rt/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 211:./lib/chibios/os/hal/osal/rt/osal.h **** 
 212:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 213:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 214:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 215:./lib/chibios/os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 216:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 217:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 218:./lib/chibios/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 219:./lib/chibios/os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 220:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 221:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 222:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 223:./lib/chibios/os/hal/osal/rt/osal.h **** 
 224:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 225:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 226:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 227:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 228:./lib/chibios/os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 229:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 230:./lib/chibios/os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 231:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 232:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 233:./lib/chibios/os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 234:./lib/chibios/os/hal/osal/rt/osal.h **** } threads_queue_t;
 235:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 236:./lib/chibios/os/hal/osal/rt/osal.h **** 
 237:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 238:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 239:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 240:./lib/chibios/os/hal/osal/rt/osal.h **** 
 241:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 242:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 243:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 244:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 245:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 246:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 247:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 248:./lib/chibios/os/hal/osal/rt/osal.h ****  *          message and halts.
 249:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 250:./lib/chibios/os/hal/osal/rt/osal.h ****  *          switch is enabled.
 251:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 252:./lib/chibios/os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 253:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 254:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 255:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 256:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 257:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 258:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 259:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 260:./lib/chibios/os/hal/osal/rt/osal.h **** 
 261:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 262:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 263:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 264:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 265:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is enabled.
 266:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 267:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 268:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 269:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 270:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 271:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 272:./lib/chibios/os/hal/osal/rt/osal.h **** 
 273:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 274:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 275:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 276:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 277:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 278:./lib/chibios/os/hal/osal/rt/osal.h **** 
 279:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 280:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 281:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 282:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 283:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 284:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 285:./lib/chibios/os/hal/osal/rt/osal.h **** 
 286:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 287:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 288:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 289:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 290:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 291:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 292:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 293:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 294:./lib/chibios/os/hal/osal/rt/osal.h **** 
 295:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 296:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 297:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 298:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 299:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 300:./lib/chibios/os/hal/osal/rt/osal.h **** 
 301:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 302:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 303:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 304:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 305:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 306:./lib/chibios/os/hal/osal/rt/osal.h **** 
 307:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 308:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 309:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 310:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 311:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 312:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 313:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 314:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 315:./lib/chibios/os/hal/osal/rt/osal.h **** 
 316:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 317:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 318:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 319:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 320:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 321:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 322:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 323:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 325:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] secs      number of seconds
 326:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 327:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 328:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 329:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 330:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 331:./lib/chibios/os/hal/osal/rt/osal.h **** 
 332:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 333:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 334:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 335:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 336:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 337:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msecs     number of milliseconds
 338:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 339:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 340:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 341:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 342:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 343:./lib/chibios/os/hal/osal/rt/osal.h **** 
 344:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 345:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 346:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 347:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 348:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 349:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usecs     number of microseconds
 350:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 351:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 352:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 353:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 354:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 355:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 356:./lib/chibios/os/hal/osal/rt/osal.h **** 
 357:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 358:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 359:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 360:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 361:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 362:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 363:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 364:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 365:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 366:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 367:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 368:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 369:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 370:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 371:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 372:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 373:./lib/chibios/os/hal/osal/rt/osal.h **** 
 374:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 375:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 376:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 377:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 378:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 379:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 380:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 381:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 382:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 383:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 384:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 385:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 386:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 387:./lib/chibios/os/hal/osal/rt/osal.h **** 
 388:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 389:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 390:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 391:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 392:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 393:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 394:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 395:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 396:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 397:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 398:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 399:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 400:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 401:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 402:./lib/chibios/os/hal/osal/rt/osal.h **** 
 403:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 404:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 405:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 406:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 407:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 408:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 409:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 410:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 411:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 412:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 413:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 414:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 415:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 416:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 417:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 418:./lib/chibios/os/hal/osal/rt/osal.h **** 
 419:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 420:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 421:./lib/chibios/os/hal/osal/rt/osal.h ****  *          milliseconds.
 422:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 423:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 424:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 425:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 426:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 427:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 428:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 429:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 430:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 431:./lib/chibios/os/hal/osal/rt/osal.h **** 
 432:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 433:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 434:./lib/chibios/os/hal/osal/rt/osal.h ****  *          microseconds.
 435:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 436:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 437:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 438:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 439:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 440:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 441:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 442:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 443:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 444:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 445:./lib/chibios/os/hal/osal/rt/osal.h **** 
 446:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 447:./lib/chibios/os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 448:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 449:./lib/chibios/os/hal/osal/rt/osal.h **** 
 450:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 451:./lib/chibios/os/hal/osal/rt/osal.h **** extern "C" {
 452:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 453:./lib/chibios/os/hal/osal/rt/osal.h **** 
 454:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 455:./lib/chibios/os/hal/osal/rt/osal.h **** }
 456:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 457:./lib/chibios/os/hal/osal/rt/osal.h **** 
 458:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 459:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 460:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 461:./lib/chibios/os/hal/osal/rt/osal.h **** 
 462:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 463:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 464:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 465:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 466:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 467:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 468:./lib/chibios/os/hal/osal/rt/osal.h **** 
 469:./lib/chibios/os/hal/osal/rt/osal.h **** }
 470:./lib/chibios/os/hal/osal/rt/osal.h **** 
 471:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 472:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 473:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 474:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 475:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 476:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 477:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 478:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 479:./lib/chibios/os/hal/osal/rt/osal.h **** 
 480:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 481:./lib/chibios/os/hal/osal/rt/osal.h **** }
 482:./lib/chibios/os/hal/osal/rt/osal.h **** 
 483:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 484:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 485:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 486:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 487:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 488:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 489:./lib/chibios/os/hal/osal/rt/osal.h **** 
 490:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysDisable();
 491:./lib/chibios/os/hal/osal/rt/osal.h **** }
 492:./lib/chibios/os/hal/osal/rt/osal.h **** 
 493:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 494:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 495:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 496:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 497:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 498:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 499:./lib/chibios/os/hal/osal/rt/osal.h **** 
 500:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysEnable();
 501:./lib/chibios/os/hal/osal/rt/osal.h **** }
 502:./lib/chibios/os/hal/osal/rt/osal.h **** 
 503:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 504:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 505:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 506:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 507:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 508:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 509:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 281              		.loc 2 509 20 view .LVU80
 282              	.LBE60:
 510:./lib/chibios/os/hal/osal/rt/osal.h **** 
 511:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLock();
 283              		.loc 2 511 3 view .LVU81
 284              	.LBB72:
 285              	.LBB61:
 286              	.LBI61:
 287              		.file 3 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  */
  66:./lib/chibios/os/rt/include/chsys.h **** /**
  67:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:./lib/chibios/os/rt/include/chsys.h ****  *
  71:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  73:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  75:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:./lib/chibios/os/rt/include/chsys.h ****  */
  77:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:./lib/chibios/os/rt/include/chsys.h **** #else
  81:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:./lib/chibios/os/rt/include/chsys.h **** #endif
  83:./lib/chibios/os/rt/include/chsys.h **** 
  84:./lib/chibios/os/rt/include/chsys.h **** /**
  85:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:./lib/chibios/os/rt/include/chsys.h ****  *
  89:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  91:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  93:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:./lib/chibios/os/rt/include/chsys.h ****  */
  95:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:./lib/chibios/os/rt/include/chsys.h **** #else
  99:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:./lib/chibios/os/rt/include/chsys.h **** #endif
 101:./lib/chibios/os/rt/include/chsys.h **** 
 102:./lib/chibios/os/rt/include/chsys.h **** /**
 103:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:./lib/chibios/os/rt/include/chsys.h ****  *
 107:./lib/chibios/os/rt/include/chsys.h ****  * @special
 108:./lib/chibios/os/rt/include/chsys.h ****  */
 109:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:./lib/chibios/os/rt/include/chsys.h **** 
 116:./lib/chibios/os/rt/include/chsys.h **** /**
 117:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:./lib/chibios/os/rt/include/chsys.h ****  *
 122:./lib/chibios/os/rt/include/chsys.h ****  * @special
 123:./lib/chibios/os/rt/include/chsys.h ****  */
 124:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:./lib/chibios/os/rt/include/chsys.h **** 
 130:./lib/chibios/os/rt/include/chsys.h **** /**
 131:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 134:./lib/chibios/os/rt/include/chsys.h ****  *
 135:./lib/chibios/os/rt/include/chsys.h ****  * @special
 136:./lib/chibios/os/rt/include/chsys.h ****  */
 137:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 139:./lib/chibios/os/rt/include/chsys.h **** 
 140:./lib/chibios/os/rt/include/chsys.h **** /**
 141:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:./lib/chibios/os/rt/include/chsys.h ****  */
 143:./lib/chibios/os/rt/include/chsys.h **** /**
 144:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:./lib/chibios/os/rt/include/chsys.h ****  *
 149:./lib/chibios/os/rt/include/chsys.h ****  * @special
 150:./lib/chibios/os/rt/include/chsys.h ****  */
 151:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 153:./lib/chibios/os/rt/include/chsys.h **** 
 154:./lib/chibios/os/rt/include/chsys.h **** /**
 155:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:./lib/chibios/os/rt/include/chsys.h ****  * @{
 157:./lib/chibios/os/rt/include/chsys.h ****  */
 158:./lib/chibios/os/rt/include/chsys.h **** /**
 159:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:./lib/chibios/os/rt/include/chsys.h ****  *
 163:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:./lib/chibios/os/rt/include/chsys.h ****  *
 167:./lib/chibios/os/rt/include/chsys.h ****  * @api
 168:./lib/chibios/os/rt/include/chsys.h ****  */
 169:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:./lib/chibios/os/rt/include/chsys.h **** 
 171:./lib/chibios/os/rt/include/chsys.h **** /**
 172:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:./lib/chibios/os/rt/include/chsys.h ****  *
 177:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:./lib/chibios/os/rt/include/chsys.h ****  *
 181:./lib/chibios/os/rt/include/chsys.h ****  * @api
 182:./lib/chibios/os/rt/include/chsys.h ****  */
 183:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:./lib/chibios/os/rt/include/chsys.h **** 
 185:./lib/chibios/os/rt/include/chsys.h **** /**
 186:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:./lib/chibios/os/rt/include/chsys.h ****  *
 191:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:./lib/chibios/os/rt/include/chsys.h ****  *
 195:./lib/chibios/os/rt/include/chsys.h ****  * @api
 196:./lib/chibios/os/rt/include/chsys.h ****  */
 197:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:./lib/chibios/os/rt/include/chsys.h **** 
 199:./lib/chibios/os/rt/include/chsys.h **** /**
 200:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:./lib/chibios/os/rt/include/chsys.h ****  *
 205:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:./lib/chibios/os/rt/include/chsys.h ****  *
 209:./lib/chibios/os/rt/include/chsys.h ****  * @api
 210:./lib/chibios/os/rt/include/chsys.h ****  */
 211:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:./lib/chibios/os/rt/include/chsys.h **** 
 213:./lib/chibios/os/rt/include/chsys.h **** /**
 214:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:./lib/chibios/os/rt/include/chsys.h ****  *
 219:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:./lib/chibios/os/rt/include/chsys.h ****  *
 223:./lib/chibios/os/rt/include/chsys.h ****  * @api
 224:./lib/chibios/os/rt/include/chsys.h ****  */
 225:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:./lib/chibios/os/rt/include/chsys.h **** 
 227:./lib/chibios/os/rt/include/chsys.h **** /**
 228:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:./lib/chibios/os/rt/include/chsys.h ****  *
 233:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:./lib/chibios/os/rt/include/chsys.h ****  *
 237:./lib/chibios/os/rt/include/chsys.h ****  * @api
 238:./lib/chibios/os/rt/include/chsys.h ****  */
 239:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 241:./lib/chibios/os/rt/include/chsys.h **** 
 242:./lib/chibios/os/rt/include/chsys.h **** /**
 243:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:./lib/chibios/os/rt/include/chsys.h ****  *
 247:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:./lib/chibios/os/rt/include/chsys.h ****  *
 250:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 251:./lib/chibios/os/rt/include/chsys.h ****  */
 252:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:./lib/chibios/os/rt/include/chsys.h **** #endif
 255:./lib/chibios/os/rt/include/chsys.h **** 
 256:./lib/chibios/os/rt/include/chsys.h **** /**
 257:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:./lib/chibios/os/rt/include/chsys.h ****  *
 261:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:./lib/chibios/os/rt/include/chsys.h ****  *
 264:./lib/chibios/os/rt/include/chsys.h ****  * @special
 265:./lib/chibios/os/rt/include/chsys.h ****  */
 266:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 268:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:./lib/chibios/os/rt/include/chsys.h **** }
 273:./lib/chibios/os/rt/include/chsys.h **** 
 274:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 275:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** 
 278:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:./lib/chibios/os/rt/include/chsys.h **** #endif
 281:./lib/chibios/os/rt/include/chsys.h **** 
 282:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 283:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 284:./lib/chibios/os/rt/include/chsys.h **** #endif
 285:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 286:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:./lib/chibios/os/rt/include/chsys.h **** #endif
 294:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 295:./lib/chibios/os/rt/include/chsys.h **** }
 296:./lib/chibios/os/rt/include/chsys.h **** #endif
 297:./lib/chibios/os/rt/include/chsys.h **** 
 298:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 299:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** 
 302:./lib/chibios/os/rt/include/chsys.h **** /**
 303:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:./lib/chibios/os/rt/include/chsys.h ****  *
 308:./lib/chibios/os/rt/include/chsys.h ****  * @special
 309:./lib/chibios/os/rt/include/chsys.h ****  */
 310:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:./lib/chibios/os/rt/include/chsys.h **** 
 312:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 313:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 314:./lib/chibios/os/rt/include/chsys.h **** }
 315:./lib/chibios/os/rt/include/chsys.h **** 
 316:./lib/chibios/os/rt/include/chsys.h **** /**
 317:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 321:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:./lib/chibios/os/rt/include/chsys.h ****  *
 325:./lib/chibios/os/rt/include/chsys.h ****  * @special
 326:./lib/chibios/os/rt/include/chsys.h ****  */
 327:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:./lib/chibios/os/rt/include/chsys.h **** 
 329:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 330:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:./lib/chibios/os/rt/include/chsys.h **** }
 332:./lib/chibios/os/rt/include/chsys.h **** 
 333:./lib/chibios/os/rt/include/chsys.h **** /**
 334:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:./lib/chibios/os/rt/include/chsys.h ****  *
 340:./lib/chibios/os/rt/include/chsys.h ****  * @special
 341:./lib/chibios/os/rt/include/chsys.h ****  */
 342:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:./lib/chibios/os/rt/include/chsys.h **** 
 344:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 345:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 346:./lib/chibios/os/rt/include/chsys.h **** }
 347:./lib/chibios/os/rt/include/chsys.h **** 
 348:./lib/chibios/os/rt/include/chsys.h **** /**
 349:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:./lib/chibios/os/rt/include/chsys.h ****  *
 351:./lib/chibios/os/rt/include/chsys.h ****  * @special
 352:./lib/chibios/os/rt/include/chsys.h ****  */
 353:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 288              		.loc 3 353 20 view .LVU82
 289              	.LBE61:
 290              	.LBE72:
 354:./lib/chibios/os/rt/include/chsys.h **** 
 355:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 291              		.loc 3 355 3 view .LVU83
 292              	.LBB73:
 293              	.LBB69:
 294              	.LBB62:
 295              	.LBI62:
 296              		.file 4 "./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @file    chcore_v6m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   ARMv6-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @addtogroup ARMCMx_V6M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifndef CHCORE_V6M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CHCORE_V6M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_SUPPORTS_RT                FALSE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WORKING_AREA_ALIGN         PORT_STACK_ALIGN
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /** @} */
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   PendSV priority level.
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    This priority is enforced to be equal to @p 0,
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          this handler always has the highest priority that cannot preempt
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          the kernel.
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_PRIORITY_PENDSV          0
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module pre-compile time settings.                                         */
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Stack size for the system idle thread.
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This size depends on the idle thread implementation, usually
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          the idle thread should take no more space than those reserved
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    In this port it is set to 16 because the idle thread does have
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          a stack frame when compiling without optimizations. You may
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          reduce this value to zero when compiling with optimizations.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE)
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This constant is used in the calculation of the correct working
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          area size.
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    In this port this value is conservatively set to 64 because the
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          with compiler optimizations disabled. The value can be reduced
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          when compiler optimizations are enabled.
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(PORT_INT_REQUIRED_STACK)
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INT_REQUIRED_STACK         64
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Alternate preemption method.
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details Activating this option will make the Kernel use the PendSV
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          handler for preemption instead of the NMI handler.
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifndef CORTEX_ALTERNATE_SWITCH
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_ALTERNATE_SWITCH         FALSE
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Derived constants and error checks.                                       */
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(CH_CUSTOMER_LIC_PORT_CM0)
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #error "CH_CUSTOMER_LIC_PORT_CM0 not defined"
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if CH_CUSTOMER_LIC_PORT_CM0 == FALSE
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #error "ChibiOS Cortex-M0 port not licensed"
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Handling a GCC problem impacting ARMv6-M.*/
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if defined(__GNUC__) && !defined(PORT_IGNORE_GCC_VERSION_CHECK)
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if __GNUC__ > 5
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #warning "This compiler has a know problem with Cortex-M0, see bugs: 88167, 88656."
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #warning "*** Use GCC version 5 or below ***"
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @name    Architecture and Compiler
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @{
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if ((CORTEX_MODEL == 0) && !defined(__CORE_CM0PLUS_H_DEPENDANT)) ||        \
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     defined(__DOXYGEN__)
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Macro defining the specific ARM architecture.
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_ARM_v6M
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Name of the implemented architecture.
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv6-M"
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Name of the architecture variant.
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_CORE_VARIANT_NAME          "Cortex-M0"
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif (CORTEX_MODEL == 0) && defined(__CORE_CM0PLUS_H_DEPENDANT)
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_ARM_v6M
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv6-M"
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_CORE_VARIANT_NAME          "Cortex-M0+"
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Port-specific information string.
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CORTEX_ALTERNATE_SWITCH == FALSE) || defined(__DOXYGEN__)
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INFO                       "Preemption through NMI"
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_INFO                       "Preemption through PendSV"
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /** @} */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Maximum usable priority for normal ISRs.
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CORTEX_ALTERNATE_SWITCH == TRUE) || defined(__DOXYGEN__)
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      1
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module data structures and types.                                         */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(_FROM_ASM_)
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  /* The documentation of the following declarations is in chconf.h in order
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     to not have duplicated structure names into the documentation.*/
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if !defined(__DOXYGEN__)
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** struct port_extctx {
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r0;
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r1;
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r2;
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r3;
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r12;
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      lr_thd;
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      pc;
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      xpsr;
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** };
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** struct port_intctx {
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r8;
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r9;
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r10;
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r11;
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r4;
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r5;
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r6;
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      r7;
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t      lr;
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** };
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif /* !defined(__DOXYGEN__) */
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module macros.                                                            */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This code usually setup the context switching frame represented
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          by an @p port_intctx structure.
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                                         sizeof (struct port_intctx));       \
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->r4 = (regarm_t)(pf);                                        \
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->r5 = (regarm_t)(arg);                                       \
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   (tp)->ctx.sp->lr = (regarm_t)_port_thread_start;                          \
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Computes the thread working area global size.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    There is no need to perform alignments in this macro.
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WA_SIZE(n) (sizeof (struct port_intctx) +                      \
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                          sizeof (struct port_extctx) +                      \
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Static working area allocation.
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro is used to allocate a static thread working area
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          aligned as both position and size.
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] s         the name to be assigned to the stack array
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] n         the stack size to be assigned to the thread
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ prologue code.
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          enabled to invoke system APIs.
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__builtin_return_address(0)
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif defined(__ICCARM__)
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__get_LR()
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #elif defined(__CC_ARM)
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_PROLOGUE()                                                 \
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   regarm_t _saved_lr = (regarm_t)__return_address()
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ epilogue code.
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          enabled to invoke system APIs.
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue(_saved_lr)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   IRQ handler function declaration.
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    @p id can be a function name or a vector number depending on the
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          port implementation.
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Fast IRQ handler function declaration.
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    @p id can be a function name or a vector number depending on the
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          port implementation.
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Performs a context switch between two threads.
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details This is the most critical code in any port, this function
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          is responsible for the context switch between 2 threads.
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *          switch performance so optimize here as much as you can.
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] ntp       the thread to be switched in
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] otp       the thread to be switched out
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #else
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #define port_switch(ntp, otp) {                                             \
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****     chSysHalt("stack overflow");                                            \
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   }                                                                         \
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   _port_switch(ntp, otp);                                                   \
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* External declarations.                                                    */
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** extern "C" {
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_irq_epilogue(regarm_t lr);
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_thread_start(void);
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_switch_from_isr(void);
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   void _port_exit_from_isr(void);
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #ifdef __cplusplus
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** #endif
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /* Module inline functions.                                                  */
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /*===========================================================================*/
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Port-related initialization code.
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_init(void) {
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Returns a word encoding the current interrupts status.
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The interrupts status.
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline syssts_t port_get_irq_status(void) {
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (syssts_t)__get_PRIMASK();
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Checks the interrupt status.
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @param[in] sts       the interrupt status word
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The interrupt status.
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval false        the word specified a disabled interrupts status.
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval true         the word specified an enabled interrupts status.
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline bool port_irq_enabled(syssts_t sts) {
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Determines the current execution context.
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  *
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @return              The execution context.
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval false        not running in ISR mode.
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @retval true         running in ISR mode.
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline bool port_is_isr_context(void) {
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-lock action.
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function disables interrupts globally.
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_lock(void) {
 297              		.loc 4 387 20 view .LVU84
 298              	.LBE62:
 299              	.LBE69:
 300              	.LBE73:
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __disable_irq();
 301              		.loc 4 389 3 view .LVU85
 302              	.LBB74:
 303              	.LBB70:
 304              	.LBB67:
 305              	.LBB63:
 306              	.LBI63:
 307              		.file 5 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 308              		.loc 5 140 27 view .LVU86
 309              	.LBB64:
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 310              		.loc 5 142 3 view .LVU87
 311              	.LBE64:
 312              	.LBE63:
 313              	.LBE67:
 314              	.LBE70:
 315              	.LBE74:
 629:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   const stm32_dma_stream_t *dmastp;
 316              		.loc 1 629 55 is_stmt 0 view .LVU88
 317 0000 10B5     		push	{r4, lr}
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 4, -8
 320              		.cfi_offset 14, -4
 321              	.LBB75:
 322              	.LBB71:
 323              	.LBB68:
 324              	.LBB66:
 325              	.LBB65:
 326              		.loc 5 142 3 view .LVU89
 327              		.syntax divided
 328              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 329 0002 72B6     		cpsid i
 330              	@ 0 "" 2
 331              		.thumb
 332              		.syntax unified
 333              	.LBE65:
 334              	.LBE66:
 335              	.LBE68:
 336              	.LBE71:
 337              	.LBE75:
 356:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 338              		.loc 3 356 34 is_stmt 1 view .LVU90
 357:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 339              		.loc 3 357 20 view .LVU91
 633:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmastp = dmaStreamAllocI(id, priority, func, param);
 340              		.loc 1 633 3 view .LVU92
 341              		.loc 1 633 12 is_stmt 0 view .LVU93
 342 0004 FFF7FEFF 		bl	dmaStreamAllocI
 343              	.LVL18:
 634:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   osalSysUnlock();
 344              		.loc 1 634 3 is_stmt 1 view .LVU94
 345              	.LBB76:
 346              	.LBI76:
 512:./lib/chibios/os/hal/osal/rt/osal.h **** }
 513:./lib/chibios/os/hal/osal/rt/osal.h **** 
 514:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 515:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 516:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 517:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 518:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 519:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 520:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 347              		.loc 2 520 20 view .LVU95
 348              	.LBE76:
 521:./lib/chibios/os/hal/osal/rt/osal.h **** 
 522:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlock();
 349              		.loc 2 522 3 view .LVU96
 350              	.LBB85:
 351              	.LBB77:
 352              	.LBI77:
 358:./lib/chibios/os/rt/include/chsys.h **** }
 359:./lib/chibios/os/rt/include/chsys.h **** 
 360:./lib/chibios/os/rt/include/chsys.h **** /**
 361:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:./lib/chibios/os/rt/include/chsys.h ****  *
 363:./lib/chibios/os/rt/include/chsys.h ****  * @special
 364:./lib/chibios/os/rt/include/chsys.h ****  */
 365:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 353              		.loc 3 365 20 view .LVU97
 354              	.LBB78:
 366:./lib/chibios/os/rt/include/chsys.h **** 
 367:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 355              		.loc 3 367 22 view .LVU98
 368:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 356              		.loc 3 368 33 view .LVU99
 369:./lib/chibios/os/rt/include/chsys.h **** 
 370:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 374:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 357              		.loc 3 374 3 view .LVU100
 358              		.loc 3 374 3 view .LVU101
 375:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 377:./lib/chibios/os/rt/include/chsys.h **** 
 378:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 359              		.loc 3 378 3 view .LVU102
 360              	.LBB79:
 361              	.LBI79:
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** /**
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @brief   Kernel-unlock action.
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  * @details In this port this function enables interrupts globally.
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****  */
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** static inline void port_unlock(void) {
 362              		.loc 4 396 20 view .LVU103
 363              	.LBE79:
 364              	.LBE78:
 365              	.LBE77:
 366              	.LBE85:
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h ****   __enable_irq();
 367              		.loc 4 398 3 view .LVU104
 368              	.LBB86:
 369              	.LBB84:
 370              	.LBB83:
 371              	.LBB82:
 372              	.LBB80:
 373              	.LBI80:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 374              		.loc 5 129 27 view .LVU105
 375              	.LBB81:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 376              		.loc 5 131 3 view .LVU106
 377              		.syntax divided
 378              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 379 0008 62B6     		cpsie i
 380              	@ 0 "" 2
 381              		.thumb
 382              		.syntax unified
 383              	.LBE81:
 384              	.LBE80:
 385              	.LBE82:
 386              	.LBE83:
 387              	.LBE84:
 388              	.LBE86:
 635:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 636:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   return dmastp;
 389              		.loc 1 636 3 view .LVU107
 637:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 390              		.loc 1 637 1 is_stmt 0 view .LVU108
 391              		@ sp needed
 392 000a 10BD     		pop	{r4, pc}
 393              		.cfi_endproc
 394              	.LFE189:
 396              		.section	.text.dmaStreamFreeI,"ax",%progbits
 397              		.align	1
 398              		.global	dmaStreamFreeI
 399              		.syntax unified
 400              		.code	16
 401              		.thumb_func
 402              		.fpu softvfp
 404              	dmaStreamFreeI:
 405              	.LVL19:
 406              	.LFB190:
 638:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 639:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 640:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   Releases a DMA stream.
 641:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @details The stream is freed and, if required, the DMA clock disabled.
 642:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          Trying to release a unallocated stream is an illegal operation
 643:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          and is trapped if assertions are enabled.
 644:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 645:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 646:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 647:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @iclass
 648:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 649:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** void dmaStreamFreeI(const stm32_dma_stream_t *dmastp) {
 407              		.loc 1 649 55 is_stmt 1 view -0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 650:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 651:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   osalDbgCheck(dmastp != NULL);
 411              		.loc 1 651 3 view .LVU110
 412              		.loc 1 651 3 view .LVU111
 652:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 653:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   /* Check if the streams is not taken.*/
 654:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   osalDbgAssert((dma.allocated_mask & (1 << dmastp->selfindex)) != 0U,
 413              		.loc 1 654 3 view .LVU112
 414              		.loc 1 654 3 view .LVU113
 655:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****                 "not allocated");
 656:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 657:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   /* Marks the stream as not allocated.*/
 658:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dma.allocated_mask &= ~(1U << dmastp->selfindex);
 415              		.loc 1 658 3 view .LVU114
 416              		.loc 1 658 30 is_stmt 0 view .LVU115
 417 0000 0123     		movs	r3, #1
 649:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 418              		.loc 1 649 55 view .LVU116
 419 0002 70B5     		push	{r4, r5, r6, lr}
 420              		.cfi_def_cfa_offset 16
 421              		.cfi_offset 4, -16
 422              		.cfi_offset 5, -12
 423              		.cfi_offset 6, -8
 424              		.cfi_offset 14, -4
 425              		.loc 1 658 39 view .LVU117
 426 0004 827B     		ldrb	r2, [r0, #14]
 427              		.loc 1 658 22 view .LVU118
 428 0006 104C     		ldr	r4, .L21
 429              		.loc 1 658 30 view .LVU119
 430 0008 9340     		lsls	r3, r3, r2
 431              		.loc 1 658 25 view .LVU120
 432 000a DB43     		mvns	r3, r3
 433              		.loc 1 658 22 view .LVU121
 434 000c 2268     		ldr	r2, [r4]
 659:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dma.isr_mask &= ~(1U << dmastp->selfindex);
 435              		.loc 1 659 16 view .LVU122
 436 000e 6168     		ldr	r1, [r4, #4]
 658:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dma.isr_mask &= ~(1U << dmastp->selfindex);
 437              		.loc 1 658 22 view .LVU123
 438 0010 1A40     		ands	r2, r3
 439              		.loc 1 659 16 view .LVU124
 440 0012 0B40     		ands	r3, r1
 441 0014 6360     		str	r3, [r4, #4]
 660:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 661:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   /* Disables the associated IRQ vector if it is no more in use.*/
 662:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   if ((dma.allocated_mask & dmastp->cmask) == 0U) {
 442              		.loc 1 662 6 view .LVU125
 443 0016 8368     		ldr	r3, [r0, #8]
 649:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 444              		.loc 1 649 55 view .LVU126
 445 0018 0500     		movs	r5, r0
 658:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dma.isr_mask &= ~(1U << dmastp->selfindex);
 446              		.loc 1 658 22 view .LVU127
 447 001a 2260     		str	r2, [r4]
 659:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 448              		.loc 1 659 3 is_stmt 1 view .LVU128
 449              		.loc 1 662 3 view .LVU129
 450              		.loc 1 662 6 is_stmt 0 view .LVU130
 451 001c 1342     		tst	r3, r2
 452 001e 02D1     		bne	.L19
 663:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     nvicDisableVector(dmastp->vector);
 453              		.loc 1 663 5 is_stmt 1 view .LVU131
 454 0020 C07B     		ldrb	r0, [r0, #15]
 455              	.LVL20:
 456              		.loc 1 663 5 is_stmt 0 view .LVU132
 457 0022 FFF7FEFF 		bl	nvicDisableVector
 458              	.LVL21:
 459              	.L19:
 664:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 665:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 666:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   /* Removes the DMA handler.*/
 667:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dma.streams[dmastp->selfindex].func  = NULL;
 460              		.loc 1 667 3 is_stmt 1 view .LVU133
 461              		.loc 1 667 40 is_stmt 0 view .LVU134
 462 0026 0022     		movs	r2, #0
 463              		.loc 1 667 21 view .LVU135
 464 0028 AB7B     		ldrb	r3, [r5, #14]
 465              		.loc 1 667 40 view .LVU136
 466 002a 0133     		adds	r3, r3, #1
 467 002c DB00     		lsls	r3, r3, #3
 468 002e E250     		str	r2, [r4, r3]
 668:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dma.streams[dmastp->selfindex].param = NULL;
 469              		.loc 1 668 3 is_stmt 1 view .LVU137
 470              		.loc 1 668 40 is_stmt 0 view .LVU138
 471 0030 E318     		adds	r3, r4, r3
 472 0032 5A60     		str	r2, [r3, #4]
 669:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 670:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   /* Shutting down clocks that are no more required, if any.*/
 671:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 473              		.loc 1 671 3 is_stmt 1 view .LVU139
 474              		.loc 1 671 27 is_stmt 0 view .LVU140
 475 0034 2368     		ldr	r3, [r4]
 476              		.loc 1 671 6 view .LVU141
 477 0036 5B06     		lsls	r3, r3, #25
 478 0038 05D1     		bne	.L18
 479              	.LBB89:
 480              	.LBI89:
 649:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 481              		.loc 1 649 6 is_stmt 1 view .LVU142
 482              	.LVL22:
 483              	.LBB90:
 672:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     rccDisableDMA1();
 484              		.loc 1 672 5 view .LVU143
 485 003a 0121     		movs	r1, #1
 486 003c 034B     		ldr	r3, .L21+4
 487 003e 5A69     		ldr	r2, [r3, #20]
 488 0040 8A43     		bics	r2, r1
 489 0042 5A61     		str	r2, [r3, #20]
 490              		.loc 1 672 5 view .LVU144
 491 0044 5B69     		ldr	r3, [r3, #20]
 492              		.loc 1 672 21 view .LVU145
 493              	.LBE90:
 494              	.LBE89:
 495              		.loc 1 672 21 view .LVU146
 496              	.LVL23:
 497              	.L18:
 673:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 674:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if STM32_DMA2_NUM_CHANNELS > 0
 675:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   if ((dma.allocated_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 676:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     rccDisableDMA2();
 677:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 678:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 679:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 680:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #if (STM32_DMA_SUPPORTS_DMAMUX == TRUE) && defined(rccDisableDMAMUX)
 681:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   /* Shutting down DMAMUX if present.*/
 682:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   if (dma.allocated_mask == 0U) {
 683:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     rccDisableDMAMUX();
 684:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 685:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 686:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 498              		.loc 1 686 1 is_stmt 0 view .LVU147
 499              		@ sp needed
 500              	.LVL24:
 501              		.loc 1 686 1 view .LVU148
 502 0046 70BD     		pop	{r4, r5, r6, pc}
 503              	.L22:
 504              		.align	2
 505              	.L21:
 506 0048 00000000 		.word	.LANCHOR0
 507 004c 00100240 		.word	1073876992
 508              		.cfi_endproc
 509              	.LFE190:
 511              		.section	.text.dmaStreamFree,"ax",%progbits
 512              		.align	1
 513              		.global	dmaStreamFree
 514              		.syntax unified
 515              		.code	16
 516              		.thumb_func
 517              		.fpu softvfp
 519              	dmaStreamFree:
 520              	.LVL25:
 521              	.LFB191:
 687:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 688:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 689:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   Releases a DMA stream.
 690:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @details The stream is freed and, if required, the DMA clock disabled.
 691:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          Trying to release a unallocated stream is an illegal operation
 692:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *          and is trapped if assertions are enabled.
 693:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 694:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 695:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 696:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @api
 697:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 698:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** void dmaStreamFree(const stm32_dma_stream_t *dmastp) {
 522              		.loc 1 698 54 is_stmt 1 view -0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 699:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 700:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   osalSysLock();
 526              		.loc 1 700 3 view .LVU150
 527              	.LBB91:
 528              	.LBI91:
 509:./lib/chibios/os/hal/osal/rt/osal.h **** 
 529              		.loc 2 509 20 view .LVU151
 530              	.LBE91:
 511:./lib/chibios/os/hal/osal/rt/osal.h **** }
 531              		.loc 2 511 3 view .LVU152
 532              	.LBB103:
 533              	.LBB92:
 534              	.LBI92:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 535              		.loc 3 353 20 view .LVU153
 536              	.LBE92:
 537              	.LBE103:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 538              		.loc 3 355 3 view .LVU154
 539              	.LBB104:
 540              	.LBB100:
 541              	.LBB93:
 542              	.LBI93:
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 543              		.loc 4 387 20 view .LVU155
 544              	.LBE93:
 545              	.LBE100:
 546              	.LBE104:
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** }
 547              		.loc 4 389 3 view .LVU156
 548              	.LBB105:
 549              	.LBB101:
 550              	.LBB98:
 551              	.LBB94:
 552              	.LBI94:
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 553              		.loc 5 140 27 view .LVU157
 554              	.LBB95:
 555              		.loc 5 142 3 view .LVU158
 556              	.LBE95:
 557              	.LBE94:
 558              	.LBE98:
 559              	.LBE101:
 560              	.LBE105:
 698:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 561              		.loc 1 698 54 is_stmt 0 view .LVU159
 562 0000 10B5     		push	{r4, lr}
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 4, -8
 565              		.cfi_offset 14, -4
 566              	.LBB106:
 567              	.LBB102:
 568              	.LBB99:
 569              	.LBB97:
 570              	.LBB96:
 571              		.loc 5 142 3 view .LVU160
 572              		.syntax divided
 573              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 574 0002 72B6     		cpsid i
 575              	@ 0 "" 2
 576              		.thumb
 577              		.syntax unified
 578              	.LBE96:
 579              	.LBE97:
 580              	.LBE99:
 581              	.LBE102:
 582              	.LBE106:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 583              		.loc 3 356 34 is_stmt 1 view .LVU161
 357:./lib/chibios/os/rt/include/chsys.h **** }
 584              		.loc 3 357 20 view .LVU162
 701:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   dmaStreamFreeI(dmastp);
 585              		.loc 1 701 3 view .LVU163
 586 0004 FFF7FEFF 		bl	dmaStreamFreeI
 587              	.LVL26:
 702:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   osalSysUnlock();
 588              		.loc 1 702 3 view .LVU164
 589              	.LBB107:
 590              	.LBI107:
 520:./lib/chibios/os/hal/osal/rt/osal.h **** 
 591              		.loc 2 520 20 view .LVU165
 592              	.LBE107:
 593              		.loc 2 522 3 view .LVU166
 594              	.LBB116:
 595              	.LBB108:
 596              	.LBI108:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 597              		.loc 3 365 20 view .LVU167
 598              	.LBB109:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 599              		.loc 3 367 22 view .LVU168
 368:./lib/chibios/os/rt/include/chsys.h **** 
 600              		.loc 3 368 33 view .LVU169
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 601              		.loc 3 374 3 view .LVU170
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 602              		.loc 3 374 3 view .LVU171
 603              		.loc 3 378 3 view .LVU172
 604              	.LBB110:
 605              	.LBI110:
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h **** 
 606              		.loc 4 396 20 view .LVU173
 607              	.LBE110:
 608              	.LBE109:
 609              	.LBE108:
 610              	.LBE116:
 611              		.loc 4 398 3 view .LVU174
 612              	.LBB117:
 613              	.LBB115:
 614              	.LBB114:
 615              	.LBB113:
 616              	.LBB111:
 617              	.LBI111:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 618              		.loc 5 129 27 view .LVU175
 619              	.LBB112:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 620              		.loc 5 131 3 view .LVU176
 621              		.syntax divided
 622              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 623 0008 62B6     		cpsie i
 624              	@ 0 "" 2
 625              		.thumb
 626              		.syntax unified
 627              	.LBE112:
 628              	.LBE111:
 629              	.LBE113:
 630              	.LBE114:
 631              	.LBE115:
 632              	.LBE117:
 703:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 633              		.loc 1 703 1 is_stmt 0 view .LVU177
 634              		@ sp needed
 635 000a 10BD     		pop	{r4, pc}
 636              		.cfi_endproc
 637              	.LFE191:
 639              		.section	.text.dmaServeInterrupt,"ax",%progbits
 640              		.align	1
 641              		.global	dmaServeInterrupt
 642              		.syntax unified
 643              		.code	16
 644              		.thumb_func
 645              		.fpu softvfp
 647              	dmaServeInterrupt:
 648              	.LVL27:
 649              	.LFB192:
 704:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 705:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** /**
 706:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @brief   Serves a DMA IRQ.
 707:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 708:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 709:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  *
 710:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  * @special
 711:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****  */
 712:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
 650              		.loc 1 712 58 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 713:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   uint32_t flags;
 654              		.loc 1 713 3 view .LVU179
 714:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   uint32_t idx = (dmastp)->selfindex;
 655              		.loc 1 714 3 view .LVU180
 715:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 716:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 656              		.loc 1 716 3 view .LVU181
 712:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   uint32_t flags;
 657              		.loc 1 712 58 is_stmt 0 view .LVU182
 658 0000 10B5     		push	{r4, lr}
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 4, -8
 661              		.cfi_offset 14, -4
 662              		.loc 1 716 18 view .LVU183
 663 0002 0268     		ldr	r2, [r0]
 664              		.loc 1 716 38 view .LVU184
 665 0004 447B     		ldrb	r4, [r0, #13]
 666              		.loc 1 716 23 view .LVU185
 667 0006 1168     		ldr	r1, [r2]
 668              		.loc 1 716 9 view .LVU186
 669 0008 0E23     		movs	r3, #14
 670              		.loc 1 716 29 view .LVU187
 671 000a E140     		lsrs	r1, r1, r4
 672              		.loc 1 716 9 view .LVU188
 673 000c 1940     		ands	r1, r3
 674              	.LVL28:
 717:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   if (flags & dmastp->channel->CCR) {
 675              		.loc 1 717 3 is_stmt 1 view .LVU189
 676              		.loc 1 717 21 is_stmt 0 view .LVU190
 677 000e 4368     		ldr	r3, [r0, #4]
 678              		.loc 1 717 30 view .LVU191
 679 0010 1B68     		ldr	r3, [r3]
 680              		.loc 1 717 6 view .LVU192
 681 0012 1942     		tst	r1, r3
 682 0014 0CD0     		beq	.L24
 714:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 683              		.loc 1 714 12 view .LVU193
 684 0016 837B     		ldrb	r3, [r0, #14]
 718:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     dmastp->dma->IFCR = flags << dmastp->shift;
 685              		.loc 1 718 5 is_stmt 1 view .LVU194
 686              		.loc 1 718 31 is_stmt 0 view .LVU195
 687 0018 0800     		movs	r0, r1
 688              	.LVL29:
 689              		.loc 1 718 31 view .LVU196
 690 001a A040     		lsls	r0, r0, r4
 719:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     if (dma.streams[idx].func) {
 691              		.loc 1 719 25 view .LVU197
 692 001c 0133     		adds	r3, r3, #1
 718:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     dmastp->dma->IFCR = flags << dmastp->shift;
 693              		.loc 1 718 23 view .LVU198
 694 001e 5060     		str	r0, [r2, #4]
 695              	.LVL30:
 696              		.loc 1 719 5 is_stmt 1 view .LVU199
 697              		.loc 1 719 25 is_stmt 0 view .LVU200
 698 0020 044A     		ldr	r2, .L31
 699 0022 DB00     		lsls	r3, r3, #3
 700 0024 9C58     		ldr	r4, [r3, r2]
 701              		.loc 1 719 8 view .LVU201
 702 0026 002C     		cmp	r4, #0
 703 0028 02D0     		beq	.L24
 720:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****       dma.streams[idx].func(dma.streams[idx].param, flags);
 704              		.loc 1 720 7 is_stmt 1 view .LVU202
 705 002a D318     		adds	r3, r2, r3
 706 002c 5868     		ldr	r0, [r3, #4]
 707 002e A047     		blx	r4
 708              	.LVL31:
 709              	.L24:
 721:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****     }
 722:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c ****   }
 723:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 710              		.loc 1 723 1 is_stmt 0 view .LVU203
 711              		@ sp needed
 712 0030 10BD     		pop	{r4, pc}
 713              	.L32:
 714 0032 C046     		.align	2
 715              	.L31:
 716 0034 00000000 		.word	.LANCHOR0
 717              		.cfi_endproc
 718              	.LFE192:
 720              		.section	.text.Vector64,"ax",%progbits
 721              		.align	1
 722              		.global	Vector64
 723              		.syntax unified
 724              		.code	16
 725              		.thumb_func
 726              		.fpu softvfp
 728              	Vector64:
 729              	.LFB186:
 260:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 730              		.loc 1 260 42 is_stmt 1 view -0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 262:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 734              		.loc 1 262 3 view .LVU205
 735              	.LVL32:
 262:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 736              		.loc 1 262 3 view .LVU206
 262:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 737              		.loc 1 262 3 view .LVU207
 262:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 738              		.loc 1 262 3 view .LVU208
 262:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 739              		.loc 1 262 3 view .LVU209
 262:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 740              		.loc 1 262 22 view .LVU210
 264:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 741              		.loc 1 264 3 view .LVU211
 260:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 742              		.loc 1 260 42 is_stmt 0 view .LVU212
 743 0000 10B5     		push	{r4, lr}
 744              		.cfi_def_cfa_offset 8
 745              		.cfi_offset 4, -8
 746              		.cfi_offset 14, -4
 747 0002 7446     		mov	r4, lr
 264:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** 
 748              		.loc 1 264 3 view .LVU213
 749 0004 0348     		ldr	r0, .L34
 750 0006 FFF7FEFF 		bl	dmaServeInterrupt
 751              	.LVL33:
 266:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 752              		.loc 1 266 3 is_stmt 1 view .LVU214
 266:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 753              		.loc 1 266 3 view .LVU215
 266:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 754              		.loc 1 266 3 view .LVU216
 266:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 755              		.loc 1 266 3 view .LVU217
 266:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** }
 756              		.loc 1 266 3 view .LVU218
 757 000a 2000     		movs	r0, r4
 758 000c FFF7FEFF 		bl	_port_irq_epilogue
 759              	.LVL34:
 267:lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.c **** #endif
 760              		.loc 1 267 1 is_stmt 0 view .LVU219
 761              		@ sp needed
 762 0010 10BD     		pop	{r4, pc}
 763              	.L35:
 764 0012 C046     		.align	2
 765              	.L34:
 766 0014 00000000 		.word	.LANCHOR1
 767              		.cfi_endproc
 768              	.LFE186:
 770              		.global	_stm32_dma_streams
 771              		.section	.bss.dma,"aw",%nobits
 772              		.align	2
 773              		.set	.LANCHOR0,. + 0
 776              	dma:
 777 0000 00000000 		.space	64
 777      00000000 
 777      00000000 
 777      00000000 
 777      00000000 
 778              		.section	.rodata._stm32_dma_streams,"a"
 779              		.align	2
 780              		.set	.LANCHOR1,. + 0
 783              	_stm32_dma_streams:
 784 0000 00000240 		.word	1073872896
 785 0004 08000240 		.word	1073872904
 786 0008 01000000 		.word	1
 787 000c 00       		.byte	0
 788 000d 00       		.byte	0
 789 000e 00       		.byte	0
 790 000f 09       		.byte	9
 791 0010 00000240 		.word	1073872896
 792 0014 1C000240 		.word	1073872924
 793 0018 06000000 		.word	6
 794 001c 00       		.byte	0
 795 001d 04       		.byte	4
 796 001e 01       		.byte	1
 797 001f 0A       		.byte	10
 798 0020 00000240 		.word	1073872896
 799 0024 30000240 		.word	1073872944
 800 0028 06000000 		.word	6
 801 002c 00       		.byte	0
 802 002d 08       		.byte	8
 803 002e 02       		.byte	2
 804 002f 0A       		.byte	10
 805 0030 00000240 		.word	1073872896
 806 0034 44000240 		.word	1073872964
 807 0038 78000000 		.word	120
 808 003c 00       		.byte	0
 809 003d 0C       		.byte	12
 810 003e 03       		.byte	3
 811 003f 0B       		.byte	11
 812 0040 00000240 		.word	1073872896
 813 0044 58000240 		.word	1073872984
 814 0048 78000000 		.word	120
 815 004c 00       		.byte	0
 816 004d 10       		.byte	16
 817 004e 04       		.byte	4
 818 004f 0B       		.byte	11
 819 0050 00000240 		.word	1073872896
 820 0054 6C000240 		.word	1073873004
 821 0058 78000000 		.word	120
 822 005c 00       		.byte	0
 823 005d 14       		.byte	20
 824 005e 05       		.byte	5
 825 005f 0B       		.byte	11
 826 0060 00000240 		.word	1073872896
 827 0064 80000240 		.word	1073873024
 828 0068 78000000 		.word	120
 829 006c 00       		.byte	0
 830 006d 18       		.byte	24
 831 006e 06       		.byte	6
 832 006f 0B       		.byte	11
 833              		.text
 834              	.Letext0:
 835              		.file 6 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\lib\\gcc\\arm-none-eabi\\8.3.1\\in
 836              		.file 7 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_
 837              		.file 8 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdi
 838              		.file 9 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\stdint.h"
 839              		.file 10 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 840              		.file 11 "./lib/chibios/os/rt/include/chsystypes.h"
 841              		.file 12 "./lib/chibios/os/rt/include/chschd.h"
 842              		.file 13 "./lib/chibios/os/rt/include/chtime.h"
 843              		.file 14 "./lib/chibios/os/common/ext/ST/STM32F0xx/system_stm32f0xx.h"
 844              		.file 15 "./lib/chibios/os/common/ext/ST/STM32F0xx/stm32f072xb.h"
 845              		.file 16 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 846              		.file 17 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 847              		.file 18 "./lib/chibios/os/rt/include/chsem.h"
 848              		.file 19 "./lib/chibios/os/rt/include/chmtx.h"
 849              		.file 20 "./lib/chibios/os/rt/include/chregistry.h"
 850              		.file 21 "./lib/chibios/os/oslib/include/chmemcore.h"
 851              		.file 22 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 852              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/stm32_gpio.h"
 853              		.file 24 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 854              		.file 25 "./lib/chibios/os/hal/include/hal_i2c.h"
 855              		.file 26 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 856              		.file 27 "./lib/chibios/os/hal/include/hal_pwm.h"
 857              		.file 28 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 858              		.file 29 "./lib/chibios/os/hal/include/hal_spi.h"
 859              		.file 30 "./lib/chibios/os/hal/ports/STM32/LLD/SPIv2/hal_spi_lld.h"
 860              		.file 31 "./lib/chibios/os/hal/include/hal_usb.h"
 861              		.file 32 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 862              		.file 33 "./lib/chibios/os/hal/ports/common/ARMCMx/nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32_dma.c
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:16     .text.dmaInit:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:24     .text.dmaInit:00000000 dmaInit
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:81     .text.dmaInit:00000028 $d
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:88     .text.dmaStreamAllocI:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:95     .text.dmaStreamAllocI:00000000 dmaStreamAllocI
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:255    .text.dmaStreamAllocI:0000007c $d
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:262    .text.dmaStreamAlloc:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:269    .text.dmaStreamAlloc:00000000 dmaStreamAlloc
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:397    .text.dmaStreamFreeI:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:404    .text.dmaStreamFreeI:00000000 dmaStreamFreeI
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:506    .text.dmaStreamFreeI:00000048 $d
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:512    .text.dmaStreamFree:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:519    .text.dmaStreamFree:00000000 dmaStreamFree
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:640    .text.dmaServeInterrupt:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:647    .text.dmaServeInterrupt:00000000 dmaServeInterrupt
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:716    .text.dmaServeInterrupt:00000034 $d
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:721    .text.Vector64:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:728    .text.Vector64:00000000 Vector64
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:766    .text.Vector64:00000014 $d
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:783    .rodata._stm32_dma_streams:00000000 _stm32_dma_streams
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:772    .bss.dma:00000000 $d
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:776    .bss.dma:00000000 dma
C:\Users\kyleo\AppData\Local\Temp\ccekb90z.s:779    .rodata._stm32_dma_streams:00000000 $d

UNDEFINED SYMBOLS
nvicEnableVector
nvicDisableVector
_port_irq_epilogue
