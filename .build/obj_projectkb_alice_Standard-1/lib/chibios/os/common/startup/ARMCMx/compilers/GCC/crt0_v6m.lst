   1              	# 1 "lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S"
   1              	/*
   0              	
   0              	
   1              	/* Address for jumping to bootloader on STM32 chips. */
   1              	/*
   2              	Copyright 2015 Jun Wako <wakojun@gmail.com>
   3              	
   4              	This program is free software: you can redistribute it and/or modify
   5              	it under the terms of the GNU General Public License as published by
   6              	the Free Software Foundation, either version 2 of the License, or
   7              	(at your option) any later version.
   8              	
   9              	This program is distributed in the hope that it will be useful,
  10              	but WITHOUT ANY WARRANTY; without even the implied warranty of
  11              	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12              	GNU General Public License for more details.
  13              	
  14              	You should have received a copy of the GNU General Public License
  15              	along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16              	*/
  17              	
  18              	#pragma once
  19              	
   1              	#if defined(RGBLED_SPLIT) && !defined(RGBLIGHT_SPLIT)
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3              	
   4              	    Licensed under the Apache License, Version 2.0 (the "License");
   5              	    you may not use this file except in compliance with the License.
   6              	    You may obtain a copy of the License at
   7              	
   8              	        http://www.apache.org/licenses/LICENSE-2.0
   9              	
  10              	    Unless required by applicable law or agreed to in writing, software
  11              	    distributed under the License is distributed on an "AS IS" BASIS,
  12              	    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13              	    See the License for the specific language governing permissions and
  14              	    limitations under the License.
  15              	*/
  16              	
  17              	/**
  18              	 * @file    crt0_v6m.S
  19              	 * @brief   Generic ARMv6-M (Cortex-M0/M1) startup file for ChibiOS.
  20              	 *
  21              	 * @addtogroup ARMCMx_GCC_STARTUP_V6M
  22              	 * @{
  23              	 */
  24              	
  25              	/*===========================================================================*/
  26              	/* Module constants.                                                         */
  27              	/*===========================================================================*/
  28              	
  29              	#if !defined(FALSE) || defined(__DOXYGEN__)
  30              	#define FALSE                               0
  31              	#endif
  32              	
  33              	#if !defined(TRUE) || defined(__DOXYGEN__)
  34              	#define TRUE                                1
  35              	#endif
  36              	
  37              	#define CONTROL_MODE_PRIVILEGED             0
  38              	#define CONTROL_MODE_UNPRIVILEGED           1
  39              	#define CONTROL_USE_MSP                     0
  40              	#define CONTROL_USE_PSP                     2
  41              	
  42              	#define SCB_VTOR                            0xE000ED08
  43              	
  44              	/*===========================================================================*/
  45              	/* Module pre-compile time settings.                                         */
  46              	/*===========================================================================*/
  47              	
  48              	/**
  49              	 * @brief   Enforces initialization of MSP.
  50              	 * @note    This is required if the boot process is not reliable for whatever
  51              	 *          reason (bad ROMs, bad bootloaders, bad debuggers=.
  52              	 */
  53              	#if !defined(CRT0_FORCE_MSP_INIT) || defined(__DOXYGEN__)
  54              	#define CRT0_FORCE_MSP_INIT                 TRUE
  55              	#endif
  56              	
  57              	/**
  58              	 * @brief   VTOR special register initialization.
  59              	 * @details VTOR is initialized to point to the vectors table.
  60              	 * @note    This option can only be enabled on Cortex-M0+ cores.
  61              	 */
  62              	#if !defined(CRT0_VTOR_INIT) || defined(__DOXYGEN__)
  63              	#define CRT0_VTOR_INIT                      FALSE
  64              	#endif
  65              	
  66              	/**
  67              	 * @brief   Control special register initialization value.
  68              	 * @details The system is setup to run in privileged mode using the PSP
  69              	 *          stack (dual stack mode).
  70              	 */
  71              	#if !defined(CRT0_CONTROL_INIT) || defined(__DOXYGEN__)
  72              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  73              	                                             CONTROL_MODE_PRIVILEGED)
  74              	#endif
  75              	
  76              	/**
  77              	 * @brief   Core initialization switch.
  78              	 */
  79              	#if !defined(CRT0_INIT_CORE) || defined(__DOXYGEN__)
  80              	#define CRT0_INIT_CORE                      TRUE
  81              	#endif
  82              	
  83              	/**
  84              	 * @brief   Stack segments initialization switch.
  85              	 */
  86              	#if !defined(CRT0_STACKS_FILL_PATTERN) || defined(__DOXYGEN__)
  87              	#define CRT0_STACKS_FILL_PATTERN            0x55555555
  88              	#endif
  89              	
  90              	/**
  91              	 * @brief   Stack segments initialization switch.
  92              	 */
  93              	#if !defined(CRT0_INIT_STACKS) || defined(__DOXYGEN__)
  94              	#define CRT0_INIT_STACKS                    TRUE
  95              	#endif
  96              	
  97              	/**
  98              	 * @brief   DATA segment initialization switch.
  99              	 */
 100              	#if !defined(CRT0_INIT_DATA) || defined(__DOXYGEN__)
 101              	#define CRT0_INIT_DATA                      TRUE
 102              	#endif
 103              	
 104              	/**
 105              	 * @brief   BSS segment initialization switch.
 106              	 */
 107              	#if !defined(CRT0_INIT_BSS) || defined(__DOXYGEN__)
 108              	#define CRT0_INIT_BSS                       TRUE
 109              	#endif
 110              	
 111              	/**
 112              	 * @brief   RAM areas initialization switch.
 113              	 */
 114              	#if !defined(CRT0_INIT_RAM_AREAS) || defined(__DOXYGEN__)
 115              	#define CRT0_INIT_RAM_AREAS                 TRUE
 116              	#endif
 117              	
 118              	/**
 119              	 * @brief   Constructors invocation switch.
 120              	 */
 121              	#if !defined(CRT0_CALL_CONSTRUCTORS) || defined(__DOXYGEN__)
 122              	#define CRT0_CALL_CONSTRUCTORS              TRUE
 123              	#endif
 124              	
 125              	/**
 126              	 * @brief   Destructors invocation switch.
 127              	 */
 128              	#if !defined(CRT0_CALL_DESTRUCTORS) || defined(__DOXYGEN__)
 129              	#define CRT0_CALL_DESTRUCTORS               TRUE
 130              	#endif
 131              	
 132              	/*===========================================================================*/
 133              	/* Code section.                                                             */
 134              	/*===========================================================================*/
 135              	
 136              	#if !defined(__DOXYGEN__)
 137              	
 138              	                .cpu    cortex-m0
 139              	                .fpu    softvfp
 140              	                .syntax unified
 141              	                .thumb
 142              	                .text
 143              	
 144              	/*
 145              	 * CRT0 entry point.
 146              	 */
 147              	                .align  2
 148              	                .thumb_func
 149              	                .global _crt0_entry
 150              	_crt0_entry:
 151              	                /* Interrupts are globally masked initially.*/
 152:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 cpsid   i
 153              	
 154              	#if CRT0_FORCE_MSP_INIT == TRUE
 155              	                /* MSP stack pointers initialization.*/
 156:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r0, =__main_stack_end__
 157:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 msr     MSP, r0
 158              	#endif
 159              	
 160              	                /* PSP stack pointers initialization.*/
 161:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r0, =__process_stack_end__
 162:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 msr     PSP, r0
 163              	
 164              	                /* CPU mode initialization as configured.*/
 165:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 movs    r0, #CRT0_CONTROL_INIT
 166:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 msr     CONTROL, r0
 167:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 isb
 168              	
 169:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S **** #if CRT0_VTOR_INIT == TRUE
 170:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r0, =_vectors
 171:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r1, =SCB_VTOR
 172:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 str     r0, [r1]
 173:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S **** #endif
 174:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S **** 
 175:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S **** #if CRT0_INIT_CORE == TRUE
 176:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 /* Core initialization.*/
 177:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bl      __core_init
 178              	#endif
 179              	
 180              	                /* Early initialization..*/
 181:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bl      __early_init
 182              	
 183              	#if CRT0_INIT_STACKS == TRUE
 184:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r0, =CRT0_STACKS_FILL_PATTERN
 185              	                /* Main Stack initialization. Note, it assumes that the
 186              	                   stack size is a multiple of 4 so the linker file must
 187              	                   ensure this.*/
 188:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r1, =__main_stack_base__
 189:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r2, =__main_stack_end__
 190              	msloop:
 191:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 cmp     r1, r2
 192:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bge     endmsloop
 193:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 str     r0, [r1]
 194:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 adds    r1, #4
 195:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 b       msloop
 196              	endmsloop:
 197              	                /* Process Stack initialization. Note, it assumes that the
 198              	                   stack size is a multiple of 4 so the linker file must
 199              	                   ensure this.*/
 200:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r1, =__process_stack_base__
 201:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r2, =__process_stack_end__
 202              	psloop:
 203:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 cmp     r1, r2
 204:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bge     endpsloop
 205:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 str     r0, [r1]
 206:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 adds    r1, #4
 207:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 b       psloop
 208              	endpsloop:
 209              	#endif
 210              	
 211              	#if CRT0_INIT_DATA == TRUE
 212              	                /* Data initialization. Note, it assumes that the DATA size
 213              	                  is a multiple of 4 so the linker file must ensure this.*/
 214:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r1, =_textdata
 215:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r2, =_data
 216:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r3, =_edata
 217              	dloop:
 218:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 cmp     r2, r3
 219:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bge     enddloop
 220:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r0, [r1]
 221:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 str     r0, [r2]
 222:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 adds    r1, #4
 223:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 adds    r2, #4
 224:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 b       dloop
 225              	enddloop:
 226              	#endif
 227              	
 228              	#if CRT0_INIT_BSS == TRUE
 229              	                /* BSS initialization. Note, it assumes that the DATA size
 230              	                  is a multiple of 4 so the linker file must ensure this.*/
 231:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 movs    r0, #0
 232:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r1, =_bss_start
 233:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r2, =_bss_end
 234              	bloop:
 235:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 cmp     r1, r2
 236:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bge     endbloop
 237:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 str     r0, [r1]
 238:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 adds    r1, #4
 239:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 b       bloop
 240              	endbloop:
 241              	#endif
 242              	
 243              	#if CRT0_INIT_RAM_AREAS == TRUE
 244              	                /* RAM areas initialization.*/
 245:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bl      __init_ram_areas
 246              	#endif
 247              	
 248              	                /* Late initialization..*/
 249:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bl      __late_init
 250              	
 251              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 252              	                /* Constructors invocation.*/
 253:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r4, =__init_array_start
 254:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r5, =__init_array_end
 255              	initloop:
 256:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 cmp     r4, r5
 257:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bge     endinitloop
 258:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r1, [r4]
 259:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 blx     r1
 260:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 adds    r4, #4
 261:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 b       initloop
 262              	endinitloop:
 263              	#endif
 264              	
 265              	                /* Main program invocation, r0 contains the returned value.*/
 266:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bl      main
 267              	
 268              	#if CRT0_CALL_DESTRUCTORS == TRUE
 269              	                /* Destructors invocation.*/
 270:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r4, =__fini_array_start
 271:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r5, =__fini_array_end
 272              	finiloop:
 273:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 cmp     r4, r5
 274:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bge     endfiniloop
 275:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r1, [r4]
 276:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 blx     r1
 277:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 adds    r4, #4
 278:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 b       finiloop
 279              	endfiniloop:
 280              	#endif
 281              	
 282              	                /* Branching to the defined exit handler.*/
 283:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 ldr     r1, =__default_exit
 284:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S ****                 bx      r1
DEFINED SYMBOLS
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:147    .text:00000000 $t
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:150    .text:00000000 _crt0_entry
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:190    .text:00000026 msloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:196    .text:00000030 endmsloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:202    .text:00000034 psloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:208    .text:0000003e endpsloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:217    .text:00000044 dloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:225    .text:00000052 enddloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:234    .text:00000058 bloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:240    .text:00000062 endbloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:255    .text:0000006e initloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:262    .text:0000007a endinitloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:272    .text:00000082 finiloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:279    .text:0000008e endfiniloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:284    .text:00000092 $d
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v6m.S:284    .text:00000094 $d

UNDEFINED SYMBOLS
__main_stack_end__
__process_stack_end__
__core_init
__early_init
__main_stack_base__
__process_stack_base__
_textdata
_data
_edata
_bss_start
_bss_end
__init_ram_areas
__late_init
__init_array_start
__init_array_end
main
__fini_array_start
__fini_array_end
__default_exit
