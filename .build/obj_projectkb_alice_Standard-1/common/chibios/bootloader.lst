   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 2
  11              		.file	"bootloader.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.bootloader_jump,"ax",%progbits
  16              		.align	1
  17              		.global	bootloader_jump
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	bootloader_jump:
  25              	.LFB186:
  26              		.file 1 "tmk_core/common/chibios/bootloader.c"
   1:tmk_core/common/chibios/bootloader.c **** #include "bootloader.h"
   2:tmk_core/common/chibios/bootloader.c **** 
   3:tmk_core/common/chibios/bootloader.c **** #include "ch.h"
   4:tmk_core/common/chibios/bootloader.c **** #include "hal.h"
   5:tmk_core/common/chibios/bootloader.c **** 
   6:tmk_core/common/chibios/bootloader.c **** #ifdef STM32_BOOTLOADER_ADDRESS
   7:tmk_core/common/chibios/bootloader.c **** /* STM32 */
   8:tmk_core/common/chibios/bootloader.c **** 
   9:tmk_core/common/chibios/bootloader.c **** /* This code should be checked whether it runs correctly on platforms */
  10:tmk_core/common/chibios/bootloader.c **** #    define SYMVAL(sym) (uint32_t)(((uint8_t *)&(sym)) - ((uint8_t *)0))
  11:tmk_core/common/chibios/bootloader.c **** extern uint32_t __ram0_end__;
  12:tmk_core/common/chibios/bootloader.c **** #    define BOOTLOADER_MAGIC 0xDEADBEEF
  13:tmk_core/common/chibios/bootloader.c **** #    define MAGIC_ADDR (unsigned long *)(SYMVAL(__ram0_end__) - 4)
  14:tmk_core/common/chibios/bootloader.c **** 
  15:tmk_core/common/chibios/bootloader.c **** /** \brief Jump to the bootloader
  16:tmk_core/common/chibios/bootloader.c ****  *
  17:tmk_core/common/chibios/bootloader.c ****  * FIXME: needs doc
  18:tmk_core/common/chibios/bootloader.c ****  */
  19:tmk_core/common/chibios/bootloader.c **** void bootloader_jump(void) {
  27              		.loc 1 19 28 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  20:tmk_core/common/chibios/bootloader.c ****     *MAGIC_ADDR = BOOTLOADER_MAGIC;  // set magic flag => reset handler will jump into boot loader
  33              		.loc 1 20 5 view .LVU1
  34              		.loc 1 20 17 is_stmt 0 view .LVU2
  35 0000 054B     		ldr	r3, .L3
  36 0002 064A     		ldr	r2, .L3+4
  37 0004 1A60     		str	r2, [r3]
  21:tmk_core/common/chibios/bootloader.c ****     NVIC_SystemReset();
  38              		.loc 1 21 5 is_stmt 1 view .LVU3
  39              	.LBB19:
  40              	.LBI19:
  41              		.file 2 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * @file     core_cm0.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * @version  V5.0.5
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * @date     28. May 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined (__clang__)
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #include <stdint.h>
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef __cplusplus
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  extern "C" {
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*******************************************************************************
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *                 CMSIS definitions
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  ******************************************************************************/
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #include "cmsis_version.h"
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     This core does not support an FPU at all
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __FPU_USED       0U
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef __cplusplus
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef __cplusplus
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  extern "C" {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* check device defines and use defaults */
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef __cplusplus
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #else
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*******************************************************************************
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *                 Register Abstraction
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   Core Register contain:
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core Register
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core NVIC Register
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core SCB Register
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core SysTick Register
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  ******************************************************************************/
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef union
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   struct
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } APSR_Type;
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* APSR Register Definitions */
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef union
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   struct
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } IPSR_Type;
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef union
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   struct
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } xPSR_Type;
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef union
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   struct
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } CONTROL_Type;
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef struct
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }  NVIC_Type;
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef struct
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } SCB_Type;
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** typedef struct
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** } SysTick_Type;
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 496:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 497:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 499:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 500:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 501:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 505:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 506:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 507:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 508:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
 513:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 515:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 516:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
 521:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 523:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 525:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 526:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 527:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 531:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 532:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 533:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 539:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 543:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 544:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*@} */
 545:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 546:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 547:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 548:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*******************************************************************************
 549:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   Core Function Interface contains:
 551:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core NVIC Functions
 552:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core SysTick Functions
 553:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   - Core Register Access Functions
 554:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  ******************************************************************************/
 555:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 556:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** */
 558:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 559:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 560:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 561:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 563:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   @{
 567:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 568:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 569:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 573:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #else
 575:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 589:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #endif
 593:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #else
 595:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 599:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 601:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 602:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 607:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 608:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 614:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 617:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 618:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 623:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 624:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 625:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 626:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 627:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 628:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 629:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 630:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 631:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 632:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 633:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 640:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 642:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 644:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 646:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   else
 647:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 648:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     return(0U);
 649:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 650:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 651:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 652:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 653:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 654:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 659:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 661:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 663:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     __DSB();
 665:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     __ISB();
 666:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 667:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 668:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 669:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 670:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 671:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 678:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 680:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 682:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 684:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   else
 685:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 686:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     return(0U);
 687:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 688:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 689:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 690:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 691:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 692:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 697:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 699:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 701:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 703:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 704:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 705:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 706:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 707:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 712:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 714:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 716:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 718:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 719:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 720:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 721:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 722:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 730:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 731:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 732:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 733:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 734:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 735:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 736:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 737:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   else
 738:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 739:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 740:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 741:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 742:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 743:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 744:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 745:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 746:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 747:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 748:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 749:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            or negative to specify a processor exception.
 750:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 751:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return             Interrupt Priority.
 752:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 753:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 754:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 755:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 756:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 757:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 758:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 759:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 760:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 761:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   else
 762:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 763:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 764:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   }
 765:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 766:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 767:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 768:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 769:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Encode Priority
 770:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Encodes the priority for an interrupt with the given priority group,
 771:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            preemptive priority value, and subpriority value.
 772:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            In case of a conflict between priority grouping and available
 773:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 774:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]     PriorityGroup  Used priority group.
 775:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 776:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 777:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 778:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 779:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 780:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 781:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 782:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t PreemptPriorityBits;
 783:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t SubPriorityBits;
 784:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 785:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 786:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 787:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 788:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   return (
 789:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 790:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 791:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****          );
 792:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 793:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 794:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 795:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 796:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Decode Priority
 797:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Decodes an interrupt priority value with a given priority group to
 798:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            preemptive priority value and subpriority value.
 799:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            In case of a conflict between priority grouping and available
 800:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 801:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 802:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]     PriorityGroup  Used priority group.
 803:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 804:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 805:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 806:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 807:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 808:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 809:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t PreemptPriorityBits;
 810:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t SubPriorityBits;
 811:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 812:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 813:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 814:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 815:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
 816:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 817:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 818:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 819:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 820:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 821:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 822:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Set Interrupt Vector
 823:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 824:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 825:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            or negative to specify a processor exception.
 826:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            Address 0 must be mapped to SRAM.
 827:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]   IRQn      Interrupt number
 828:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]   vector    Address of interrupt handler function
 829:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 830:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 831:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 832:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t *vectors = (uint32_t *)0x0U;
 833:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 834:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 835:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 836:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 837:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 838:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   Get Interrupt Vector
 839:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Reads an interrupt vector from interrupt vector table.
 840:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 841:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****            or negative to specify a processor exception.
 842:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \param [in]   IRQn      Interrupt number.
 843:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \return                 Address of interrupt handler function
 844:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 845:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 846:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 847:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   uint32_t *vectors = (uint32_t *)0x0U;
 848:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
 849:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** }
 850:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 851:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 852:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** /**
 853:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \brief   System Reset
 854:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 855:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****  */
 856:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
  42              		.loc 2 856 34 view .LVU4
  43              	.LBB20:
 857:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** {
 858:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
  44              		.loc 2 858 3 view .LVU5
  45              	.LBB21:
  46              	.LBI21:
  47              		.file 3 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 496:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 499:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 503:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 505:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 507:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 508:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 509:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 510:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 511:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 516:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 518:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 520:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 521:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 523:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 527:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 529:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 530:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 531:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 533:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 534:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 535:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 538:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 542:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 544:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 545:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 546:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 548:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 549:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 550:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 551:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 553:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 557:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 559:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 561:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 562:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 565:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 569:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 571:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 573:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 574:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 575:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 579:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 580:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 583:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 584:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 588:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   
 589:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 592:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 594:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 598:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 599:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 600:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 602:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 603:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 604:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 605:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 607:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 611:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 614:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 616:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 619:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 620:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 621:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 623:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 624:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 625:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 626:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 627:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 628:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 629:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 633:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   
 634:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 637:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 639:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 644:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 646:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 647:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 648:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 649:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 655:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 658:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 660:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 664:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 666:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 667:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 668:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 669:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 670:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 671:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 675:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 676:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 679:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 681:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 685:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 686:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 687:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 689:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 690:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 691:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 692:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 693:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 695:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 699:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 702:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 704:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 707:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 708:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 709:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 711:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 712:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 713:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 714:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 717:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 721:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 732:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 734:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 735:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 739:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 752:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 754:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 755:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 756:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 757:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 761:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 766:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 768:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 776:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 777:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 778:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 780:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 782:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 783:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 784:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 785:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 786:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 787:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 788:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 802:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 804:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 805:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 806:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 807:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 808:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 809:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 812:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 813:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 817:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** */
 818:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 819:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #else
 827:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 831:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 832:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 833:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 834:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 836:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 838:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 839:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 842:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 844:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 846:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 850:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 852:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 854:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 855:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 857:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 859:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 860:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 861:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 866:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 868:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 870:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 871:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 872:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 873:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 877:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
  48              		.loc 3 877 27 view .LVU6
  49              	.LBB22:
 878:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 879:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  50              		.loc 3 879 3 view .LVU7
  51              		.syntax divided
  52              	@ 879 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
  53 0006 BFF34F8F 		dsb 0xF
  54              	@ 0 "" 2
  55              		.thumb
  56              		.syntax unified
  57              	.LBE22:
  58              	.LBE21:
 859:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****                                                                        buffered write are completed
 860:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
  59              		.loc 2 860 3 view .LVU8
  60              		.loc 2 860 15 is_stmt 0 view .LVU9
  61 000a 054B     		ldr	r3, .L3+8
  62 000c 054A     		ldr	r2, .L3+12
  63 000e DA60     		str	r2, [r3, #12]
 861:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 862:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
  64              		.loc 2 862 3 is_stmt 1 view .LVU10
  65              	.LBB23:
  66              	.LBI23:
 877:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
  67              		.loc 3 877 27 view .LVU11
  68              	.LBB24:
  69              		.loc 3 879 3 view .LVU12
  70              		.syntax divided
  71              	@ 879 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
  72 0010 BFF34F8F 		dsb 0xF
  73              	@ 0 "" 2
  74              		.thumb
  75              		.syntax unified
  76              	.L2:
  77              	.LBE24:
  78              	.LBE23:
 863:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h **** 
 864:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
  79              		.loc 2 864 3 view .LVU13
 865:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****   {
 866:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h ****     __NOP();
  80              		.loc 2 866 5 view .LVU14
  81              		.syntax divided
  82              	@ 866 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm0.h" 1
  83 0014 C046     		nop
  84              	@ 0 "" 2
  85              		.thumb
  86              		.syntax unified
  87 0016 FDE7     		b	.L2
  88              	.L4:
  89              		.align	2
  90              	.L3:
  91 0018 FCFFFFFF 		.word	__ram0_end__-4
  92 001c EFBEADDE 		.word	-559038737
  93 0020 00ED00E0 		.word	-536810240
  94 0024 0400FA05 		.word	100270084
  95              	.LBE20:
  96              	.LBE19:
  97              		.cfi_endproc
  98              	.LFE186:
 100              		.section	.text.enter_bootloader_mode_if_requested,"ax",%progbits
 101              		.align	1
 102              		.global	enter_bootloader_mode_if_requested
 103              		.syntax unified
 104              		.code	16
 105              		.thumb_func
 106              		.fpu softvfp
 108              	enter_bootloader_mode_if_requested:
 109              	.LFB187:
  22:tmk_core/common/chibios/bootloader.c **** }
  23:tmk_core/common/chibios/bootloader.c **** 
  24:tmk_core/common/chibios/bootloader.c **** /** \brief Enter bootloader mode if requested
  25:tmk_core/common/chibios/bootloader.c ****  *
  26:tmk_core/common/chibios/bootloader.c ****  * FIXME: needs doc
  27:tmk_core/common/chibios/bootloader.c ****  */
  28:tmk_core/common/chibios/bootloader.c **** void enter_bootloader_mode_if_requested(void) {
 110              		.loc 1 28 47 view -0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
  29:tmk_core/common/chibios/bootloader.c ****     unsigned long *check = MAGIC_ADDR;
 114              		.loc 1 29 5 view .LVU16
 115              		.loc 1 29 28 is_stmt 0 view .LVU17
 116 0000 0A4B     		ldr	r3, .L8
  30:tmk_core/common/chibios/bootloader.c ****     if (*check == BOOTLOADER_MAGIC) {
 117              		.loc 1 30 8 view .LVU18
 118 0002 0B4A     		ldr	r2, .L8+4
  29:tmk_core/common/chibios/bootloader.c ****     unsigned long *check = MAGIC_ADDR;
 119              		.loc 1 29 28 view .LVU19
 120 0004 043B     		subs	r3, r3, #4
 121              	.LVL0:
 122              		.loc 1 30 5 is_stmt 1 view .LVU20
 123              		.loc 1 30 8 is_stmt 0 view .LVU21
 124 0006 1968     		ldr	r1, [r3]
  28:tmk_core/common/chibios/bootloader.c ****     unsigned long *check = MAGIC_ADDR;
 125              		.loc 1 28 47 view .LVU22
 126 0008 10B5     		push	{r4, lr}
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 4, -8
 129              		.cfi_offset 14, -4
 130              		.loc 1 30 8 view .LVU23
 131 000a 9142     		cmp	r1, r2
 132 000c 0CD1     		bne	.L5
 133              	.LBB25:
  31:tmk_core/common/chibios/bootloader.c ****         *check = 0;
 134              		.loc 1 31 9 is_stmt 1 view .LVU24
 135              		.loc 1 31 16 is_stmt 0 view .LVU25
 136 000e 0022     		movs	r2, #0
 137 0010 1A60     		str	r2, [r3]
  32:tmk_core/common/chibios/bootloader.c ****         __set_CONTROL(0);
 138              		.loc 1 32 9 is_stmt 1 view .LVU26
 139              	.LVL1:
 140              	.LBB26:
 141              	.LBI26:
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142              		.loc 3 181 27 view .LVU27
 143              	.LBB27:
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144              		.loc 3 183 3 view .LVU28
 145              		.syntax divided
 146              	@ 183 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 147 0012 82F31488 		MSR control, r2
 148              	@ 0 "" 2
 149              	.LVL2:
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 150              		.loc 3 183 3 is_stmt 0 view .LVU29
 151              		.thumb
 152              		.syntax unified
 153              	.LBE27:
 154              	.LBE26:
  33:tmk_core/common/chibios/bootloader.c ****         __set_MSP(*(__IO uint32_t *)STM32_BOOTLOADER_ADDRESS);
 155              		.loc 1 33 9 is_stmt 1 view .LVU30
 156 0016 074B     		ldr	r3, .L8+8
 157              	.LVL3:
 158              		.loc 1 33 9 is_stmt 0 view .LVU31
 159 0018 1B68     		ldr	r3, [r3]
 160              	.LVL4:
 161              	.LBB28:
 162              	.LBI28:
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 163              		.loc 3 331 27 is_stmt 1 view .LVU32
 164              	.LBB29:
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 165              		.loc 3 333 3 view .LVU33
 166              		.syntax divided
 167              	@ 333 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 168 001a 83F30888 		MSR msp, r3
 169              	@ 0 "" 2
 170              	.LVL5:
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 171              		.loc 3 333 3 is_stmt 0 view .LVU34
 172              		.thumb
 173              		.syntax unified
 174              	.LBE29:
 175              	.LBE28:
  34:tmk_core/common/chibios/bootloader.c ****         __enable_irq();
 176              		.loc 1 34 9 is_stmt 1 view .LVU35
 177              	.LBB30:
 178              	.LBI30:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 179              		.loc 3 129 27 view .LVU36
 180              	.LBB31:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 181              		.loc 3 131 3 view .LVU37
 182              		.syntax divided
 183              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 184 001e 62B6     		cpsie i
 185              	@ 0 "" 2
 186              		.thumb
 187              		.syntax unified
 188              	.LBE31:
 189              	.LBE30:
  35:tmk_core/common/chibios/bootloader.c **** 
  36:tmk_core/common/chibios/bootloader.c ****         typedef void (*BootJump_t)(void);
 190              		.loc 1 36 9 view .LVU38
  37:tmk_core/common/chibios/bootloader.c ****         BootJump_t boot_jump = *(BootJump_t *)(STM32_BOOTLOADER_ADDRESS + 4);
 191              		.loc 1 37 9 view .LVU39
 192              	.LVL6:
  38:tmk_core/common/chibios/bootloader.c ****         boot_jump();
 193              		.loc 1 38 9 view .LVU40
  37:tmk_core/common/chibios/bootloader.c ****         BootJump_t boot_jump = *(BootJump_t *)(STM32_BOOTLOADER_ADDRESS + 4);
 194              		.loc 1 37 20 is_stmt 0 view .LVU41
 195 0020 054B     		ldr	r3, .L8+12
 196              	.LVL7:
 197              		.loc 1 38 9 view .LVU42
 198 0022 1B68     		ldr	r3, [r3]
 199              	.LVL8:
 200              		.loc 1 38 9 view .LVU43
 201 0024 9847     		blx	r3
 202              	.LVL9:
 203              	.L7:
  39:tmk_core/common/chibios/bootloader.c ****         while (1)
 204              		.loc 1 39 9 is_stmt 1 discriminator 1 view .LVU44
  40:tmk_core/common/chibios/bootloader.c ****             ;
 205              		.loc 1 40 13 discriminator 1 view .LVU45
 206 0026 FEE7     		b	.L7
 207              	.LVL10:
 208              	.L5:
 209              		.loc 1 40 13 is_stmt 0 discriminator 1 view .LVU46
 210              	.LBE25:
  41:tmk_core/common/chibios/bootloader.c ****     }
  42:tmk_core/common/chibios/bootloader.c **** }
 211              		.loc 1 42 1 view .LVU47
 212              		@ sp needed
 213 0028 10BD     		pop	{r4, pc}
 214              	.L9:
 215 002a C046     		.align	2
 216              	.L8:
 217 002c 00000000 		.word	__ram0_end__
 218 0030 EFBEADDE 		.word	-559038737
 219 0034 00C8FF1F 		.word	536856576
 220 0038 04C8FF1F 		.word	536856580
 221              		.cfi_endproc
 222              	.LFE187:
 224              		.text
 225              	.Letext0:
 226              		.file 4 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\lib\\gcc\\arm-none-eabi\\8.3.1\\in
 227              		.file 5 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_
 228              		.file 6 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdi
 229              		.file 7 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\stdint.h"
 230              		.file 8 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 231              		.file 9 "./lib/chibios/os/rt/include/chsystypes.h"
 232              		.file 10 "./lib/chibios/os/rt/include/chschd.h"
 233              		.file 11 "./lib/chibios/os/rt/include/chtime.h"
 234              		.file 12 "./lib/chibios/os/common/ext/ST/STM32F0xx/system_stm32f0xx.h"
 235              		.file 13 "./lib/chibios/os/common/ext/ST/STM32F0xx/stm32f072xb.h"
 236              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 237              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h"
 238              		.file 16 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 239              		.file 17 "./lib/chibios/os/rt/include/chsem.h"
 240              		.file 18 "./lib/chibios/os/rt/include/chmtx.h"
 241              		.file 19 "./lib/chibios/os/rt/include/chsys.h"
 242              		.file 20 "./lib/chibios/os/rt/include/chregistry.h"
 243              		.file 21 "./lib/chibios/os/oslib/include/chmemcore.h"
 244              		.file 22 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 245              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/stm32_gpio.h"
 246              		.file 24 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 247              		.file 25 "./lib/chibios/os/hal/include/hal_i2c.h"
 248              		.file 26 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 249              		.file 27 "./lib/chibios/os/hal/include/hal_pwm.h"
 250              		.file 28 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 251              		.file 29 "./lib/chibios/os/hal/include/hal_spi.h"
 252              		.file 30 "./lib/chibios/os/hal/ports/STM32/LLD/SPIv2/hal_spi_lld.h"
 253              		.file 31 "./lib/chibios/os/hal/include/hal_usb.h"
 254              		.file 32 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bootloader.c
C:\Users\kyleo\AppData\Local\Temp\cchS4Muk.s:16     .text.bootloader_jump:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cchS4Muk.s:24     .text.bootloader_jump:00000000 bootloader_jump
C:\Users\kyleo\AppData\Local\Temp\cchS4Muk.s:91     .text.bootloader_jump:00000018 $d
C:\Users\kyleo\AppData\Local\Temp\cchS4Muk.s:101    .text.enter_bootloader_mode_if_requested:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\cchS4Muk.s:108    .text.enter_bootloader_mode_if_requested:00000000 enter_bootloader_mode_if_requested
C:\Users\kyleo\AppData\Local\Temp\cchS4Muk.s:217    .text.enter_bootloader_mode_if_requested:0000002c $d

UNDEFINED SYMBOLS
__ram0_end__
