   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 2
  11              		.file	"action.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.action_exec,"ax",%progbits
  16              		.align	1
  17              		.global	action_exec
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	action_exec:
  25              	.LFB194:
  26              		.file 1 "tmk_core/common/action.c"
   1:tmk_core/common/action.c **** /*
   2:tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action.c **** 
   4:tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action.c **** (at your option) any later version.
   8:tmk_core/common/action.c **** 
   9:tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action.c **** GNU General Public License for more details.
  13:tmk_core/common/action.c **** 
  14:tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action.c **** */
  17:tmk_core/common/action.c **** #include "host.h"
  18:tmk_core/common/action.c **** #include "keycode.h"
  19:tmk_core/common/action.c **** #include "keyboard.h"
  20:tmk_core/common/action.c **** #include "mousekey.h"
  21:tmk_core/common/action.c **** #include "command.h"
  22:tmk_core/common/action.c **** #include "led.h"
  23:tmk_core/common/action.c **** #include "action_layer.h"
  24:tmk_core/common/action.c **** #include "action_tapping.h"
  25:tmk_core/common/action.c **** #include "action_macro.h"
  26:tmk_core/common/action.c **** #include "action_util.h"
  27:tmk_core/common/action.c **** #include "action.h"
  28:tmk_core/common/action.c **** #include "wait.h"
  29:tmk_core/common/action.c **** 
  30:tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
  31:tmk_core/common/action.c **** #    include "backlight.h"
  32:tmk_core/common/action.c **** #endif
  33:tmk_core/common/action.c **** 
  34:tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  35:tmk_core/common/action.c **** #    include "debug.h"
  36:tmk_core/common/action.c **** #else
  37:tmk_core/common/action.c **** #    include "nodebug.h"
  38:tmk_core/common/action.c **** #endif
  39:tmk_core/common/action.c **** 
  40:tmk_core/common/action.c **** int tp_buttons;
  41:tmk_core/common/action.c **** 
  42:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  43:tmk_core/common/action.c **** int retro_tapping_counter = 0;
  44:tmk_core/common/action.c **** #endif
  45:tmk_core/common/action.c **** 
  46:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  47:tmk_core/common/action.c **** #    include <fauxclicky.h>
  48:tmk_core/common/action.c **** #endif
  49:tmk_core/common/action.c **** 
  50:tmk_core/common/action.c **** #ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
  51:tmk_core/common/action.c **** __attribute__((weak)) bool get_ignore_mod_tap_interrupt(uint16_t keycode) { return false; }
  52:tmk_core/common/action.c **** #endif
  53:tmk_core/common/action.c **** 
  54:tmk_core/common/action.c **** #ifndef TAP_CODE_DELAY
  55:tmk_core/common/action.c **** #    define TAP_CODE_DELAY 0
  56:tmk_core/common/action.c **** #endif
  57:tmk_core/common/action.c **** #ifndef TAP_HOLD_CAPS_DELAY
  58:tmk_core/common/action.c **** #    define TAP_HOLD_CAPS_DELAY 80
  59:tmk_core/common/action.c **** #endif
  60:tmk_core/common/action.c **** /** \brief Called to execute an action.
  61:tmk_core/common/action.c ****  *
  62:tmk_core/common/action.c ****  * FIXME: Needs documentation.
  63:tmk_core/common/action.c ****  */
  64:tmk_core/common/action.c **** void action_exec(keyevent_t event) {
  27              		.loc 1 64 36 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 0, -24
  34              		.cfi_offset 1, -20
  35              		.cfi_offset 2, -16
  36              		.cfi_offset 3, -12
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39              	.LVL0:
  65:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40              		.loc 1 65 5 view .LVU1
  41              		.file 2 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:tmk_core/common/keyboard.h **** 
  21:tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:tmk_core/common/keyboard.h **** #include <stdint.h>
  23:tmk_core/common/keyboard.h **** 
  24:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  25:tmk_core/common/keyboard.h **** extern "C" {
  26:tmk_core/common/keyboard.h **** #endif
  27:tmk_core/common/keyboard.h **** 
  28:tmk_core/common/keyboard.h **** /* key matrix position */
  29:tmk_core/common/keyboard.h **** typedef struct {
  30:tmk_core/common/keyboard.h ****     uint8_t col;
  31:tmk_core/common/keyboard.h ****     uint8_t row;
  32:tmk_core/common/keyboard.h **** } keypos_t;
  33:tmk_core/common/keyboard.h **** 
  34:tmk_core/common/keyboard.h **** /* key event */
  35:tmk_core/common/keyboard.h **** typedef struct {
  36:tmk_core/common/keyboard.h ****     keypos_t key;
  37:tmk_core/common/keyboard.h ****     bool     pressed;
  38:tmk_core/common/keyboard.h ****     uint16_t time;
  39:tmk_core/common/keyboard.h **** } keyevent_t;
  40:tmk_core/common/keyboard.h **** 
  41:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  42:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb) ((keya).row == (keyb).row && (keya).col == (keyb).col)
  43:tmk_core/common/keyboard.h **** 
  44:tmk_core/common/keyboard.h **** /* Rules for No Event:
  45:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  46:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  47:tmk_core/common/keyboard.h ****  */
  48:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  42              		.loc 2 48 51 view .LVU2
  66:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  67:tmk_core/common/action.c ****         dprint("EVENT: ");
  68:tmk_core/common/action.c ****         debug_event(event);
  69:tmk_core/common/action.c ****         dprintln();
  43              		.loc 1 69 19 view .LVU3
  70:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  71:tmk_core/common/action.c ****         retro_tapping_counter++;
  72:tmk_core/common/action.c **** #endif
  73:tmk_core/common/action.c ****     }
  74:tmk_core/common/action.c **** 
  75:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  76:tmk_core/common/action.c ****     if (IS_PRESSED(event)) {
  77:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_PRESS;
  78:tmk_core/common/action.c ****     }
  79:tmk_core/common/action.c ****     if (IS_RELEASED(event)) {
  80:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_RELEASE;
  81:tmk_core/common/action.c ****     }
  82:tmk_core/common/action.c ****     fauxclicky_check();
  83:tmk_core/common/action.c **** #endif
  84:tmk_core/common/action.c **** 
  85:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  86:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  87:tmk_core/common/action.c ****         process_hand_swap(&event);
  88:tmk_core/common/action.c ****     }
  89:tmk_core/common/action.c **** #endif
  90:tmk_core/common/action.c **** 
  91:tmk_core/common/action.c ****     keyrecord_t record = {.event = event};
  44              		.loc 1 91 5 view .LVU4
  45              		.loc 1 91 17 is_stmt 0 view .LVU5
  46 0002 0E22     		movs	r2, #14
  47 0004 0024     		movs	r4, #0
  48 0006 02AB     		add	r3, sp, #8
  49 0008 6A44     		add	r2, r2, sp
  50 000a 1480     		strh	r4, [r2]
  51 000c 0290     		str	r0, [sp, #8]
  52 000e 9980     		strh	r1, [r3, #4]
  92:tmk_core/common/action.c **** 
  93:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
  94:tmk_core/common/action.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  95:tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
  96:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
  97:tmk_core/common/action.c ****     }
  98:tmk_core/common/action.c ****     if (has_oneshot_mods_timed_out()) {
  99:tmk_core/common/action.c ****         clear_oneshot_mods();
 100:tmk_core/common/action.c ****     }
 101:tmk_core/common/action.c **** #    endif
 102:tmk_core/common/action.c **** #endif
 103:tmk_core/common/action.c **** 
 104:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 105:tmk_core/common/action.c ****     action_tapping_process(record);
  53              		.loc 1 105 5 is_stmt 1 view .LVU6
  54 0010 0399     		ldr	r1, [sp, #12]
  55 0012 FFF7FEFF 		bl	action_tapping_process
  56              	.LVL1:
 106:tmk_core/common/action.c **** #else
 107:tmk_core/common/action.c ****     process_record(&record);
 108:tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
 109:tmk_core/common/action.c ****         dprint("processed: ");
 110:tmk_core/common/action.c ****         debug_record(record);
 111:tmk_core/common/action.c ****         dprintln();
 112:tmk_core/common/action.c ****     }
 113:tmk_core/common/action.c **** #endif
 114:tmk_core/common/action.c **** }
  57              		.loc 1 114 1 is_stmt 0 view .LVU7
  58              		@ sp needed
  59 0016 1FBD     		pop	{r0, r1, r2, r3, r4, pc}
  60              		.cfi_endproc
  61              	.LFE194:
  63              		.section	.text.process_record_quantum,"ax",%progbits
  64              		.align	1
  65              		.weak	process_record_quantum
  66              		.syntax unified
  67              		.code	16
  68              		.thumb_func
  69              		.fpu softvfp
  71              	process_record_quantum:
  72              	.LVL2:
  73              	.LFB196:
 115:tmk_core/common/action.c **** 
 116:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 117:tmk_core/common/action.c **** bool swap_hands = false;
 118:tmk_core/common/action.c **** bool swap_held  = false;
 119:tmk_core/common/action.c **** 
 120:tmk_core/common/action.c **** /** \brief Process Hand Swap
 121:tmk_core/common/action.c ****  *
 122:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 123:tmk_core/common/action.c ****  */
 124:tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
 125:tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
 126:tmk_core/common/action.c **** 
 127:tmk_core/common/action.c ****     keypos_t         pos     = event->key;
 128:tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1 << pos.col;
 129:tmk_core/common/action.c ****     bool             do_swap = event->pressed ? swap_hands : swap_state[pos.row] & (col_bit);
 130:tmk_core/common/action.c **** 
 131:tmk_core/common/action.c ****     if (do_swap) {
 132:tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
 133:tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
 134:tmk_core/common/action.c ****     } else {
 135:tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 136:tmk_core/common/action.c ****     }
 137:tmk_core/common/action.c **** }
 138:tmk_core/common/action.c **** #endif
 139:tmk_core/common/action.c **** 
 140:tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 141:tmk_core/common/action.c **** bool disable_action_cache = false;
 142:tmk_core/common/action.c **** 
 143:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) {
 144:tmk_core/common/action.c ****     disable_action_cache = true;
 145:tmk_core/common/action.c ****     process_record(record);
 146:tmk_core/common/action.c ****     disable_action_cache = false;
 147:tmk_core/common/action.c **** }
 148:tmk_core/common/action.c **** #else
 149:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) { process_record(record); }
 150:tmk_core/common/action.c **** #endif
 151:tmk_core/common/action.c **** 
 152:tmk_core/common/action.c **** __attribute__((weak)) bool process_record_quantum(keyrecord_t *record) { return true; }
  74              		.loc 1 152 72 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79              		.loc 1 152 74 view .LVU9
  80              		.loc 1 152 1 is_stmt 0 view .LVU10
  81 0000 0120     		movs	r0, #1
  82              	.LVL3:
  83              		.loc 1 152 1 view .LVU11
  84              		@ sp needed
  85 0002 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE196:
  89              		.section	.text.post_process_record_quantum,"ax",%progbits
  90              		.align	1
  91              		.weak	post_process_record_quantum
  92              		.syntax unified
  93              		.code	16
  94              		.thumb_func
  95              		.fpu softvfp
  97              	post_process_record_quantum:
  98              	.LVL4:
  99              	.LFB197:
 153:tmk_core/common/action.c **** 
 154:tmk_core/common/action.c **** __attribute__((weak)) void post_process_record_quantum(keyrecord_t *record) {}
 100              		.loc 1 154 77 is_stmt 1 view -0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105              		.loc 1 154 78 view .LVU13
 106              		.loc 1 154 1 is_stmt 0 view .LVU14
 107              		@ sp needed
 108 0000 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE197:
 112              		.section	.text.process_record_tap_hint,"ax",%progbits
 113              		.align	1
 114              		.global	process_record_tap_hint
 115              		.syntax unified
 116              		.code	16
 117              		.thumb_func
 118              		.fpu softvfp
 120              	process_record_tap_hint:
 121              	.LVL5:
 122              	.LFB198:
 155:tmk_core/common/action.c **** 
 156:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 157:tmk_core/common/action.c **** /** \brief Allows for handling tap-hold actions immediately instead of waiting for TAPPING_TERM or 
 158:tmk_core/common/action.c ****  *
 159:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 160:tmk_core/common/action.c ****  */
 161:tmk_core/common/action.c **** void process_record_tap_hint(keyrecord_t *record) {
 123              		.loc 1 161 51 is_stmt 1 view -0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 162:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
 127              		.loc 1 162 5 view .LVU16
 161:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
 128              		.loc 1 161 51 is_stmt 0 view .LVU17
 129 0000 10B5     		push	{r4, lr}
 130              		.cfi_def_cfa_offset 8
 131              		.cfi_offset 4, -8
 132              		.cfi_offset 14, -4
 133              		.loc 1 162 23 view .LVU18
 134 0002 0088     		ldrh	r0, [r0]
 135              	.LVL6:
 136              		.loc 1 162 23 view .LVU19
 137 0004 FFF7FEFF 		bl	layer_switch_get_action
 138              	.LVL7:
 163:tmk_core/common/action.c **** 
 164:tmk_core/common/action.c ****     switch (action.kind.id) {
 139              		.loc 1 164 5 is_stmt 1 view .LVU20
 165:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 166:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 167:tmk_core/common/action.c ****             switch (action.swap.code) {
 168:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 169:tmk_core/common/action.c ****                 default:
 170:tmk_core/common/action.c ****                     swap_hands = !swap_hands;
 171:tmk_core/common/action.c ****                     swap_held  = true;
 172:tmk_core/common/action.c ****             }
 173:tmk_core/common/action.c ****             break;
 174:tmk_core/common/action.c **** #    endif
 175:tmk_core/common/action.c ****     }
 140              		.loc 1 175 5 view .LVU21
 176:tmk_core/common/action.c **** }
 141              		.loc 1 176 1 is_stmt 0 view .LVU22
 142              		@ sp needed
 143 0008 10BD     		pop	{r4, pc}
 144              		.cfi_endproc
 145              	.LFE198:
 147              		.section	.text.register_code,"ax",%progbits
 148              		.align	1
 149              		.global	register_code
 150              		.syntax unified
 151              		.code	16
 152              		.thumb_func
 153              		.fpu softvfp
 155              	register_code:
 156              	.LVL8:
 157              	.LFB202:
 177:tmk_core/common/action.c **** #endif
 178:tmk_core/common/action.c **** 
 179:tmk_core/common/action.c **** /** \brief Take a key event (key press or key release) and processes it.
 180:tmk_core/common/action.c ****  *
 181:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 182:tmk_core/common/action.c ****  */
 183:tmk_core/common/action.c **** void process_record(keyrecord_t *record) {
 184:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 185:tmk_core/common/action.c ****         return;
 186:tmk_core/common/action.c ****     }
 187:tmk_core/common/action.c **** 
 188:tmk_core/common/action.c ****     if (!process_record_quantum(record)) return;
 189:tmk_core/common/action.c **** 
 190:tmk_core/common/action.c ****     process_record_handler(record);
 191:tmk_core/common/action.c ****     post_process_record_quantum(record);
 192:tmk_core/common/action.c **** }
 193:tmk_core/common/action.c **** 
 194:tmk_core/common/action.c **** void process_record_handler(keyrecord_t *record) {
 195:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 196:tmk_core/common/action.c ****     dprint("ACTION: ");
 197:tmk_core/common/action.c ****     debug_action(action);
 198:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 199:tmk_core/common/action.c ****     dprint(" layer_state: ");
 200:tmk_core/common/action.c ****     layer_debug();
 201:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 202:tmk_core/common/action.c ****     default_layer_debug();
 203:tmk_core/common/action.c **** #endif
 204:tmk_core/common/action.c ****     dprintln();
 205:tmk_core/common/action.c **** 
 206:tmk_core/common/action.c ****     process_action(record, action);
 207:tmk_core/common/action.c **** }
 208:tmk_core/common/action.c **** 
 209:tmk_core/common/action.c **** /** \brief Take an action and processes it.
 210:tmk_core/common/action.c ****  *
 211:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 212:tmk_core/common/action.c ****  */
 213:tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action) {
 214:tmk_core/common/action.c ****     keyevent_t event = record->event;
 215:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 216:tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 217:tmk_core/common/action.c **** #endif
 218:tmk_core/common/action.c **** 
 219:tmk_core/common/action.c ****     if (event.pressed) {
 220:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 221:tmk_core/common/action.c ****         clear_weak_mods();
 222:tmk_core/common/action.c ****     }
 223:tmk_core/common/action.c **** 
 224:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 225:tmk_core/common/action.c ****     bool do_release_oneshot = false;
 226:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 227:tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 228:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 229:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 230:tmk_core/common/action.c ****     }
 231:tmk_core/common/action.c **** #endif
 232:tmk_core/common/action.c **** 
 233:tmk_core/common/action.c ****     switch (action.kind.id) {
 234:tmk_core/common/action.c ****         /* Key and Mods */
 235:tmk_core/common/action.c ****         case ACT_LMODS:
 236:tmk_core/common/action.c ****         case ACT_RMODS: {
 237:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS) ? action.key.mods : action.key.mods << 4;
 238:tmk_core/common/action.c ****             if (event.pressed) {
 239:tmk_core/common/action.c ****                 if (mods) {
 240:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 241:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 242:tmk_core/common/action.c ****                         // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSFT).
 243:tmk_core/common/action.c ****                         // Same applies for some keys like KC_MEH which are declared as MEH(KC_NO).
 244:tmk_core/common/action.c ****                         add_mods(mods);
 245:tmk_core/common/action.c ****                     } else {
 246:tmk_core/common/action.c ****                         add_weak_mods(mods);
 247:tmk_core/common/action.c ****                     }
 248:tmk_core/common/action.c ****                     send_keyboard_report();
 249:tmk_core/common/action.c ****                 }
 250:tmk_core/common/action.c ****                 register_code(action.key.code);
 251:tmk_core/common/action.c ****             } else {
 252:tmk_core/common/action.c ****                 unregister_code(action.key.code);
 253:tmk_core/common/action.c ****                 if (mods) {
 254:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 255:tmk_core/common/action.c ****                         del_mods(mods);
 256:tmk_core/common/action.c ****                     } else {
 257:tmk_core/common/action.c ****                         del_weak_mods(mods);
 258:tmk_core/common/action.c ****                     }
 259:tmk_core/common/action.c ****                     send_keyboard_report();
 260:tmk_core/common/action.c ****                 }
 261:tmk_core/common/action.c ****             }
 262:tmk_core/common/action.c ****         } break;
 263:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 264:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 265:tmk_core/common/action.c ****         case ACT_RMODS_TAP: {
 266:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ? action.key.mods : action.key.mods <<
 267:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 268:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 269:tmk_core/common/action.c ****                 case MODS_ONESHOT:
 270:tmk_core/common/action.c ****                     // Oneshot modifier
 271:tmk_core/common/action.c ****                     if (event.pressed) {
 272:tmk_core/common/action.c ****                         if (tap_count == 0) {
 273:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 274:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 275:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 276:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 277:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 278:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 279:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 280:tmk_core/common/action.c ****                             dprint("MODS_TAP: Toggling oneshot");
 281:tmk_core/common/action.c ****                             clear_oneshot_mods();
 282:tmk_core/common/action.c ****                             set_oneshot_locked_mods(mods);
 283:tmk_core/common/action.c ****                             register_mods(mods);
 284:tmk_core/common/action.c **** #        endif
 285:tmk_core/common/action.c ****                         } else {
 286:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 287:tmk_core/common/action.c ****                         }
 288:tmk_core/common/action.c ****                     } else {
 289:tmk_core/common/action.c ****                         if (tap_count == 0) {
 290:tmk_core/common/action.c ****                             clear_oneshot_mods();
 291:tmk_core/common/action.c ****                             unregister_mods(mods);
 292:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 293:tmk_core/common/action.c ****                             // Retain Oneshot mods
 294:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 295:tmk_core/common/action.c ****                             if (mods & get_mods()) {
 296:tmk_core/common/action.c ****                                 clear_oneshot_locked_mods();
 297:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 298:tmk_core/common/action.c ****                                 unregister_mods(mods);
 299:tmk_core/common/action.c ****                             }
 300:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 301:tmk_core/common/action.c ****                             // Toggle Oneshot Layer
 302:tmk_core/common/action.c **** #        endif
 303:tmk_core/common/action.c ****                         } else {
 304:tmk_core/common/action.c ****                             clear_oneshot_mods();
 305:tmk_core/common/action.c ****                             unregister_mods(mods);
 306:tmk_core/common/action.c ****                         }
 307:tmk_core/common/action.c ****                     }
 308:tmk_core/common/action.c ****                     break;
 309:tmk_core/common/action.c **** #    endif
 310:tmk_core/common/action.c ****                 case MODS_TAP_TOGGLE:
 311:tmk_core/common/action.c ****                     if (event.pressed) {
 312:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 313:tmk_core/common/action.c ****                             register_mods(mods);
 314:tmk_core/common/action.c ****                         }
 315:tmk_core/common/action.c ****                     } else {
 316:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 317:tmk_core/common/action.c ****                             unregister_mods(mods);
 318:tmk_core/common/action.c ****                         }
 319:tmk_core/common/action.c ****                     }
 320:tmk_core/common/action.c ****                     break;
 321:tmk_core/common/action.c ****                 default:
 322:tmk_core/common/action.c ****                     if (event.pressed) {
 323:tmk_core/common/action.c ****                         if (tap_count > 0) {
 324:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 325:tmk_core/common/action.c ****                             if (
 326:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 327:tmk_core/common/action.c ****                                 !get_ignore_mod_tap_interrupt(get_event_keycode(record->event)) &&
 328:tmk_core/common/action.c **** #        endif
 329:tmk_core/common/action.c ****                                 record->tap.interrupted) {
 330:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 331:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 332:tmk_core/common/action.c ****                                 record->tap.count = 0;
 333:tmk_core/common/action.c ****                                 register_mods(mods);
 334:tmk_core/common/action.c ****                             } else
 335:tmk_core/common/action.c **** #    endif
 336:tmk_core/common/action.c ****                             {
 337:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: register_code\n");
 338:tmk_core/common/action.c ****                                 register_code(action.key.code);
 339:tmk_core/common/action.c ****                             }
 340:tmk_core/common/action.c ****                         } else {
 341:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 342:tmk_core/common/action.c ****                             register_mods(mods);
 343:tmk_core/common/action.c ****                         }
 344:tmk_core/common/action.c ****                     } else {
 345:tmk_core/common/action.c ****                         if (tap_count > 0) {
 346:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 347:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 348:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 349:tmk_core/common/action.c ****                             }
 350:tmk_core/common/action.c ****                             unregister_code(action.key.code);
 351:tmk_core/common/action.c ****                         } else {
 352:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 353:tmk_core/common/action.c ****                             unregister_mods(mods);
 354:tmk_core/common/action.c ****                         }
 355:tmk_core/common/action.c ****                     }
 356:tmk_core/common/action.c ****                     break;
 357:tmk_core/common/action.c ****             }
 358:tmk_core/common/action.c ****         } break;
 359:tmk_core/common/action.c **** #endif
 360:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 361:tmk_core/common/action.c ****         /* other HID usage */
 362:tmk_core/common/action.c ****         case ACT_USAGE:
 363:tmk_core/common/action.c ****             switch (action.usage.page) {
 364:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 365:tmk_core/common/action.c ****                     if (event.pressed) {
 366:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 367:tmk_core/common/action.c ****                     } else {
 368:tmk_core/common/action.c ****                         host_system_send(0);
 369:tmk_core/common/action.c ****                     }
 370:tmk_core/common/action.c ****                     break;
 371:tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 372:tmk_core/common/action.c ****                     if (event.pressed) {
 373:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 374:tmk_core/common/action.c ****                     } else {
 375:tmk_core/common/action.c ****                         host_consumer_send(0);
 376:tmk_core/common/action.c ****                     }
 377:tmk_core/common/action.c ****                     break;
 378:tmk_core/common/action.c ****             }
 379:tmk_core/common/action.c ****             break;
 380:tmk_core/common/action.c **** #endif
 381:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 382:tmk_core/common/action.c ****         /* Mouse key */
 383:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 384:tmk_core/common/action.c ****             if (event.pressed) {
 385:tmk_core/common/action.c ****                 switch (action.key.code) {
 386:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 387:tmk_core/common/action.c ****                         tp_buttons |= (1 << 0);
 388:tmk_core/common/action.c ****                         break;
 389:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 390:tmk_core/common/action.c ****                         tp_buttons |= (1 << 1);
 391:tmk_core/common/action.c ****                         break;
 392:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 393:tmk_core/common/action.c ****                         tp_buttons |= (1 << 2);
 394:tmk_core/common/action.c ****                         break;
 395:tmk_core/common/action.c ****                     default:
 396:tmk_core/common/action.c ****                         break;
 397:tmk_core/common/action.c ****                 }
 398:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 399:tmk_core/common/action.c ****                 mousekey_send();
 400:tmk_core/common/action.c ****             } else {
 401:tmk_core/common/action.c ****                 switch (action.key.code) {
 402:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 403:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 0);
 404:tmk_core/common/action.c ****                         break;
 405:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 406:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 1);
 407:tmk_core/common/action.c ****                         break;
 408:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 409:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 2);
 410:tmk_core/common/action.c ****                         break;
 411:tmk_core/common/action.c ****                     default:
 412:tmk_core/common/action.c ****                         break;
 413:tmk_core/common/action.c ****                 }
 414:tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 415:tmk_core/common/action.c ****                 mousekey_send();
 416:tmk_core/common/action.c ****             }
 417:tmk_core/common/action.c ****             break;
 418:tmk_core/common/action.c **** #endif
 419:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 420:tmk_core/common/action.c ****         case ACT_LAYER:
 421:tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 422:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 423:tmk_core/common/action.c ****                 if (!event.pressed) {
 424:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 425:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 426:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 427:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 428:tmk_core/common/action.c ****                         case OP_BIT_AND:
 429:tmk_core/common/action.c ****                             default_layer_and(bits | mask);
 430:tmk_core/common/action.c ****                             break;
 431:tmk_core/common/action.c ****                         case OP_BIT_OR:
 432:tmk_core/common/action.c ****                             default_layer_or(bits | mask);
 433:tmk_core/common/action.c ****                             break;
 434:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 435:tmk_core/common/action.c ****                             default_layer_xor(bits | mask);
 436:tmk_core/common/action.c ****                             break;
 437:tmk_core/common/action.c ****                         case OP_BIT_SET:
 438:tmk_core/common/action.c ****                             default_layer_set(bits | mask);
 439:tmk_core/common/action.c ****                             break;
 440:tmk_core/common/action.c ****                     }
 441:tmk_core/common/action.c ****                 }
 442:tmk_core/common/action.c ****             } else {
 443:tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 444:tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) : (action.layer_bitop.on & O
 445:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 446:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 447:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 448:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 449:tmk_core/common/action.c ****                         case OP_BIT_AND:
 450:tmk_core/common/action.c ****                             layer_and(bits | mask);
 451:tmk_core/common/action.c ****                             break;
 452:tmk_core/common/action.c ****                         case OP_BIT_OR:
 453:tmk_core/common/action.c ****                             layer_or(bits | mask);
 454:tmk_core/common/action.c ****                             break;
 455:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 456:tmk_core/common/action.c ****                             layer_xor(bits | mask);
 457:tmk_core/common/action.c ****                             break;
 458:tmk_core/common/action.c ****                         case OP_BIT_SET:
 459:tmk_core/common/action.c ****                             layer_state_set(bits | mask);
 460:tmk_core/common/action.c ****                             break;
 461:tmk_core/common/action.c ****                     }
 462:tmk_core/common/action.c ****                 }
 463:tmk_core/common/action.c ****             }
 464:tmk_core/common/action.c ****             break;
 465:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 466:tmk_core/common/action.c ****             if (event.pressed) {
 467:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 468:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 469:tmk_core/common/action.c ****             } else {
 470:tmk_core/common/action.c ****                 unregister_mods(action.layer_mods.mods);
 471:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 472:tmk_core/common/action.c ****             }
 473:tmk_core/common/action.c ****             break;
 474:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 475:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 476:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 477:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 478:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 479:tmk_core/common/action.c ****                     /* tap toggle */
 480:tmk_core/common/action.c ****                     if (event.pressed) {
 481:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 482:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 483:tmk_core/common/action.c ****                         }
 484:tmk_core/common/action.c ****                     } else {
 485:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 486:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 487:tmk_core/common/action.c ****                         }
 488:tmk_core/common/action.c ****                     }
 489:tmk_core/common/action.c ****                     break;
 490:tmk_core/common/action.c ****                 case OP_ON_OFF:
 491:tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) : layer_off(action.layer_tap.val
 492:tmk_core/common/action.c ****                     break;
 493:tmk_core/common/action.c ****                 case OP_OFF_ON:
 494:tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) : layer_on(action.layer_tap.val
 495:tmk_core/common/action.c ****                     break;
 496:tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 497:tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) : layer_clear();
 498:tmk_core/common/action.c ****                     break;
 499:tmk_core/common/action.c **** #        ifndef NO_ACTION_ONESHOT
 500:tmk_core/common/action.c ****                 case OP_ONESHOT:
 501:tmk_core/common/action.c ****                     // Oneshot modifier
 502:tmk_core/common/action.c **** #            if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 503:tmk_core/common/action.c ****                     do_release_oneshot = false;
 504:tmk_core/common/action.c ****                     if (event.pressed) {
 505:tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 506:tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 507:tmk_core/common/action.c ****                             reset_oneshot_layer();
 508:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 509:tmk_core/common/action.c ****                             break;
 510:tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 511:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 512:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 513:tmk_core/common/action.c ****                         }
 514:tmk_core/common/action.c ****                     } else {
 515:tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 516:tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 517:tmk_core/common/action.c ****                             reset_oneshot_layer();
 518:tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 519:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 520:tmk_core/common/action.c ****                         } else {
 521:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 522:tmk_core/common/action.c ****                         }
 523:tmk_core/common/action.c ****                     }
 524:tmk_core/common/action.c **** #            else
 525:tmk_core/common/action.c ****                     if (event.pressed) {
 526:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 527:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 528:tmk_core/common/action.c ****                     } else {
 529:tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 530:tmk_core/common/action.c ****                         if (tap_count > 1) {
 531:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 532:tmk_core/common/action.c ****                         }
 533:tmk_core/common/action.c ****                     }
 534:tmk_core/common/action.c **** #            endif
 535:tmk_core/common/action.c ****                     break;
 536:tmk_core/common/action.c **** #        endif
 537:tmk_core/common/action.c ****                 default:
 538:tmk_core/common/action.c ****                     /* tap key */
 539:tmk_core/common/action.c ****                     if (event.pressed) {
 540:tmk_core/common/action.c ****                         if (tap_count > 0) {
 541:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 542:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 543:tmk_core/common/action.c ****                         } else {
 544:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 545:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 546:tmk_core/common/action.c ****                         }
 547:tmk_core/common/action.c ****                     } else {
 548:tmk_core/common/action.c ****                         if (tap_count > 0) {
 549:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 550:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 551:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 552:tmk_core/common/action.c ****                             } else {
 553:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 554:tmk_core/common/action.c ****                             }
 555:tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 556:tmk_core/common/action.c ****                         } else {
 557:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 558:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 559:tmk_core/common/action.c ****                         }
 560:tmk_core/common/action.c ****                     }
 561:tmk_core/common/action.c ****                     break;
 562:tmk_core/common/action.c ****             }
 563:tmk_core/common/action.c ****             break;
 564:tmk_core/common/action.c **** #    endif
 565:tmk_core/common/action.c **** #endif
 566:tmk_core/common/action.c ****             /* Extentions */
 567:tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 568:tmk_core/common/action.c ****         case ACT_MACRO:
 569:tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 570:tmk_core/common/action.c ****             break;
 571:tmk_core/common/action.c **** #endif
 572:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 573:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 574:tmk_core/common/action.c ****             switch (action.swap.code) {
 575:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 576:tmk_core/common/action.c ****                     if (event.pressed) {
 577:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 578:tmk_core/common/action.c ****                     }
 579:tmk_core/common/action.c ****                     break;
 580:tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 581:tmk_core/common/action.c ****                     swap_hands = event.pressed;
 582:tmk_core/common/action.c ****                     break;
 583:tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 584:tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 585:tmk_core/common/action.c ****                     break;
 586:tmk_core/common/action.c ****                 case OP_SH_ON:
 587:tmk_core/common/action.c ****                     if (!event.pressed) {
 588:tmk_core/common/action.c ****                         swap_hands = true;
 589:tmk_core/common/action.c ****                     }
 590:tmk_core/common/action.c ****                     break;
 591:tmk_core/common/action.c ****                 case OP_SH_OFF:
 592:tmk_core/common/action.c ****                     if (!event.pressed) {
 593:tmk_core/common/action.c ****                         swap_hands = false;
 594:tmk_core/common/action.c ****                     }
 595:tmk_core/common/action.c ****                     break;
 596:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 597:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 598:tmk_core/common/action.c ****                     /* tap toggle */
 599:tmk_core/common/action.c **** 
 600:tmk_core/common/action.c ****                     if (event.pressed) {
 601:tmk_core/common/action.c ****                         if (swap_held) {
 602:tmk_core/common/action.c ****                             swap_held = false;
 603:tmk_core/common/action.c ****                         } else {
 604:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 605:tmk_core/common/action.c ****                         }
 606:tmk_core/common/action.c ****                     } else {
 607:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 608:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 609:tmk_core/common/action.c ****                         }
 610:tmk_core/common/action.c ****                     }
 611:tmk_core/common/action.c ****                     break;
 612:tmk_core/common/action.c ****                 default:
 613:tmk_core/common/action.c ****                     /* tap key */
 614:tmk_core/common/action.c ****                     if (tap_count > 0) {
 615:tmk_core/common/action.c ****                         if (swap_held) {
 616:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 617:tmk_core/common/action.c ****                             swap_held  = false;
 618:tmk_core/common/action.c ****                         }
 619:tmk_core/common/action.c ****                         if (event.pressed) {
 620:tmk_core/common/action.c ****                             register_code(action.swap.code);
 621:tmk_core/common/action.c ****                         } else {
 622:tmk_core/common/action.c ****                             wait_ms(TAP_CODE_DELAY);
 623:tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 624:tmk_core/common/action.c ****                             *record = (keyrecord_t){};  // hack: reset tap mode
 625:tmk_core/common/action.c ****                         }
 626:tmk_core/common/action.c ****                     } else {
 627:tmk_core/common/action.c ****                         if (swap_held && !event.pressed) {
 628:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 629:tmk_core/common/action.c ****                             swap_held  = false;
 630:tmk_core/common/action.c ****                         }
 631:tmk_core/common/action.c ****                     }
 632:tmk_core/common/action.c **** #    endif
 633:tmk_core/common/action.c ****             }
 634:tmk_core/common/action.c **** #endif
 635:tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 636:tmk_core/common/action.c ****         case ACT_FUNCTION:
 637:tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 638:tmk_core/common/action.c ****             break;
 639:tmk_core/common/action.c **** #endif
 640:tmk_core/common/action.c ****         default:
 641:tmk_core/common/action.c ****             break;
 642:tmk_core/common/action.c ****     }
 643:tmk_core/common/action.c **** 
 644:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 645:tmk_core/common/action.c ****     // if this event is a layer action, update the leds
 646:tmk_core/common/action.c ****     switch (action.kind.id) {
 647:tmk_core/common/action.c ****         case ACT_LAYER:
 648:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 649:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 650:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 651:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 652:tmk_core/common/action.c **** #    endif
 653:tmk_core/common/action.c ****             led_set(host_keyboard_leds());
 654:tmk_core/common/action.c ****             break;
 655:tmk_core/common/action.c ****         default:
 656:tmk_core/common/action.c ****             break;
 657:tmk_core/common/action.c ****     }
 658:tmk_core/common/action.c **** #endif
 659:tmk_core/common/action.c **** 
 660:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 661:tmk_core/common/action.c **** #    ifdef RETRO_TAPPING
 662:tmk_core/common/action.c ****     if (!is_tap_action(action)) {
 663:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 664:tmk_core/common/action.c ****     } else {
 665:tmk_core/common/action.c ****         if (event.pressed) {
 666:tmk_core/common/action.c ****             if (tap_count > 0) {
 667:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 668:tmk_core/common/action.c ****             } else {
 669:tmk_core/common/action.c ****             }
 670:tmk_core/common/action.c ****         } else {
 671:tmk_core/common/action.c ****             if (tap_count > 0) {
 672:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 673:tmk_core/common/action.c ****             } else {
 674:tmk_core/common/action.c ****                 if (retro_tapping_counter == 2) {
 675:tmk_core/common/action.c ****                     tap_code(action.layer_tap.code);
 676:tmk_core/common/action.c ****                 }
 677:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 678:tmk_core/common/action.c ****             }
 679:tmk_core/common/action.c ****         }
 680:tmk_core/common/action.c ****     }
 681:tmk_core/common/action.c **** #    endif
 682:tmk_core/common/action.c **** #endif
 683:tmk_core/common/action.c **** 
 684:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 685:tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 686:tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 687:tmk_core/common/action.c ****      */
 688:tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED)) {
 689:tmk_core/common/action.c ****         record->event.pressed = false;
 690:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 691:tmk_core/common/action.c ****         process_record(record);
 692:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 693:tmk_core/common/action.c ****     }
 694:tmk_core/common/action.c **** #endif
 695:tmk_core/common/action.c **** }
 696:tmk_core/common/action.c **** 
 697:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 698:tmk_core/common/action.c ****  *
 699:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 700:tmk_core/common/action.c ****  */
 701:tmk_core/common/action.c **** void register_code(uint8_t code) {
 158              		.loc 1 701 34 is_stmt 1 view -0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 702:tmk_core/common/action.c ****     if (code == KC_NO) {
 162              		.loc 1 702 5 view .LVU24
 701:tmk_core/common/action.c ****     if (code == KC_NO) {
 163              		.loc 1 701 34 is_stmt 0 view .LVU25
 164 0000 10B5     		push	{r4, lr}
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 4, -8
 167              		.cfi_offset 14, -4
 701:tmk_core/common/action.c ****     if (code == KC_NO) {
 168              		.loc 1 701 34 view .LVU26
 169 0002 041E     		subs	r4, r0, #0
 170              		.loc 1 702 8 view .LVU27
 171 0004 13D0     		beq	.L5
 703:tmk_core/common/action.c ****         return;
 704:tmk_core/common/action.c ****     }
 705:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 706:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 172              		.loc 1 706 10 is_stmt 1 view .LVU28
 173              		.loc 1 706 13 is_stmt 0 view .LVU29
 174 0006 8228     		cmp	r0, #130
 175 0008 12D1     		bne	.L8
 707:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 708:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 709:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK)) return;
 176              		.loc 1 709 9 is_stmt 1 view .LVU30
 177              		.loc 1 709 13 is_stmt 0 view .LVU31
 178 000a FFF7FEFF 		bl	host_keyboard_leds
 179              	.LVL9:
 180              		.loc 1 709 12 view .LVU32
 181 000e 8307     		lsls	r3, r0, #30
 182 0010 0DD4     		bmi	.L5
 710:tmk_core/common/action.c **** #    endif
 711:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 183              		.loc 1 711 9 is_stmt 1 view .LVU33
 184 0012 3920     		movs	r0, #57
 185 0014 FFF7FEFF 		bl	add_key
 186              	.LVL10:
 712:tmk_core/common/action.c ****         send_keyboard_report();
 187              		.loc 1 712 9 view .LVU34
 188 0018 FFF7FEFF 		bl	send_keyboard_report
 189              	.LVL11:
 713:tmk_core/common/action.c ****         wait_ms(100);
 190              		.loc 1 713 9 view .LVU35
 191              		.loc 1 713 9 view .LVU36
 192              		.loc 1 713 9 view .LVU37
 193 001c FA20     		movs	r0, #250
 194 001e 8000     		lsls	r0, r0, #2
 195 0020 FFF7FEFF 		bl	chThdSleep
 196              	.LVL12:
 714:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 197              		.loc 1 714 9 view .LVU38
 198 0024 3920     		movs	r0, #57
 199              	.L20:
 715:tmk_core/common/action.c ****         send_keyboard_report();
 716:tmk_core/common/action.c ****     }
 717:tmk_core/common/action.c **** 
 718:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 719:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 720:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_NUM_LOCK)) return;
 721:tmk_core/common/action.c **** #    endif
 722:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 723:tmk_core/common/action.c ****         send_keyboard_report();
 724:tmk_core/common/action.c ****         wait_ms(100);
 725:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 200              		.loc 1 725 9 is_stmt 0 view .LVU39
 201 0026 FFF7FEFF 		bl	del_key
 202              	.LVL13:
 203              	.L21:
 726:tmk_core/common/action.c ****         send_keyboard_report();
 204              		.loc 1 726 9 is_stmt 1 view .LVU40
 205 002a FFF7FEFF 		bl	send_keyboard_report
 206              	.LVL14:
 207              	.L5:
 727:tmk_core/common/action.c ****     }
 728:tmk_core/common/action.c **** 
 729:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 730:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 731:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK)) return;
 732:tmk_core/common/action.c **** #    endif
 733:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 734:tmk_core/common/action.c ****         send_keyboard_report();
 735:tmk_core/common/action.c ****         wait_ms(100);
 736:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 737:tmk_core/common/action.c ****         send_keyboard_report();
 738:tmk_core/common/action.c ****     }
 739:tmk_core/common/action.c **** #endif
 740:tmk_core/common/action.c **** 
 741:tmk_core/common/action.c ****     else if
 742:tmk_core/common/action.c ****         IS_KEY(code) {
 743:tmk_core/common/action.c ****             // TODO: should push command_proc out of this block?
 744:tmk_core/common/action.c ****             if (command_proc(code)) return;
 745:tmk_core/common/action.c **** 
 746:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 747:tmk_core/common/action.c **** /* TODO: remove
 748:tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 749:tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 750:tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 751:tmk_core/common/action.c **** 
 752:tmk_core/common/action.c ****             add_key(code);
 753:tmk_core/common/action.c ****             send_keyboard_report();
 754:tmk_core/common/action.c **** 
 755:tmk_core/common/action.c ****             set_mods(tmp_mods);
 756:tmk_core/common/action.c ****             send_keyboard_report();
 757:tmk_core/common/action.c ****             oneshot_cancel();
 758:tmk_core/common/action.c ****         } else
 759:tmk_core/common/action.c **** */
 760:tmk_core/common/action.c **** #endif
 761:tmk_core/common/action.c ****             {
 762:tmk_core/common/action.c ****                 // Force a new key press if the key is already pressed
 763:tmk_core/common/action.c ****                 // without this, keys with the same keycode, but different
 764:tmk_core/common/action.c ****                 // modifiers will be reported incorrectly, see issue #1708
 765:tmk_core/common/action.c ****                 if (is_key_pressed(keyboard_report, code)) {
 766:tmk_core/common/action.c ****                     del_key(code);
 767:tmk_core/common/action.c ****                     send_keyboard_report();
 768:tmk_core/common/action.c ****                 }
 769:tmk_core/common/action.c ****                 add_key(code);
 770:tmk_core/common/action.c ****                 send_keyboard_report();
 771:tmk_core/common/action.c ****             }
 772:tmk_core/common/action.c ****         }
 773:tmk_core/common/action.c ****     else if
 774:tmk_core/common/action.c ****         IS_MOD(code) {
 775:tmk_core/common/action.c ****             add_mods(MOD_BIT(code));
 776:tmk_core/common/action.c ****             send_keyboard_report();
 777:tmk_core/common/action.c ****         }
 778:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 779:tmk_core/common/action.c ****     else if
 780:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(KEYCODE2SYSTEM(code)); }
 781:tmk_core/common/action.c ****     else if
 782:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(KEYCODE2CONSUMER(code)); }
 783:tmk_core/common/action.c **** #endif
 784:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 785:tmk_core/common/action.c ****     else if
 786:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 787:tmk_core/common/action.c ****             mousekey_on(code);
 788:tmk_core/common/action.c ****             mousekey_send();
 789:tmk_core/common/action.c ****         }
 790:tmk_core/common/action.c **** #endif
 791:tmk_core/common/action.c **** }
 208              		.loc 1 791 1 is_stmt 0 view .LVU41
 209              		@ sp needed
 210 002e 10BD     		pop	{r4, pc}
 211              	.LVL15:
 212              	.L8:
 718:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 213              		.loc 1 718 10 is_stmt 1 view .LVU42
 718:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 214              		.loc 1 718 13 is_stmt 0 view .LVU43
 215 0030 8328     		cmp	r0, #131
 216 0032 0ED1     		bne	.L10
 720:tmk_core/common/action.c **** #    endif
 217              		.loc 1 720 9 is_stmt 1 view .LVU44
 720:tmk_core/common/action.c **** #    endif
 218              		.loc 1 720 13 is_stmt 0 view .LVU45
 219 0034 FFF7FEFF 		bl	host_keyboard_leds
 220              	.LVL16:
 720:tmk_core/common/action.c **** #    endif
 221              		.loc 1 720 12 view .LVU46
 222 0038 C307     		lsls	r3, r0, #31
 223 003a F8D4     		bmi	.L5
 722:tmk_core/common/action.c ****         send_keyboard_report();
 224              		.loc 1 722 9 is_stmt 1 view .LVU47
 225 003c 5320     		movs	r0, #83
 226 003e FFF7FEFF 		bl	add_key
 227              	.LVL17:
 723:tmk_core/common/action.c ****         wait_ms(100);
 228              		.loc 1 723 9 view .LVU48
 229 0042 FFF7FEFF 		bl	send_keyboard_report
 230              	.LVL18:
 724:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 231              		.loc 1 724 9 view .LVU49
 724:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 232              		.loc 1 724 9 view .LVU50
 724:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 233              		.loc 1 724 9 view .LVU51
 234 0046 FA20     		movs	r0, #250
 235 0048 8000     		lsls	r0, r0, #2
 236 004a FFF7FEFF 		bl	chThdSleep
 237              	.LVL19:
 725:tmk_core/common/action.c ****         send_keyboard_report();
 238              		.loc 1 725 9 view .LVU52
 239 004e 5320     		movs	r0, #83
 240 0050 E9E7     		b	.L20
 241              	.LVL20:
 242              	.L10:
 243              	.LBB20:
 244              	.LBI20:
 701:tmk_core/common/action.c ****     if (code == KC_NO) {
 245              		.loc 1 701 6 view .LVU53
 246              	.LBB21:
 729:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 247              		.loc 1 729 10 view .LVU54
 729:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 248              		.loc 1 729 13 is_stmt 0 view .LVU55
 249 0052 8428     		cmp	r0, #132
 250 0054 0ED1     		bne	.L11
 731:tmk_core/common/action.c **** #    endif
 251              		.loc 1 731 9 is_stmt 1 view .LVU56
 731:tmk_core/common/action.c **** #    endif
 252              		.loc 1 731 13 is_stmt 0 view .LVU57
 253 0056 FFF7FEFF 		bl	host_keyboard_leds
 254              	.LVL21:
 731:tmk_core/common/action.c **** #    endif
 255              		.loc 1 731 12 view .LVU58
 256 005a 4307     		lsls	r3, r0, #29
 257 005c E7D4     		bmi	.L5
 733:tmk_core/common/action.c ****         send_keyboard_report();
 258              		.loc 1 733 9 is_stmt 1 view .LVU59
 259 005e 4720     		movs	r0, #71
 260 0060 FFF7FEFF 		bl	add_key
 261              	.LVL22:
 734:tmk_core/common/action.c ****         wait_ms(100);
 262              		.loc 1 734 9 view .LVU60
 263 0064 FFF7FEFF 		bl	send_keyboard_report
 264              	.LVL23:
 735:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 265              		.loc 1 735 9 view .LVU61
 735:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 266              		.loc 1 735 9 view .LVU62
 735:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 267              		.loc 1 735 9 view .LVU63
 268 0068 FA20     		movs	r0, #250
 269 006a 8000     		lsls	r0, r0, #2
 270 006c FFF7FEFF 		bl	chThdSleep
 271              	.LVL24:
 736:tmk_core/common/action.c ****         send_keyboard_report();
 272              		.loc 1 736 9 view .LVU64
 273 0070 4720     		movs	r0, #71
 274 0072 D8E7     		b	.L20
 275              	.LVL25:
 276              	.L11:
 741:tmk_core/common/action.c ****         IS_KEY(code) {
 277              		.loc 1 741 10 view .LVU65
 742:tmk_core/common/action.c ****             // TODO: should push command_proc out of this block?
 278              		.loc 1 742 9 is_stmt 0 view .LVU66
 279 0074 031F     		subs	r3, r0, #4
 280 0076 DBB2     		uxtb	r3, r3
 281 0078 A02B     		cmp	r3, #160
 282 007a 13D8     		bhi	.L12
 744:tmk_core/common/action.c **** 
 283              		.loc 1 744 13 is_stmt 1 view .LVU67
 744:tmk_core/common/action.c **** 
 284              		.loc 1 744 17 is_stmt 0 view .LVU68
 285 007c FFF7FEFF 		bl	command_proc
 286              	.LVL26:
 744:tmk_core/common/action.c **** 
 287              		.loc 1 744 16 view .LVU69
 288 0080 0028     		cmp	r0, #0
 289 0082 D4D1     		bne	.L5
 765:tmk_core/common/action.c ****                     del_key(code);
 290              		.loc 1 765 17 is_stmt 1 view .LVU70
 765:tmk_core/common/action.c ****                     del_key(code);
 291              		.loc 1 765 21 is_stmt 0 view .LVU71
 292 0084 1C4B     		ldr	r3, .L22
 293 0086 2100     		movs	r1, r4
 294 0088 1868     		ldr	r0, [r3]
 295 008a FFF7FEFF 		bl	is_key_pressed
 296              	.LVL27:
 765:tmk_core/common/action.c ****                     del_key(code);
 297              		.loc 1 765 20 view .LVU72
 298 008e 0028     		cmp	r0, #0
 299 0090 04D0     		beq	.L13
 766:tmk_core/common/action.c ****                     send_keyboard_report();
 300              		.loc 1 766 21 is_stmt 1 view .LVU73
 301 0092 2000     		movs	r0, r4
 302 0094 FFF7FEFF 		bl	del_key
 303              	.LVL28:
 767:tmk_core/common/action.c ****                 }
 304              		.loc 1 767 21 view .LVU74
 305 0098 FFF7FEFF 		bl	send_keyboard_report
 306              	.LVL29:
 307              	.L13:
 769:tmk_core/common/action.c ****                 send_keyboard_report();
 308              		.loc 1 769 17 view .LVU75
 309 009c 2000     		movs	r0, r4
 310 009e FFF7FEFF 		bl	add_key
 311              	.LVL30:
 770:tmk_core/common/action.c ****             }
 312              		.loc 1 770 17 view .LVU76
 313 00a2 C2E7     		b	.L21
 314              	.LVL31:
 315              	.L12:
 773:tmk_core/common/action.c ****         IS_MOD(code) {
 316              		.loc 1 773 10 view .LVU77
 774:tmk_core/common/action.c ****             add_mods(MOD_BIT(code));
 317              		.loc 1 774 9 is_stmt 0 view .LVU78
 318 00a4 0300     		movs	r3, r0
 319 00a6 2033     		adds	r3, r3, #32
 320 00a8 DBB2     		uxtb	r3, r3
 321 00aa 072B     		cmp	r3, #7
 322 00ac 07D8     		bhi	.L14
 775:tmk_core/common/action.c ****             send_keyboard_report();
 323              		.loc 1 775 13 is_stmt 1 view .LVU79
 775:tmk_core/common/action.c ****             send_keyboard_report();
 324              		.loc 1 775 22 is_stmt 0 view .LVU80
 325 00ae 0723     		movs	r3, #7
 326 00b0 0120     		movs	r0, #1
 327              	.LVL32:
 775:tmk_core/common/action.c ****             send_keyboard_report();
 328              		.loc 1 775 22 view .LVU81
 329 00b2 1C40     		ands	r4, r3
 330              	.LVL33:
 775:tmk_core/common/action.c ****             send_keyboard_report();
 331              		.loc 1 775 22 view .LVU82
 332 00b4 A040     		lsls	r0, r0, r4
 775:tmk_core/common/action.c ****             send_keyboard_report();
 333              		.loc 1 775 13 view .LVU83
 334 00b6 C0B2     		uxtb	r0, r0
 335 00b8 FFF7FEFF 		bl	add_mods
 336              	.LVL34:
 776:tmk_core/common/action.c ****         }
 337              		.loc 1 776 13 is_stmt 1 view .LVU84
 338 00bc B5E7     		b	.L21
 339              	.LVL35:
 340              	.L14:
 779:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(KEYCODE2SYSTEM(code)); }
 341              		.loc 1 779 10 view .LVU85
 780:tmk_core/common/action.c ****     else if
 342              		.loc 1 780 9 is_stmt 0 view .LVU86
 343 00be 0300     		movs	r3, r0
 344 00c0 5B33     		adds	r3, r3, #91
 345 00c2 DBB2     		uxtb	r3, r3
 346 00c4 022B     		cmp	r3, #2
 347 00c6 04D8     		bhi	.L15
 780:tmk_core/common/action.c ****     else if
 348              		.loc 1 780 27 is_stmt 1 view .LVU87
 349              	.LVL36:
 350              	.LBB22:
 351              	.LBI22:
 352              		.file 3 "tmk_core/common/report.h"
   1:tmk_core/common/report.h **** /*
   2:tmk_core/common/report.h **** Copyright 2011,2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/report.h **** 
   4:tmk_core/common/report.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/report.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/report.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/report.h **** (at your option) any later version.
   8:tmk_core/common/report.h **** 
   9:tmk_core/common/report.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/report.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/report.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/report.h **** GNU General Public License for more details.
  13:tmk_core/common/report.h **** 
  14:tmk_core/common/report.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/report.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/report.h **** */
  17:tmk_core/common/report.h **** 
  18:tmk_core/common/report.h **** #pragma once
  19:tmk_core/common/report.h **** 
  20:tmk_core/common/report.h **** #include <stdint.h>
  21:tmk_core/common/report.h **** #include <stdbool.h>
  22:tmk_core/common/report.h **** #include "keycode.h"
  23:tmk_core/common/report.h **** 
  24:tmk_core/common/report.h **** // clang-format off
  25:tmk_core/common/report.h **** 
  26:tmk_core/common/report.h **** /* HID report IDs */
  27:tmk_core/common/report.h **** enum hid_report_ids {
  28:tmk_core/common/report.h ****     REPORT_ID_KEYBOARD = 1,
  29:tmk_core/common/report.h ****     REPORT_ID_MOUSE,
  30:tmk_core/common/report.h ****     REPORT_ID_SYSTEM,
  31:tmk_core/common/report.h ****     REPORT_ID_CONSUMER,
  32:tmk_core/common/report.h ****     REPORT_ID_NKRO
  33:tmk_core/common/report.h **** };
  34:tmk_core/common/report.h **** 
  35:tmk_core/common/report.h **** /* Mouse buttons */
  36:tmk_core/common/report.h **** enum mouse_buttons {
  37:tmk_core/common/report.h ****     MOUSE_BTN1 = (1 << 0),
  38:tmk_core/common/report.h ****     MOUSE_BTN2 = (1 << 1),
  39:tmk_core/common/report.h ****     MOUSE_BTN3 = (1 << 2),
  40:tmk_core/common/report.h ****     MOUSE_BTN4 = (1 << 3),
  41:tmk_core/common/report.h ****     MOUSE_BTN5 = (1 << 4)
  42:tmk_core/common/report.h **** };
  43:tmk_core/common/report.h **** 
  44:tmk_core/common/report.h **** /* Consumer Page (0x0C)
  45:tmk_core/common/report.h ****  *
  46:tmk_core/common/report.h ****  * See https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf#page=75
  47:tmk_core/common/report.h ****  */
  48:tmk_core/common/report.h **** enum consumer_usages {
  49:tmk_core/common/report.h ****     // 15.5 Display Controls (https://www.usb.org/sites/default/files/hutrr41_0.pdf)
  50:tmk_core/common/report.h ****     BRIGHTNESS_UP          = 0x06F,
  51:tmk_core/common/report.h ****     BRIGHTNESS_DOWN        = 0x070,
  52:tmk_core/common/report.h ****     // 15.7 Transport Controls
  53:tmk_core/common/report.h ****     TRANSPORT_RECORD       = 0x0B2,
  54:tmk_core/common/report.h ****     TRANSPORT_FAST_FORWARD = 0x0B3,
  55:tmk_core/common/report.h ****     TRANSPORT_REWIND       = 0x0B4,
  56:tmk_core/common/report.h ****     TRANSPORT_NEXT_TRACK   = 0x0B5,
  57:tmk_core/common/report.h ****     TRANSPORT_PREV_TRACK   = 0x0B6,
  58:tmk_core/common/report.h ****     TRANSPORT_STOP         = 0x0B7,
  59:tmk_core/common/report.h ****     TRANSPORT_EJECT        = 0x0B8,
  60:tmk_core/common/report.h ****     TRANSPORT_STOP_EJECT   = 0x0CC,
  61:tmk_core/common/report.h ****     TRANSPORT_PLAY_PAUSE   = 0x0CD,
  62:tmk_core/common/report.h ****     // 15.9.1 Audio Controls - Volume
  63:tmk_core/common/report.h ****     AUDIO_MUTE             = 0x0E2,
  64:tmk_core/common/report.h ****     AUDIO_VOL_UP           = 0x0E9,
  65:tmk_core/common/report.h ****     AUDIO_VOL_DOWN         = 0x0EA,
  66:tmk_core/common/report.h ****     // 15.15 Application Launch Buttons
  67:tmk_core/common/report.h ****     AL_CC_CONFIG           = 0x183,
  68:tmk_core/common/report.h ****     AL_EMAIL               = 0x18A,
  69:tmk_core/common/report.h ****     AL_CALCULATOR          = 0x192,
  70:tmk_core/common/report.h ****     AL_LOCAL_BROWSER       = 0x194,
  71:tmk_core/common/report.h ****     AL_LOCK                = 0x19E,
  72:tmk_core/common/report.h ****     // 15.16 Generic GUI Application Controls
  73:tmk_core/common/report.h ****     AC_MINIMIZE            = 0x206,
  74:tmk_core/common/report.h ****     AC_SEARCH              = 0x221,
  75:tmk_core/common/report.h ****     AC_HOME                = 0x223,
  76:tmk_core/common/report.h ****     AC_BACK                = 0x224,
  77:tmk_core/common/report.h ****     AC_FORWARD             = 0x225,
  78:tmk_core/common/report.h ****     AC_STOP                = 0x226,
  79:tmk_core/common/report.h ****     AC_REFRESH             = 0x227,
  80:tmk_core/common/report.h ****     AC_BOOKMARKS           = 0x22A
  81:tmk_core/common/report.h **** };
  82:tmk_core/common/report.h **** 
  83:tmk_core/common/report.h **** /* Generic Desktop Page (0x01)
  84:tmk_core/common/report.h ****  *
  85:tmk_core/common/report.h ****  * See https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf#page=26
  86:tmk_core/common/report.h ****  */
  87:tmk_core/common/report.h **** enum desktop_usages {
  88:tmk_core/common/report.h ****     // 4.5.1 System Controls - Power Controls
  89:tmk_core/common/report.h ****     SYSTEM_POWER_DOWN = 0x81,
  90:tmk_core/common/report.h ****     SYSTEM_SLEEP      = 0x82,
  91:tmk_core/common/report.h ****     SYSTEM_WAKE_UP    = 0x83
  92:tmk_core/common/report.h **** };
  93:tmk_core/common/report.h **** 
  94:tmk_core/common/report.h **** // clang-format on
  95:tmk_core/common/report.h **** 
  96:tmk_core/common/report.h **** #define NKRO_SHARED_EP
  97:tmk_core/common/report.h **** /* key report size(NKRO or boot mode) */
  98:tmk_core/common/report.h **** #if defined(NKRO_ENABLE)
  99:tmk_core/common/report.h **** #    if defined(PROTOCOL_LUFA) || defined(PROTOCOL_CHIBIOS)
 100:tmk_core/common/report.h **** #        include "protocol/usb_descriptor.h"
 101:tmk_core/common/report.h **** #        define KEYBOARD_REPORT_BITS (SHARED_EPSIZE - 2)
 102:tmk_core/common/report.h **** #    elif defined(PROTOCOL_ARM_ATSAM)
 103:tmk_core/common/report.h **** #        include "protocol/arm_atsam/usb/udi_device_epsize.h"
 104:tmk_core/common/report.h **** #        define KEYBOARD_REPORT_BITS (NKRO_EPSIZE - 1)
 105:tmk_core/common/report.h **** #        undef NKRO_SHARED_EP
 106:tmk_core/common/report.h **** #        undef MOUSE_SHARED_EP
 107:tmk_core/common/report.h **** #    else
 108:tmk_core/common/report.h **** #        error "NKRO not supported with this protocol"
 109:tmk_core/common/report.h **** #    endif
 110:tmk_core/common/report.h **** #endif
 111:tmk_core/common/report.h **** 
 112:tmk_core/common/report.h **** #ifdef KEYBOARD_SHARED_EP
 113:tmk_core/common/report.h **** #    define KEYBOARD_REPORT_SIZE 9
 114:tmk_core/common/report.h **** #else
 115:tmk_core/common/report.h **** #    define KEYBOARD_REPORT_SIZE 8
 116:tmk_core/common/report.h **** #endif
 117:tmk_core/common/report.h **** 
 118:tmk_core/common/report.h **** #define KEYBOARD_REPORT_KEYS 6
 119:tmk_core/common/report.h **** 
 120:tmk_core/common/report.h **** /* VUSB hardcodes keyboard and mouse+extrakey only */
 121:tmk_core/common/report.h **** #if defined(PROTOCOL_VUSB)
 122:tmk_core/common/report.h **** #    undef KEYBOARD_SHARED_EP
 123:tmk_core/common/report.h **** #    undef MOUSE_SHARED_EP
 124:tmk_core/common/report.h **** #endif
 125:tmk_core/common/report.h **** 
 126:tmk_core/common/report.h **** #ifdef __cplusplus
 127:tmk_core/common/report.h **** extern "C" {
 128:tmk_core/common/report.h **** #endif
 129:tmk_core/common/report.h **** 
 130:tmk_core/common/report.h **** /*
 131:tmk_core/common/report.h ****  * keyboard report is 8-byte array retains state of 8 modifiers and 6 keys.
 132:tmk_core/common/report.h ****  *
 133:tmk_core/common/report.h ****  * byte |0       |1       |2       |3       |4       |5       |6       |7
 134:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------
 135:tmk_core/common/report.h ****  * desc |mods    |reserved|keys[0] |keys[1] |keys[2] |keys[3] |keys[4] |keys[5]
 136:tmk_core/common/report.h ****  *
 137:tmk_core/common/report.h ****  * It is exended to 16 bytes to retain 120keys+8mods when NKRO mode.
 138:tmk_core/common/report.h ****  *
 139:tmk_core/common/report.h ****  * byte |0       |1       |2       |3       |4       |5       |6       |7        ... |15
 140:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------     +--------
 141:tmk_core/common/report.h ****  * desc |mods    |bits[0] |bits[1] |bits[2] |bits[3] |bits[4] |bits[5] |bits[6]  ... |bit[14]
 142:tmk_core/common/report.h ****  *
 143:tmk_core/common/report.h ****  * mods retains state of 8 modifiers.
 144:tmk_core/common/report.h ****  *
 145:tmk_core/common/report.h ****  *  bit |0       |1       |2       |3       |4       |5       |6       |7
 146:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------
 147:tmk_core/common/report.h ****  * desc |Lcontrol|Lshift  |Lalt    |Lgui    |Rcontrol|Rshift  |Ralt    |Rgui
 148:tmk_core/common/report.h ****  *
 149:tmk_core/common/report.h ****  */
 150:tmk_core/common/report.h **** typedef union {
 151:tmk_core/common/report.h ****     uint8_t raw[KEYBOARD_REPORT_SIZE];
 152:tmk_core/common/report.h ****     struct {
 153:tmk_core/common/report.h **** #ifdef KEYBOARD_SHARED_EP
 154:tmk_core/common/report.h ****         uint8_t report_id;
 155:tmk_core/common/report.h **** #endif
 156:tmk_core/common/report.h ****         uint8_t mods;
 157:tmk_core/common/report.h ****         uint8_t reserved;
 158:tmk_core/common/report.h ****         uint8_t keys[KEYBOARD_REPORT_KEYS];
 159:tmk_core/common/report.h ****     };
 160:tmk_core/common/report.h **** #ifdef NKRO_ENABLE
 161:tmk_core/common/report.h ****     struct nkro_report {
 162:tmk_core/common/report.h **** #    ifdef NKRO_SHARED_EP
 163:tmk_core/common/report.h ****         uint8_t report_id;
 164:tmk_core/common/report.h **** #    endif
 165:tmk_core/common/report.h ****         uint8_t mods;
 166:tmk_core/common/report.h ****         uint8_t bits[KEYBOARD_REPORT_BITS];
 167:tmk_core/common/report.h ****     } nkro;
 168:tmk_core/common/report.h **** #endif
 169:tmk_core/common/report.h **** } __attribute__((packed)) report_keyboard_t;
 170:tmk_core/common/report.h **** 
 171:tmk_core/common/report.h **** typedef struct {
 172:tmk_core/common/report.h ****     uint8_t  report_id;
 173:tmk_core/common/report.h ****     uint16_t usage;
 174:tmk_core/common/report.h **** } __attribute__((packed)) report_extra_t;
 175:tmk_core/common/report.h **** 
 176:tmk_core/common/report.h **** typedef struct {
 177:tmk_core/common/report.h **** #ifdef MOUSE_SHARED_EP
 178:tmk_core/common/report.h ****     uint8_t report_id;
 179:tmk_core/common/report.h **** #endif
 180:tmk_core/common/report.h ****     uint8_t buttons;
 181:tmk_core/common/report.h ****     int8_t  x;
 182:tmk_core/common/report.h ****     int8_t  y;
 183:tmk_core/common/report.h ****     int8_t  v;
 184:tmk_core/common/report.h ****     int8_t  h;
 185:tmk_core/common/report.h **** } __attribute__((packed)) report_mouse_t;
 186:tmk_core/common/report.h **** 
 187:tmk_core/common/report.h **** /* keycode to system usage */
 188:tmk_core/common/report.h **** static inline uint16_t KEYCODE2SYSTEM(uint8_t key) {
 353              		.loc 3 188 24 view .LVU88
 354              	.LBE22:
 355              	.LBE21:
 356              	.LBE20:
 189:tmk_core/common/report.h ****     switch (key) {
 357              		.loc 3 189 5 view .LVU89
 358              	.LBB26:
 359              	.LBB24:
 780:tmk_core/common/action.c ****     else if
 360              		.loc 1 780 27 is_stmt 0 view .LVU90
 361 00c8 0C4A     		ldr	r2, .L22+4
 362 00ca D05C     		ldrb	r0, [r2, r3]
 363              	.LVL37:
 780:tmk_core/common/action.c ****     else if
 364              		.loc 1 780 27 view .LVU91
 365 00cc FFF7FEFF 		bl	host_system_send
 366              	.LVL38:
 367 00d0 ADE7     		b	.L5
 368              	.LVL39:
 369              	.L15:
 781:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(KEYCODE2CONSUMER(code)); }
 370              		.loc 1 781 10 is_stmt 1 view .LVU92
 782:tmk_core/common/action.c **** #endif
 371              		.loc 1 782 9 is_stmt 0 view .LVU93
 372 00d2 0300     		movs	r3, r0
 373 00d4 5833     		adds	r3, r3, #88
 374 00d6 DBB2     		uxtb	r3, r3
 375 00d8 162B     		cmp	r3, #22
 376 00da 05D8     		bhi	.L16
 782:tmk_core/common/action.c **** #endif
 377              		.loc 1 782 29 is_stmt 1 view .LVU94
 378              	.LVL40:
 379              	.LBB23:
 380              	.LBI23:
 190:tmk_core/common/report.h ****         case KC_SYSTEM_POWER:
 191:tmk_core/common/report.h ****             return SYSTEM_POWER_DOWN;
 192:tmk_core/common/report.h ****         case KC_SYSTEM_SLEEP:
 193:tmk_core/common/report.h ****             return SYSTEM_SLEEP;
 194:tmk_core/common/report.h ****         case KC_SYSTEM_WAKE:
 195:tmk_core/common/report.h ****             return SYSTEM_WAKE_UP;
 196:tmk_core/common/report.h ****         default:
 197:tmk_core/common/report.h ****             return 0;
 198:tmk_core/common/report.h ****     }
 199:tmk_core/common/report.h **** }
 200:tmk_core/common/report.h **** 
 201:tmk_core/common/report.h **** /* keycode to consumer usage */
 202:tmk_core/common/report.h **** static inline uint16_t KEYCODE2CONSUMER(uint8_t key) {
 381              		.loc 3 202 24 view .LVU95
 382              	.LBE23:
 383              	.LBE24:
 384              	.LBE26:
 203:tmk_core/common/report.h ****     switch (key) {
 385              		.loc 3 203 5 view .LVU96
 386              	.LBB27:
 387              	.LBB25:
 782:tmk_core/common/action.c **** #endif
 388              		.loc 1 782 29 is_stmt 0 view .LVU97
 389 00dc 084A     		ldr	r2, .L22+8
 390 00de 5B00     		lsls	r3, r3, #1
 391 00e0 985A     		ldrh	r0, [r3, r2]
 392              	.LVL41:
 782:tmk_core/common/action.c **** #endif
 393              		.loc 1 782 29 view .LVU98
 394 00e2 FFF7FEFF 		bl	host_consumer_send
 395              	.LVL42:
 396 00e6 A2E7     		b	.L5
 397              	.LVL43:
 398              	.L16:
 785:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 399              		.loc 1 785 10 is_stmt 1 view .LVU99
 786:tmk_core/common/action.c ****             mousekey_on(code);
 400              		.loc 1 786 9 is_stmt 0 view .LVU100
 401 00e8 EF28     		cmp	r0, #239
 402 00ea A0D9     		bls	.L5
 787:tmk_core/common/action.c ****             mousekey_send();
 403              		.loc 1 787 13 is_stmt 1 view .LVU101
 404 00ec FFF7FEFF 		bl	mousekey_on
 405              	.LVL44:
 788:tmk_core/common/action.c ****         }
 406              		.loc 1 788 13 view .LVU102
 407 00f0 FFF7FEFF 		bl	mousekey_send
 408              	.LVL45:
 409 00f4 9BE7     		b	.L5
 410              	.L23:
 411 00f6 C046     		.align	2
 412              	.L22:
 413 00f8 00000000 		.word	keyboard_report
 414 00fc 00000000 		.word	.LANCHOR0
 415 0100 00000000 		.word	.LANCHOR1
 416              	.LBE25:
 417              	.LBE27:
 418              		.cfi_endproc
 419              	.LFE202:
 421              		.section	.text.unregister_code,"ax",%progbits
 422              		.align	1
 423              		.global	unregister_code
 424              		.syntax unified
 425              		.code	16
 426              		.thumb_func
 427              		.fpu softvfp
 429              	unregister_code:
 430              	.LVL46:
 431              	.LFB203:
 792:tmk_core/common/action.c **** 
 793:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 794:tmk_core/common/action.c ****  *
 795:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 796:tmk_core/common/action.c ****  */
 797:tmk_core/common/action.c **** void unregister_code(uint8_t code) {
 432              		.loc 1 797 36 view -0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 798:tmk_core/common/action.c ****     if (code == KC_NO) {
 436              		.loc 1 798 5 view .LVU104
 797:tmk_core/common/action.c ****     if (code == KC_NO) {
 437              		.loc 1 797 36 is_stmt 0 view .LVU105
 438 0000 10B5     		push	{r4, lr}
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 4, -8
 441              		.cfi_offset 14, -4
 442              		.loc 1 798 8 view .LVU106
 443 0002 0028     		cmp	r0, #0
 444 0004 0FD0     		beq	.L24
 799:tmk_core/common/action.c ****         return;
 800:tmk_core/common/action.c ****     }
 801:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 802:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 445              		.loc 1 802 10 is_stmt 1 view .LVU107
 446              		.loc 1 802 13 is_stmt 0 view .LVU108
 447 0006 8228     		cmp	r0, #130
 448 0008 0ED1     		bne	.L27
 803:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 804:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 805:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK))) return;
 449              		.loc 1 805 9 is_stmt 1 view .LVU109
 450              		.loc 1 805 15 is_stmt 0 view .LVU110
 451 000a FFF7FEFF 		bl	host_keyboard_leds
 452              	.LVL47:
 453              		.loc 1 805 12 view .LVU111
 454 000e 8307     		lsls	r3, r0, #30
 455 0010 09D5     		bpl	.L24
 806:tmk_core/common/action.c **** #    endif
 807:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 456              		.loc 1 807 9 is_stmt 1 view .LVU112
 457 0012 3920     		movs	r0, #57
 458 0014 FFF7FEFF 		bl	add_key
 459              	.LVL48:
 808:tmk_core/common/action.c ****         send_keyboard_report();
 460              		.loc 1 808 9 view .LVU113
 461 0018 FFF7FEFF 		bl	send_keyboard_report
 462              	.LVL49:
 809:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 463              		.loc 1 809 9 view .LVU114
 464 001c 3920     		movs	r0, #57
 465              	.L44:
 810:tmk_core/common/action.c ****         send_keyboard_report();
 811:tmk_core/common/action.c ****     }
 812:tmk_core/common/action.c **** 
 813:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 814:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 815:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_NUM_LOCK))) return;
 816:tmk_core/common/action.c **** #    endif
 817:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 818:tmk_core/common/action.c ****         send_keyboard_report();
 819:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 466              		.loc 1 819 9 is_stmt 0 view .LVU115
 467 001e FFF7FEFF 		bl	del_key
 468              	.LVL50:
 469              	.L45:
 820:tmk_core/common/action.c ****         send_keyboard_report();
 470              		.loc 1 820 9 is_stmt 1 view .LVU116
 471 0022 FFF7FEFF 		bl	send_keyboard_report
 472              	.LVL51:
 473              	.L24:
 821:tmk_core/common/action.c ****     }
 822:tmk_core/common/action.c **** 
 823:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 824:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 825:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK))) return;
 826:tmk_core/common/action.c **** #    endif
 827:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 828:tmk_core/common/action.c ****         send_keyboard_report();
 829:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 830:tmk_core/common/action.c ****         send_keyboard_report();
 831:tmk_core/common/action.c ****     }
 832:tmk_core/common/action.c **** #endif
 833:tmk_core/common/action.c **** 
 834:tmk_core/common/action.c ****     else if
 835:tmk_core/common/action.c ****         IS_KEY(code) {
 836:tmk_core/common/action.c ****             del_key(code);
 837:tmk_core/common/action.c ****             send_keyboard_report();
 838:tmk_core/common/action.c ****         }
 839:tmk_core/common/action.c ****     else if
 840:tmk_core/common/action.c ****         IS_MOD(code) {
 841:tmk_core/common/action.c ****             del_mods(MOD_BIT(code));
 842:tmk_core/common/action.c ****             send_keyboard_report();
 843:tmk_core/common/action.c ****         }
 844:tmk_core/common/action.c ****     else if
 845:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(0); }
 846:tmk_core/common/action.c ****     else if
 847:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(0); }
 848:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 849:tmk_core/common/action.c ****     else if
 850:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 851:tmk_core/common/action.c ****             mousekey_off(code);
 852:tmk_core/common/action.c ****             mousekey_send();
 853:tmk_core/common/action.c ****         }
 854:tmk_core/common/action.c **** #endif
 855:tmk_core/common/action.c **** }
 474              		.loc 1 855 1 is_stmt 0 view .LVU117
 475              		@ sp needed
 476 0026 10BD     		pop	{r4, pc}
 477              	.LVL52:
 478              	.L27:
 813:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 479              		.loc 1 813 10 is_stmt 1 view .LVU118
 813:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 480              		.loc 1 813 13 is_stmt 0 view .LVU119
 481 0028 8328     		cmp	r0, #131
 482 002a 0AD1     		bne	.L29
 815:tmk_core/common/action.c **** #    endif
 483              		.loc 1 815 9 is_stmt 1 view .LVU120
 815:tmk_core/common/action.c **** #    endif
 484              		.loc 1 815 15 is_stmt 0 view .LVU121
 485 002c FFF7FEFF 		bl	host_keyboard_leds
 486              	.LVL53:
 815:tmk_core/common/action.c **** #    endif
 487              		.loc 1 815 12 view .LVU122
 488 0030 C307     		lsls	r3, r0, #31
 489 0032 F8D5     		bpl	.L24
 817:tmk_core/common/action.c ****         send_keyboard_report();
 490              		.loc 1 817 9 is_stmt 1 view .LVU123
 491 0034 5320     		movs	r0, #83
 492 0036 FFF7FEFF 		bl	add_key
 493              	.LVL54:
 818:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 494              		.loc 1 818 9 view .LVU124
 495 003a FFF7FEFF 		bl	send_keyboard_report
 496              	.LVL55:
 819:tmk_core/common/action.c ****         send_keyboard_report();
 497              		.loc 1 819 9 view .LVU125
 498 003e 5320     		movs	r0, #83
 499 0040 EDE7     		b	.L44
 500              	.LVL56:
 501              	.L29:
 502              	.LBB30:
 503              	.LBI30:
 797:tmk_core/common/action.c ****     if (code == KC_NO) {
 504              		.loc 1 797 6 view .LVU126
 505              	.LBB31:
 823:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 506              		.loc 1 823 10 view .LVU127
 823:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 507              		.loc 1 823 13 is_stmt 0 view .LVU128
 508 0042 8428     		cmp	r0, #132
 509 0044 0AD1     		bne	.L30
 825:tmk_core/common/action.c **** #    endif
 510              		.loc 1 825 9 is_stmt 1 view .LVU129
 825:tmk_core/common/action.c **** #    endif
 511              		.loc 1 825 15 is_stmt 0 view .LVU130
 512 0046 FFF7FEFF 		bl	host_keyboard_leds
 513              	.LVL57:
 825:tmk_core/common/action.c **** #    endif
 514              		.loc 1 825 12 view .LVU131
 515 004a 4307     		lsls	r3, r0, #29
 516 004c EBD5     		bpl	.L24
 827:tmk_core/common/action.c ****         send_keyboard_report();
 517              		.loc 1 827 9 is_stmt 1 view .LVU132
 518 004e 4720     		movs	r0, #71
 519 0050 FFF7FEFF 		bl	add_key
 520              	.LVL58:
 828:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 521              		.loc 1 828 9 view .LVU133
 522 0054 FFF7FEFF 		bl	send_keyboard_report
 523              	.LVL59:
 829:tmk_core/common/action.c ****         send_keyboard_report();
 524              		.loc 1 829 9 view .LVU134
 525 0058 4720     		movs	r0, #71
 526 005a E0E7     		b	.L44
 527              	.LVL60:
 528              	.L30:
 834:tmk_core/common/action.c ****         IS_KEY(code) {
 529              		.loc 1 834 10 view .LVU135
 835:tmk_core/common/action.c ****             del_key(code);
 530              		.loc 1 835 9 is_stmt 0 view .LVU136
 531 005c 031F     		subs	r3, r0, #4
 532 005e DBB2     		uxtb	r3, r3
 533 0060 A02B     		cmp	r3, #160
 534 0062 DCD9     		bls	.L44
 839:tmk_core/common/action.c ****         IS_MOD(code) {
 535              		.loc 1 839 10 is_stmt 1 view .LVU137
 840:tmk_core/common/action.c ****             del_mods(MOD_BIT(code));
 536              		.loc 1 840 9 is_stmt 0 view .LVU138
 537 0064 0300     		movs	r3, r0
 538 0066 2033     		adds	r3, r3, #32
 539 0068 DBB2     		uxtb	r3, r3
 540 006a 072B     		cmp	r3, #7
 541 006c 07D8     		bhi	.L32
 841:tmk_core/common/action.c ****             send_keyboard_report();
 542              		.loc 1 841 13 is_stmt 1 view .LVU139
 841:tmk_core/common/action.c ****             send_keyboard_report();
 543              		.loc 1 841 22 is_stmt 0 view .LVU140
 544 006e 0723     		movs	r3, #7
 545 0070 0340     		ands	r3, r0
 546 0072 0120     		movs	r0, #1
 547              	.LVL61:
 841:tmk_core/common/action.c ****             send_keyboard_report();
 548              		.loc 1 841 22 view .LVU141
 549 0074 9840     		lsls	r0, r0, r3
 841:tmk_core/common/action.c ****             send_keyboard_report();
 550              		.loc 1 841 13 view .LVU142
 551 0076 C0B2     		uxtb	r0, r0
 552 0078 FFF7FEFF 		bl	del_mods
 553              	.LVL62:
 842:tmk_core/common/action.c ****         }
 554              		.loc 1 842 13 is_stmt 1 view .LVU143
 555 007c D1E7     		b	.L45
 556              	.LVL63:
 557              	.L32:
 844:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(0); }
 558              		.loc 1 844 10 view .LVU144
 845:tmk_core/common/action.c ****     else if
 559              		.loc 1 845 9 is_stmt 0 view .LVU145
 560 007e 0300     		movs	r3, r0
 561 0080 5B33     		adds	r3, r3, #91
 562 0082 DBB2     		uxtb	r3, r3
 563 0084 022B     		cmp	r3, #2
 564 0086 03D8     		bhi	.L33
 845:tmk_core/common/action.c ****     else if
 565              		.loc 1 845 27 is_stmt 1 view .LVU146
 566 0088 0020     		movs	r0, #0
 567              	.LVL64:
 845:tmk_core/common/action.c ****     else if
 568              		.loc 1 845 27 is_stmt 0 view .LVU147
 569 008a FFF7FEFF 		bl	host_system_send
 570              	.LVL65:
 571 008e CAE7     		b	.L24
 572              	.LVL66:
 573              	.L33:
 846:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(0); }
 574              		.loc 1 846 10 is_stmt 1 view .LVU148
 847:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 575              		.loc 1 847 9 is_stmt 0 view .LVU149
 576 0090 0300     		movs	r3, r0
 577 0092 5833     		adds	r3, r3, #88
 578 0094 DBB2     		uxtb	r3, r3
 579 0096 162B     		cmp	r3, #22
 580 0098 03D8     		bhi	.L34
 847:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 581              		.loc 1 847 29 is_stmt 1 view .LVU150
 582 009a 0020     		movs	r0, #0
 583              	.LVL67:
 847:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 584              		.loc 1 847 29 is_stmt 0 view .LVU151
 585 009c FFF7FEFF 		bl	host_consumer_send
 586              	.LVL68:
 587 00a0 C1E7     		b	.L24
 588              	.LVL69:
 589              	.L34:
 849:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 590              		.loc 1 849 10 is_stmt 1 view .LVU152
 850:tmk_core/common/action.c ****             mousekey_off(code);
 591              		.loc 1 850 9 is_stmt 0 view .LVU153
 592 00a2 EF28     		cmp	r0, #239
 593 00a4 BFD9     		bls	.L24
 851:tmk_core/common/action.c ****             mousekey_send();
 594              		.loc 1 851 13 is_stmt 1 view .LVU154
 595 00a6 FFF7FEFF 		bl	mousekey_off
 596              	.LVL70:
 852:tmk_core/common/action.c ****         }
 597              		.loc 1 852 13 view .LVU155
 598 00aa FFF7FEFF 		bl	mousekey_send
 599              	.LVL71:
 600 00ae BAE7     		b	.L24
 601              	.LBE31:
 602              	.LBE30:
 603              		.cfi_endproc
 604              	.LFE203:
 606              		.section	.text.tap_code,"ax",%progbits
 607              		.align	1
 608              		.global	tap_code
 609              		.syntax unified
 610              		.code	16
 611              		.thumb_func
 612              		.fpu softvfp
 614              	tap_code:
 615              	.LVL72:
 616              	.LFB204:
 856:tmk_core/common/action.c **** 
 857:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 858:tmk_core/common/action.c ****  *
 859:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 860:tmk_core/common/action.c ****  */
 861:tmk_core/common/action.c **** void tap_code(uint8_t code) {
 617              		.loc 1 861 29 view -0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 862:tmk_core/common/action.c ****     register_code(code);
 621              		.loc 1 862 5 view .LVU157
 861:tmk_core/common/action.c ****     register_code(code);
 622              		.loc 1 861 29 is_stmt 0 view .LVU158
 623 0000 10B5     		push	{r4, lr}
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 4, -8
 626              		.cfi_offset 14, -4
 861:tmk_core/common/action.c ****     register_code(code);
 627              		.loc 1 861 29 view .LVU159
 628 0002 0400     		movs	r4, r0
 629              		.loc 1 862 5 view .LVU160
 630 0004 FFF7FEFF 		bl	register_code
 631              	.LVL73:
 863:tmk_core/common/action.c ****     if (code == KC_CAPS) {
 632              		.loc 1 863 5 is_stmt 1 view .LVU161
 864:tmk_core/common/action.c ****         wait_ms(TAP_HOLD_CAPS_DELAY);
 865:tmk_core/common/action.c ****     } else {
 866:tmk_core/common/action.c ****         wait_ms(TAP_CODE_DELAY);
 633              		.loc 1 866 9 is_stmt 0 view .LVU162
 634 0008 0120     		movs	r0, #1
 863:tmk_core/common/action.c ****     if (code == KC_CAPS) {
 635              		.loc 1 863 8 view .LVU163
 636 000a 392C     		cmp	r4, #57
 637 000c 01D1     		bne	.L49
 864:tmk_core/common/action.c ****         wait_ms(TAP_HOLD_CAPS_DELAY);
 638              		.loc 1 864 9 is_stmt 1 discriminator 1 view .LVU164
 864:tmk_core/common/action.c ****         wait_ms(TAP_HOLD_CAPS_DELAY);
 639              		.loc 1 864 9 discriminator 1 view .LVU165
 864:tmk_core/common/action.c ****         wait_ms(TAP_HOLD_CAPS_DELAY);
 640              		.loc 1 864 9 discriminator 1 view .LVU166
 641 000e C820     		movs	r0, #200
 642 0010 8000     		lsls	r0, r0, #2
 643              	.L49:
 644              		.loc 1 866 9 is_stmt 0 discriminator 2 view .LVU167
 645 0012 FFF7FEFF 		bl	chThdSleep
 646              	.LVL74:
 867:tmk_core/common/action.c ****     }
 868:tmk_core/common/action.c ****     unregister_code(code);
 647              		.loc 1 868 5 is_stmt 1 discriminator 2 view .LVU168
 648 0016 2000     		movs	r0, r4
 649 0018 FFF7FEFF 		bl	unregister_code
 650              	.LVL75:
 869:tmk_core/common/action.c **** }
 651              		.loc 1 869 1 is_stmt 0 discriminator 2 view .LVU169
 652              		@ sp needed
 653 001c 10BD     		pop	{r4, pc}
 654              		.cfi_endproc
 655              	.LFE204:
 657              		.section	.text.register_mods,"ax",%progbits
 658              		.align	1
 659              		.global	register_mods
 660              		.syntax unified
 661              		.code	16
 662              		.thumb_func
 663              		.fpu softvfp
 665              	register_mods:
 666              	.LVL76:
 667              	.LFB205:
 870:tmk_core/common/action.c **** 
 871:tmk_core/common/action.c **** /** \brief Adds the given physically pressed modifiers and sends a keyboard report immediately.
 872:tmk_core/common/action.c ****  *
 873:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 874:tmk_core/common/action.c ****  */
 875:tmk_core/common/action.c **** void register_mods(uint8_t mods) {
 668              		.loc 1 875 34 is_stmt 1 view -0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 876:tmk_core/common/action.c ****     if (mods) {
 672              		.loc 1 876 5 view .LVU171
 875:tmk_core/common/action.c ****     if (mods) {
 673              		.loc 1 875 34 is_stmt 0 view .LVU172
 674 0000 10B5     		push	{r4, lr}
 675              		.cfi_def_cfa_offset 8
 676              		.cfi_offset 4, -8
 677              		.cfi_offset 14, -4
 678              		.loc 1 876 8 view .LVU173
 679 0002 0028     		cmp	r0, #0
 680 0004 03D0     		beq	.L50
 877:tmk_core/common/action.c ****         add_mods(mods);
 681              		.loc 1 877 9 is_stmt 1 view .LVU174
 682 0006 FFF7FEFF 		bl	add_mods
 683              	.LVL77:
 878:tmk_core/common/action.c ****         send_keyboard_report();
 684              		.loc 1 878 9 view .LVU175
 685 000a FFF7FEFF 		bl	send_keyboard_report
 686              	.LVL78:
 687              	.L50:
 879:tmk_core/common/action.c ****     }
 880:tmk_core/common/action.c **** }
 688              		.loc 1 880 1 is_stmt 0 view .LVU176
 689              		@ sp needed
 690 000e 10BD     		pop	{r4, pc}
 691              		.cfi_endproc
 692              	.LFE205:
 694              		.section	.text.unregister_mods,"ax",%progbits
 695              		.align	1
 696              		.global	unregister_mods
 697              		.syntax unified
 698              		.code	16
 699              		.thumb_func
 700              		.fpu softvfp
 702              	unregister_mods:
 703              	.LVL79:
 704              	.LFB206:
 881:tmk_core/common/action.c **** 
 882:tmk_core/common/action.c **** /** \brief Removes the given physically pressed modifiers and sends a keyboard report immediately.
 883:tmk_core/common/action.c ****  *
 884:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 885:tmk_core/common/action.c ****  */
 886:tmk_core/common/action.c **** void unregister_mods(uint8_t mods) {
 705              		.loc 1 886 36 is_stmt 1 view -0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 887:tmk_core/common/action.c ****     if (mods) {
 709              		.loc 1 887 5 view .LVU178
 886:tmk_core/common/action.c ****     if (mods) {
 710              		.loc 1 886 36 is_stmt 0 view .LVU179
 711 0000 10B5     		push	{r4, lr}
 712              		.cfi_def_cfa_offset 8
 713              		.cfi_offset 4, -8
 714              		.cfi_offset 14, -4
 715              		.loc 1 887 8 view .LVU180
 716 0002 0028     		cmp	r0, #0
 717 0004 03D0     		beq	.L55
 888:tmk_core/common/action.c ****         del_mods(mods);
 718              		.loc 1 888 9 is_stmt 1 view .LVU181
 719 0006 FFF7FEFF 		bl	del_mods
 720              	.LVL80:
 889:tmk_core/common/action.c ****         send_keyboard_report();
 721              		.loc 1 889 9 view .LVU182
 722 000a FFF7FEFF 		bl	send_keyboard_report
 723              	.LVL81:
 724              	.L55:
 890:tmk_core/common/action.c ****     }
 891:tmk_core/common/action.c **** }
 725              		.loc 1 891 1 is_stmt 0 view .LVU183
 726              		@ sp needed
 727 000e 10BD     		pop	{r4, pc}
 728              		.cfi_endproc
 729              	.LFE206:
 731              		.section	.text.process_action,"ax",%progbits
 732              		.align	1
 733              		.global	process_action
 734              		.syntax unified
 735              		.code	16
 736              		.thumb_func
 737              		.fpu softvfp
 739              	process_action:
 740              	.LVL82:
 741              	.LFB201:
 213:tmk_core/common/action.c ****     keyevent_t event = record->event;
 742              		.loc 1 213 59 is_stmt 1 view -0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 16
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 214:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 746              		.loc 1 214 5 view .LVU185
 213:tmk_core/common/action.c ****     keyevent_t event = record->event;
 747              		.loc 1 213 59 is_stmt 0 view .LVU186
 748 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 749              		.cfi_def_cfa_offset 20
 750              		.cfi_offset 4, -20
 751              		.cfi_offset 5, -16
 752              		.cfi_offset 6, -12
 753              		.cfi_offset 7, -8
 754              		.cfi_offset 14, -4
 216:tmk_core/common/action.c **** #endif
 755              		.loc 1 216 36 view .LVU187
 756 0002 8679     		ldrb	r6, [r0, #6]
 219:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 757              		.loc 1 219 14 view .LVU188
 758 0004 8578     		ldrb	r5, [r0, #2]
 213:tmk_core/common/action.c ****     keyevent_t event = record->event;
 759              		.loc 1 213 59 view .LVU189
 760 0006 85B0     		sub	sp, sp, #20
 761              		.cfi_def_cfa_offset 40
 762              	.LVL83:
 216:tmk_core/common/action.c **** #endif
 763              		.loc 1 216 5 is_stmt 1 view .LVU190
 213:tmk_core/common/action.c ****     keyevent_t event = record->event;
 764              		.loc 1 213 59 is_stmt 0 view .LVU191
 765 0008 0190     		str	r0, [sp, #4]
 766              	.LVL84:
 213:tmk_core/common/action.c ****     keyevent_t event = record->event;
 767              		.loc 1 213 59 view .LVU192
 768 000a 0C1C     		adds	r4, r1, #0
 216:tmk_core/common/action.c **** #endif
 769              		.loc 1 216 13 view .LVU193
 770 000c 3609     		lsrs	r6, r6, #4
 771              	.LVL85:
 219:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 772              		.loc 1 219 5 is_stmt 1 view .LVU194
 219:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 773              		.loc 1 219 8 is_stmt 0 view .LVU195
 774 000e 002D     		cmp	r5, #0
 775 0010 01D0     		beq	.L61
 221:tmk_core/common/action.c ****     }
 776              		.loc 1 221 9 is_stmt 1 view .LVU196
 777 0012 FFF7FEFF 		bl	clear_weak_mods
 778              	.LVL86:
 779              	.L61:
 225:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 780              		.loc 1 225 5 view .LVU197
 227:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 781              		.loc 1 227 5 view .LVU198
 227:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 782              		.loc 1 227 9 is_stmt 0 view .LVU199
 783 0016 FFF7FEFF 		bl	is_oneshot_layer_active
 784              	.LVL87:
 227:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 785              		.loc 1 227 9 view .LVU200
 786 001a 0290     		str	r0, [sp, #8]
 227:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 787              		.loc 1 227 8 view .LVU201
 788 001c 0028     		cmp	r0, #0
 789 001e 11D0     		beq	.L62
 225:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 790              		.loc 1 225 10 discriminator 1 view .LVU202
 791 0020 0023     		movs	r3, #0
 792 0022 0293     		str	r3, [sp, #8]
 227:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 793              		.loc 1 227 35 discriminator 1 view .LVU203
 794 0024 9D42     		cmp	r5, r3
 795 0026 0DD0     		beq	.L62
 796              	.LVL88:
 227:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 797              		.loc 1 227 55 discriminator 2 view .LVU204
 798 0028 2300     		movs	r3, r4
 799 002a 2033     		adds	r3, r3, #32
 227:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 800              		.loc 1 227 52 discriminator 2 view .LVU205
 801 002c DBB2     		uxtb	r3, r3
 802 002e 072B     		cmp	r3, #7
 803 0030 08D9     		bls	.L62
 228:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 804              		.loc 1 228 9 is_stmt 1 view .LVU206
 805 0032 0220     		movs	r0, #2
 806 0034 FFF7FEFF 		bl	clear_oneshot_layer_state
 807              	.LVL89:
 229:tmk_core/common/action.c ****     }
 808              		.loc 1 229 9 view .LVU207
 229:tmk_core/common/action.c ****     }
 809              		.loc 1 229 31 is_stmt 0 view .LVU208
 810 0038 FFF7FEFF 		bl	is_oneshot_layer_active
 811              	.LVL90:
 229:tmk_core/common/action.c ****     }
 812              		.loc 1 229 9 view .LVU209
 813 003c 0123     		movs	r3, #1
 814 003e 4340     		eors	r3, r0
 815 0040 DBB2     		uxtb	r3, r3
 816 0042 0293     		str	r3, [sp, #8]
 817              	.LVL91:
 818              	.L62:
 233:tmk_core/common/action.c ****         /* Key and Mods */
 819              		.loc 1 233 5 is_stmt 1 view .LVU210
 233:tmk_core/common/action.c ****         /* Key and Mods */
 820              		.loc 1 233 24 is_stmt 0 view .LVU211
 821 0044 2304     		lsls	r3, r4, #16
 233:tmk_core/common/action.c ****         /* Key and Mods */
 822              		.loc 1 233 5 view .LVU212
 823 0046 180F     		lsrs	r0, r3, #28
 233:tmk_core/common/action.c ****         /* Key and Mods */
 824              		.loc 1 233 24 view .LVU213
 825 0048 0393     		str	r3, [sp, #12]
 233:tmk_core/common/action.c ****         /* Key and Mods */
 826              		.loc 1 233 5 view .LVU214
 827 004a FFF7FEFF 		bl	__gnu_thumb1_case_uhi
 828              	.L65:
 829 004e 1000     		.2byte	(.L73-.L65)/2
 830 0050 1000     		.2byte	(.L73-.L65)/2
 831 0052 6400     		.2byte	(.L72-.L65)/2
 832 0054 6400     		.2byte	(.L72-.L65)/2
 833 0056 B300     		.2byte	(.L71-.L65)/2
 834 0058 C700     		.2byte	(.L70-.L65)/2
 835 005a 4100     		.2byte	(.L63-.L65)/2
 836 005c 4100     		.2byte	(.L63-.L65)/2
 837 005e F400     		.2byte	(.L69-.L65)/2
 838 0060 4701     		.2byte	(.L68-.L65)/2
 839 0062 5801     		.2byte	(.L67-.L65)/2
 840 0064 5801     		.2byte	(.L67-.L65)/2
 841 0066 B301     		.2byte	(.L66-.L65)/2
 842 0068 4100     		.2byte	(.L63-.L65)/2
 843 006a 4100     		.2byte	(.L63-.L65)/2
 844 006c BC01     		.2byte	(.L64-.L65)/2
 845              		.p2align 1
 846              	.L73:
 847              	.LBB32:
 237:tmk_core/common/action.c ****             if (event.pressed) {
 848              		.loc 1 237 13 is_stmt 1 view .LVU215
 237:tmk_core/common/action.c ****             if (event.pressed) {
 849              		.loc 1 237 21 is_stmt 0 view .LVU216
 850 006e 0F22     		movs	r2, #15
 237:tmk_core/common/action.c ****             if (event.pressed) {
 851              		.loc 1 237 44 view .LVU217
 852 0070 2304     		lsls	r3, r4, #16
 853 0072 2605     		lsls	r6, r4, #20
 854 0074 1B0E     		lsrs	r3, r3, #24
 855 0076 360F     		lsrs	r6, r6, #28
 237:tmk_core/common/action.c ****             if (event.pressed) {
 856              		.loc 1 237 21 view .LVU218
 857 0078 9343     		bics	r3, r2
 858 007a 00D0     		beq	.L74
 237:tmk_core/common/action.c ****             if (event.pressed) {
 859              		.loc 1 237 21 discriminator 2 view .LVU219
 860 007c 3601     		lsls	r6, r6, #4
 861              	.L74:
 862              	.LVL92:
 238:tmk_core/common/action.c ****                 if (mods) {
 863              		.loc 1 238 13 is_stmt 1 discriminator 4 view .LVU220
 864 007e E4B2     		uxtb	r4, r4
 865              	.LVL93:
 238:tmk_core/common/action.c ****                 if (mods) {
 866              		.loc 1 238 16 is_stmt 0 discriminator 4 view .LVU221
 867 0080 002D     		cmp	r5, #0
 868 0082 14D0     		beq	.L75
 239:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 869              		.loc 1 239 17 is_stmt 1 view .LVU222
 239:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 870              		.loc 1 239 20 is_stmt 0 view .LVU223
 871 0084 002E     		cmp	r6, #0
 872 0086 0BD0     		beq	.L96
 240:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 873              		.loc 1 240 21 is_stmt 1 view .LVU224
 240:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 874              		.loc 1 240 25 is_stmt 0 view .LVU225
 875 0088 2300     		movs	r3, r4
 876 008a 2033     		adds	r3, r3, #32
 240:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 877              		.loc 1 240 24 view .LVU226
 878 008c DBB2     		uxtb	r3, r3
 244:tmk_core/common/action.c ****                     } else {
 879              		.loc 1 244 25 view .LVU227
 880 008e 3000     		movs	r0, r6
 240:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 881              		.loc 1 240 24 view .LVU228
 882 0090 072B     		cmp	r3, #7
 883 0092 01D9     		bls	.L77
 240:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 884              		.loc 1 240 49 discriminator 1 view .LVU229
 885 0094 002C     		cmp	r4, #0
 886 0096 07D1     		bne	.L78
 887              	.L77:
 244:tmk_core/common/action.c ****                     } else {
 888              		.loc 1 244 25 is_stmt 1 view .LVU230
 889 0098 FFF7FEFF 		bl	add_mods
 890              	.LVL94:
 891              	.L79:
 248:tmk_core/common/action.c ****                 }
 892              		.loc 1 248 21 view .LVU231
 893 009c FFF7FEFF 		bl	send_keyboard_report
 894              	.LVL95:
 250:tmk_core/common/action.c ****             } else {
 895              		.loc 1 250 17 view .LVU232
 896              	.L96:
 250:tmk_core/common/action.c ****             } else {
 897              		.loc 1 250 17 is_stmt 0 view .LVU233
 898              	.LBE32:
 899              	.LBB33:
 337:tmk_core/common/action.c ****                                 register_code(action.key.code);
 900              		.loc 1 337 73 is_stmt 1 view .LVU234
 338:tmk_core/common/action.c ****                             }
 901              		.loc 1 338 33 view .LVU235
 902 00a0 2000     		movs	r0, r4
 903              	.LVL96:
 904              	.L182:
 338:tmk_core/common/action.c ****                             }
 905              		.loc 1 338 33 is_stmt 0 view .LVU236
 906              	.LBE33:
 542:tmk_core/common/action.c ****                         } else {
 907              		.loc 1 542 29 view .LVU237
 908 00a2 FFF7FEFF 		bl	register_code
 909              	.LVL97:
 910 00a6 13E0     		b	.L63
 911              	.LVL98:
 912              	.L78:
 913              	.LBB34:
 246:tmk_core/common/action.c ****                     }
 914              		.loc 1 246 25 is_stmt 1 view .LVU238
 915 00a8 FFF7FEFF 		bl	add_weak_mods
 916              	.LVL99:
 917 00ac F6E7     		b	.L79
 918              	.L75:
 252:tmk_core/common/action.c ****                 if (mods) {
 919              		.loc 1 252 17 view .LVU239
 920 00ae 2000     		movs	r0, r4
 921 00b0 FFF7FEFF 		bl	unregister_code
 922              	.LVL100:
 253:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 923              		.loc 1 253 17 view .LVU240
 253:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 924              		.loc 1 253 20 is_stmt 0 view .LVU241
 925 00b4 002E     		cmp	r6, #0
 926 00b6 0BD0     		beq	.L63
 254:tmk_core/common/action.c ****                         del_mods(mods);
 927              		.loc 1 254 21 is_stmt 1 view .LVU242
 254:tmk_core/common/action.c ****                         del_mods(mods);
 928              		.loc 1 254 25 is_stmt 0 view .LVU243
 929 00b8 2300     		movs	r3, r4
 930 00ba 2033     		adds	r3, r3, #32
 254:tmk_core/common/action.c ****                         del_mods(mods);
 931              		.loc 1 254 24 view .LVU244
 932 00bc DBB2     		uxtb	r3, r3
 255:tmk_core/common/action.c ****                     } else {
 933              		.loc 1 255 25 view .LVU245
 934 00be 3000     		movs	r0, r6
 254:tmk_core/common/action.c ****                         del_mods(mods);
 935              		.loc 1 254 24 view .LVU246
 936 00c0 072B     		cmp	r3, #7
 937 00c2 01D9     		bls	.L81
 254:tmk_core/common/action.c ****                         del_mods(mods);
 938              		.loc 1 254 49 discriminator 1 view .LVU247
 939 00c4 002C     		cmp	r4, #0
 940 00c6 23D1     		bne	.L82
 941              	.L81:
 255:tmk_core/common/action.c ****                     } else {
 942              		.loc 1 255 25 is_stmt 1 view .LVU248
 943 00c8 FFF7FEFF 		bl	del_mods
 944              	.LVL101:
 945              	.L83:
 259:tmk_core/common/action.c ****                 }
 946              		.loc 1 259 21 view .LVU249
 947 00cc FFF7FEFF 		bl	send_keyboard_report
 948              	.LVL102:
 949              	.L63:
 259:tmk_core/common/action.c ****                 }
 950              		.loc 1 259 21 is_stmt 0 view .LVU250
 951              	.LBE34:
 646:tmk_core/common/action.c ****         case ACT_LAYER:
 952              		.loc 1 646 5 is_stmt 1 view .LVU251
 953 00d0 039B     		ldr	r3, [sp, #12]
 954 00d2 1B0F     		lsrs	r3, r3, #28
 955 00d4 083B     		subs	r3, r3, #8
 956 00d6 032B     		cmp	r3, #3
 957 00d8 03D8     		bhi	.L140
 653:tmk_core/common/action.c ****             break;
 958              		.loc 1 653 13 view .LVU252
 959 00da FFF7FEFF 		bl	host_keyboard_leds
 960              	.LVL103:
 961 00de FFF7FEFF 		bl	led_set
 962              	.LVL104:
 654:tmk_core/common/action.c ****         default:
 963              		.loc 1 654 13 view .LVU253
 964              	.L140:
 688:tmk_core/common/action.c ****         record->event.pressed = false;
 965              		.loc 1 688 5 view .LVU254
 688:tmk_core/common/action.c ****         record->event.pressed = false;
 966              		.loc 1 688 8 is_stmt 0 view .LVU255
 967 00e2 029B     		ldr	r3, [sp, #8]
 968 00e4 002B     		cmp	r3, #0
 969 00e6 11D0     		beq	.L60
 688:tmk_core/common/action.c ****         record->event.pressed = false;
 970              		.loc 1 688 33 discriminator 1 view .LVU256
 971 00e8 FFF7FEFF 		bl	get_oneshot_layer_state
 972              	.LVL105:
 688:tmk_core/common/action.c ****         record->event.pressed = false;
 973              		.loc 1 688 28 discriminator 1 view .LVU257
 974 00ec 0123     		movs	r3, #1
 975 00ee 1840     		ands	r0, r3
 976 00f0 0CD1     		bne	.L60
 689:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 977              		.loc 1 689 9 is_stmt 1 view .LVU258
 689:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 978              		.loc 1 689 31 is_stmt 0 view .LVU259
 979 00f2 019B     		ldr	r3, [sp, #4]
 980 00f4 9870     		strb	r0, [r3, #2]
 690:tmk_core/common/action.c ****         process_record(record);
 981              		.loc 1 690 9 is_stmt 1 view .LVU260
 982 00f6 FFF7FEFF 		bl	get_oneshot_layer
 983              	.LVL106:
 984 00fa FFF7FEFF 		bl	layer_on
 985              	.LVL107:
 691:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 986              		.loc 1 691 9 view .LVU261
 987 00fe 0198     		ldr	r0, [sp, #4]
 988 0100 FFF7FEFF 		bl	process_record
 989              	.LVL108:
 692:tmk_core/common/action.c ****     }
 990              		.loc 1 692 9 view .LVU262
 991 0104 FFF7FEFF 		bl	get_oneshot_layer
 992              	.LVL109:
 993 0108 FFF7FEFF 		bl	layer_off
 994              	.LVL110:
 995              	.L60:
 695:tmk_core/common/action.c **** 
 996              		.loc 1 695 1 is_stmt 0 view .LVU263
 997 010c 05B0     		add	sp, sp, #20
 998              		@ sp needed
 999              	.LVL111:
 695:tmk_core/common/action.c **** 
 1000              		.loc 1 695 1 view .LVU264
 1001 010e F0BD     		pop	{r4, r5, r6, r7, pc}
 1002              	.LVL112:
 1003              	.L82:
 1004              	.LBB35:
 257:tmk_core/common/action.c ****                     }
 1005              		.loc 1 257 25 is_stmt 1 view .LVU265
 1006 0110 FFF7FEFF 		bl	del_weak_mods
 1007              	.LVL113:
 1008 0114 DAE7     		b	.L83
 1009              	.LVL114:
 1010              	.L72:
 257:tmk_core/common/action.c ****                     }
 1011              		.loc 1 257 25 is_stmt 0 view .LVU266
 1012              	.LBE35:
 1013              	.LBB36:
 266:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1014              		.loc 1 266 13 is_stmt 1 view .LVU267
 266:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1015              		.loc 1 266 21 is_stmt 0 view .LVU268
 1016 0116 0F22     		movs	r2, #15
 266:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1017              		.loc 1 266 44 view .LVU269
 1018 0118 2304     		lsls	r3, r4, #16
 1019 011a 2705     		lsls	r7, r4, #20
 1020 011c 1B0E     		lsrs	r3, r3, #24
 1021 011e 3F0F     		lsrs	r7, r7, #28
 266:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1022              		.loc 1 266 21 view .LVU270
 1023 0120 9343     		bics	r3, r2
 1024 0122 202B     		cmp	r3, #32
 1025 0124 00D0     		beq	.L84
 266:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1026              		.loc 1 266 21 discriminator 2 view .LVU271
 1027 0126 3F01     		lsls	r7, r7, #4
 1028              	.L84:
 1029              	.LVL115:
 267:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 1030              		.loc 1 267 13 is_stmt 1 discriminator 4 view .LVU272
 267:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 1031              		.loc 1 267 37 is_stmt 0 discriminator 4 view .LVU273
 1032 0128 E4B2     		uxtb	r4, r4
 1033              	.LVL116:
 267:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 1034              		.loc 1 267 37 discriminator 4 view .LVU274
 1035 012a 002C     		cmp	r4, #0
 1036 012c 0ED0     		beq	.L85
 1037 012e 012C     		cmp	r4, #1
 1038 0130 2BD0     		beq	.L86
 322:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1039              		.loc 1 322 21 is_stmt 1 view .LVU275
 322:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1040              		.loc 1 322 24 is_stmt 0 view .LVU276
 1041 0132 002D     		cmp	r5, #0
 1042 0134 32D0     		beq	.L94
 323:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 1043              		.loc 1 323 25 is_stmt 1 view .LVU277
 323:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 1044              		.loc 1 323 28 is_stmt 0 view .LVU278
 1045 0136 002E     		cmp	r6, #0
 1046 0138 2BD0     		beq	.L95
 325:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 1047              		.loc 1 325 29 is_stmt 1 view .LVU279
 329:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 1048              		.loc 1 329 33 is_stmt 0 view .LVU280
 1049 013a 019B     		ldr	r3, [sp, #4]
 1050 013c 9B79     		ldrb	r3, [r3, #6]
 325:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 1051              		.loc 1 325 32 view .LVU281
 1052 013e DA07     		lsls	r2, r3, #31
 1053 0140 AED5     		bpl	.L96
 330:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 1054              		.loc 1 330 76 is_stmt 1 view .LVU282
 332:tmk_core/common/action.c ****                                 register_mods(mods);
 1055              		.loc 1 332 33 view .LVU283
 332:tmk_core/common/action.c ****                                 register_mods(mods);
 1056              		.loc 1 332 51 is_stmt 0 view .LVU284
 1057 0142 0F22     		movs	r2, #15
 1058 0144 1340     		ands	r3, r2
 1059 0146 019A     		ldr	r2, [sp, #4]
 1060 0148 9371     		strb	r3, [r2, #6]
 333:tmk_core/common/action.c ****                             } else
 1061              		.loc 1 333 33 is_stmt 1 view .LVU285
 1062 014a 22E0     		b	.L95
 1063              	.L85:
 271:tmk_core/common/action.c ****                         if (tap_count == 0) {
 1064              		.loc 1 271 21 view .LVU286
 271:tmk_core/common/action.c ****                         if (tap_count == 0) {
 1065              		.loc 1 271 24 is_stmt 0 view .LVU287
 1066 014c 002D     		cmp	r5, #0
 1067 014e 11D0     		beq	.L88
 272:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 1068              		.loc 1 272 25 is_stmt 1 view .LVU288
 272:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 1069              		.loc 1 272 28 is_stmt 0 view .LVU289
 1070 0150 002E     		cmp	r6, #0
 1071 0152 06D1     		bne	.L89
 1072              	.L90:
 286:tmk_core/common/action.c ****                         }
 1073              		.loc 1 286 29 is_stmt 1 view .LVU290
 286:tmk_core/common/action.c ****                         }
 1074              		.loc 1 286 50 is_stmt 0 view .LVU291
 1075 0154 FFF7FEFF 		bl	get_oneshot_mods
 1076              	.LVL117:
 286:tmk_core/common/action.c ****                         }
 1077              		.loc 1 286 29 view .LVU292
 1078 0158 3843     		orrs	r0, r7
 1079 015a C0B2     		uxtb	r0, r0
 1080              	.LVL118:
 1081              	.L180:
 286:tmk_core/common/action.c ****                         }
 1082              		.loc 1 286 29 view .LVU293
 1083              	.LBE36:
 468:tmk_core/common/action.c ****             } else {
 1084              		.loc 1 468 17 view .LVU294
 1085 015c FFF7FEFF 		bl	register_mods
 1086              	.LVL119:
 1087 0160 B6E7     		b	.L63
 1088              	.LVL120:
 1089              	.L89:
 1090              	.LBB37:
 275:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 1091              		.loc 1 275 32 is_stmt 1 view .LVU295
 275:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 1092              		.loc 1 275 35 is_stmt 0 view .LVU296
 1093 0162 012E     		cmp	r6, #1
 1094 0164 F6D1     		bne	.L90
 276:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 1095              		.loc 1 276 65 is_stmt 1 view .LVU297
 277:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1096              		.loc 1 277 29 view .LVU298
 277:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1097              		.loc 1 277 53 is_stmt 0 view .LVU299
 1098 0166 FFF7FEFF 		bl	get_oneshot_mods
 1099              	.LVL121:
 277:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1100              		.loc 1 277 29 view .LVU300
 1101 016a 3843     		orrs	r0, r7
 1102 016c C0B2     		uxtb	r0, r0
 1103 016e FFF7FEFF 		bl	set_oneshot_mods
 1104              	.LVL122:
 1105 0172 ADE7     		b	.L63
 1106              	.L88:
 289:tmk_core/common/action.c ****                             clear_oneshot_mods();
 1107              		.loc 1 289 25 is_stmt 1 view .LVU301
 289:tmk_core/common/action.c ****                             clear_oneshot_mods();
 1108              		.loc 1 289 28 is_stmt 0 view .LVU302
 1109 0174 002E     		cmp	r6, #0
 1110 0176 05D1     		bne	.L91
 1111              	.L184:
 304:tmk_core/common/action.c ****                             unregister_mods(mods);
 1112              		.loc 1 304 29 is_stmt 1 view .LVU303
 1113 0178 FFF7FEFF 		bl	clear_oneshot_mods
 1114              	.LVL123:
 305:tmk_core/common/action.c ****                         }
 1115              		.loc 1 305 29 view .LVU304
 1116              	.L97:
 352:tmk_core/common/action.c ****                             unregister_mods(mods);
 1117              		.loc 1 352 67 view .LVU305
 353:tmk_core/common/action.c ****                         }
 1118              		.loc 1 353 29 view .LVU306
 1119 017c 3800     		movs	r0, r7
 1120 017e FFF7FEFF 		bl	unregister_mods
 1121              	.LVL124:
 1122 0182 A5E7     		b	.L63
 1123              	.L91:
 292:tmk_core/common/action.c ****                             // Retain Oneshot mods
 1124              		.loc 1 292 32 view .LVU307
 292:tmk_core/common/action.c ****                             // Retain Oneshot mods
 1125              		.loc 1 292 35 is_stmt 0 view .LVU308
 1126 0184 012E     		cmp	r6, #1
 1127 0186 A3D0     		beq	.L63
 1128 0188 F6E7     		b	.L184
 1129              	.L86:
 311:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1130              		.loc 1 311 21 is_stmt 1 view .LVU309
 311:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1131              		.loc 1 311 24 is_stmt 0 view .LVU310
 1132 018a 002D     		cmp	r5, #0
 1133 018c 03D0     		beq	.L93
 312:tmk_core/common/action.c ****                             register_mods(mods);
 1134              		.loc 1 312 25 is_stmt 1 view .LVU311
 312:tmk_core/common/action.c ****                             register_mods(mods);
 1135              		.loc 1 312 28 is_stmt 0 view .LVU312
 1136 018e 052E     		cmp	r6, #5
 1137 0190 9ED8     		bhi	.L63
 1138              	.L95:
 341:tmk_core/common/action.c ****                             register_mods(mods);
 1139              		.loc 1 341 67 is_stmt 1 view .LVU313
 342:tmk_core/common/action.c ****                         }
 1140              		.loc 1 342 29 view .LVU314
 1141 0192 3800     		movs	r0, r7
 1142 0194 E2E7     		b	.L180
 1143              	.L93:
 316:tmk_core/common/action.c ****                             unregister_mods(mods);
 1144              		.loc 1 316 25 view .LVU315
 316:tmk_core/common/action.c ****                             unregister_mods(mods);
 1145              		.loc 1 316 28 is_stmt 0 view .LVU316
 1146 0196 042E     		cmp	r6, #4
 1147 0198 9AD8     		bhi	.L63
 1148 019a EFE7     		b	.L97
 1149              	.L94:
 345:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 1150              		.loc 1 345 25 is_stmt 1 view .LVU317
 345:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 1151              		.loc 1 345 28 is_stmt 0 view .LVU318
 1152 019c 002E     		cmp	r6, #0
 1153 019e EDD0     		beq	.L97
 346:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1154              		.loc 1 346 71 is_stmt 1 view .LVU319
 347:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1155              		.loc 1 347 29 view .LVU320
 347:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1156              		.loc 1 347 32 is_stmt 0 view .LVU321
 1157 01a0 392C     		cmp	r4, #57
 1158 01a2 03D1     		bne	.L98
 348:tmk_core/common/action.c ****                             }
 1159              		.loc 1 348 33 is_stmt 1 discriminator 1 view .LVU322
 348:tmk_core/common/action.c ****                             }
 1160              		.loc 1 348 33 discriminator 1 view .LVU323
 348:tmk_core/common/action.c ****                             }
 1161              		.loc 1 348 33 discriminator 1 view .LVU324
 1162 01a4 C820     		movs	r0, #200
 1163 01a6 8000     		lsls	r0, r0, #2
 1164 01a8 FFF7FEFF 		bl	chThdSleep
 1165              	.LVL125:
 1166              	.L98:
 350:tmk_core/common/action.c ****                         } else {
 1167              		.loc 1 350 29 view .LVU325
 1168 01ac 2000     		movs	r0, r4
 1169              	.LVL126:
 1170              	.L181:
 350:tmk_core/common/action.c ****                         } else {
 1171              		.loc 1 350 29 is_stmt 0 view .LVU326
 1172              	.LBE37:
 555:tmk_core/common/action.c ****                         } else {
 1173              		.loc 1 555 29 view .LVU327
 1174 01ae FFF7FEFF 		bl	unregister_code
 1175              	.LVL127:
 1176 01b2 8DE7     		b	.L63
 1177              	.L71:
 363:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1178              		.loc 1 363 13 is_stmt 1 view .LVU328
 363:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1179              		.loc 1 363 33 is_stmt 0 view .LVU329
 1180 01b4 2305     		lsls	r3, r4, #20
 1181 01b6 9B0F     		lsrs	r3, r3, #30
 1182 01b8 09D0     		beq	.L99
 1183 01ba 012B     		cmp	r3, #1
 1184 01bc 00D0     		beq	.LCB1004
 1185 01be 87E7     		b	.L63	@long jump
 1186              	.LCB1004:
 372:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1187              		.loc 1 372 21 is_stmt 1 view .LVU330
 375:tmk_core/common/action.c ****                     }
 1188              		.loc 1 375 25 is_stmt 0 view .LVU331
 1189 01c0 281E     		subs	r0, r5, #0
 372:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1190              		.loc 1 372 24 view .LVU332
 1191 01c2 01D0     		beq	.L183
 373:tmk_core/common/action.c ****                     } else {
 1192              		.loc 1 373 25 is_stmt 1 view .LVU333
 373:tmk_core/common/action.c ****                     } else {
 1193              		.loc 1 373 56 is_stmt 0 view .LVU334
 1194 01c4 A005     		lsls	r0, r4, #22
 373:tmk_core/common/action.c ****                     } else {
 1195              		.loc 1 373 25 view .LVU335
 1196 01c6 800D     		lsrs	r0, r0, #22
 1197              	.L183:
 375:tmk_core/common/action.c ****                     }
 1198              		.loc 1 375 25 view .LVU336
 1199 01c8 FFF7FEFF 		bl	host_consumer_send
 1200              	.LVL128:
 1201 01cc 80E7     		b	.L63
 1202              	.L99:
 365:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1203              		.loc 1 365 21 is_stmt 1 view .LVU337
 368:tmk_core/common/action.c ****                     }
 1204              		.loc 1 368 25 is_stmt 0 view .LVU338
 1205 01ce 281E     		subs	r0, r5, #0
 365:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1206              		.loc 1 365 24 view .LVU339
 1207 01d0 01D0     		beq	.L177
 366:tmk_core/common/action.c ****                     } else {
 1208              		.loc 1 366 25 is_stmt 1 view .LVU340
 366:tmk_core/common/action.c ****                     } else {
 1209              		.loc 1 366 54 is_stmt 0 view .LVU341
 1210 01d2 A005     		lsls	r0, r4, #22
 366:tmk_core/common/action.c ****                     } else {
 1211              		.loc 1 366 25 view .LVU342
 1212 01d4 800D     		lsrs	r0, r0, #22
 1213              	.L177:
 368:tmk_core/common/action.c ****                     }
 1214              		.loc 1 368 25 view .LVU343
 1215 01d6 FFF7FEFF 		bl	host_system_send
 1216              	.LVL129:
 1217 01da 79E7     		b	.L63
 1218              	.L70:
 384:tmk_core/common/action.c ****                 switch (action.key.code) {
 1219              		.loc 1 384 13 is_stmt 1 view .LVU344
 1220 01dc E0B2     		uxtb	r0, r4
 384:tmk_core/common/action.c ****                 switch (action.key.code) {
 1221              		.loc 1 384 16 is_stmt 0 view .LVU345
 1222 01de 002D     		cmp	r5, #0
 1223 01e0 15D0     		beq	.L103
 385:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 1224              		.loc 1 385 17 is_stmt 1 view .LVU346
 1225 01e2 F528     		cmp	r0, #245
 1226 01e4 0DD0     		beq	.L104
 1227 01e6 F628     		cmp	r0, #246
 1228 01e8 0ED0     		beq	.L105
 1229 01ea F428     		cmp	r0, #244
 1230 01ec 04D1     		bne	.L106
 387:tmk_core/common/action.c ****                         break;
 1231              		.loc 1 387 25 view .LVU347
 387:tmk_core/common/action.c ****                         break;
 1232              		.loc 1 387 36 is_stmt 0 view .LVU348
 1233 01ee 0123     		movs	r3, #1
 1234 01f0 784A     		ldr	r2, .L185
 1235              	.L173:
 393:tmk_core/common/action.c ****                         break;
 1236              		.loc 1 393 36 view .LVU349
 1237 01f2 1168     		ldr	r1, [r2]
 1238 01f4 0B43     		orrs	r3, r1
 1239 01f6 1360     		str	r3, [r2]
 394:tmk_core/common/action.c ****                     default:
 1240              		.loc 1 394 25 is_stmt 1 view .LVU350
 1241              	.L106:
 398:tmk_core/common/action.c ****                 mousekey_send();
 1242              		.loc 1 398 17 view .LVU351
 1243 01f8 FFF7FEFF 		bl	mousekey_on
 1244              	.LVL130:
 399:tmk_core/common/action.c ****             } else {
 1245              		.loc 1 399 17 view .LVU352
 1246              	.L178:
 415:tmk_core/common/action.c ****             }
 1247              		.loc 1 415 17 view .LVU353
 1248 01fc FFF7FEFF 		bl	mousekey_send
 1249              	.LVL131:
 1250 0200 66E7     		b	.L63
 1251              	.L104:
 390:tmk_core/common/action.c ****                         break;
 1252              		.loc 1 390 25 view .LVU354
 390:tmk_core/common/action.c ****                         break;
 1253              		.loc 1 390 36 is_stmt 0 view .LVU355
 1254 0202 744A     		ldr	r2, .L185
 1255 0204 0223     		movs	r3, #2
 1256 0206 F4E7     		b	.L173
 1257              	.L105:
 393:tmk_core/common/action.c ****                         break;
 1258              		.loc 1 393 25 is_stmt 1 view .LVU356
 393:tmk_core/common/action.c ****                         break;
 1259              		.loc 1 393 36 is_stmt 0 view .LVU357
 1260 0208 724A     		ldr	r2, .L185
 1261 020a 0423     		movs	r3, #4
 1262 020c F1E7     		b	.L173
 1263              	.L103:
 401:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 1264              		.loc 1 401 17 is_stmt 1 view .LVU358
 1265 020e F528     		cmp	r0, #245
 1266 0210 0BD0     		beq	.L107
 1267 0212 F628     		cmp	r0, #246
 1268 0214 0CD0     		beq	.L108
 1269 0216 F428     		cmp	r0, #244
 1270 0218 04D1     		bne	.L109
 403:tmk_core/common/action.c ****                         break;
 1271              		.loc 1 403 25 view .LVU359
 403:tmk_core/common/action.c ****                         break;
 1272              		.loc 1 403 36 is_stmt 0 view .LVU360
 1273 021a 0123     		movs	r3, #1
 1274 021c 6D4A     		ldr	r2, .L185
 1275              	.L174:
 409:tmk_core/common/action.c ****                         break;
 1276              		.loc 1 409 36 view .LVU361
 1277 021e 1168     		ldr	r1, [r2]
 1278 0220 9943     		bics	r1, r3
 1279 0222 1160     		str	r1, [r2]
 410:tmk_core/common/action.c ****                     default:
 1280              		.loc 1 410 25 is_stmt 1 view .LVU362
 1281              	.L109:
 414:tmk_core/common/action.c ****                 mousekey_send();
 1282              		.loc 1 414 17 view .LVU363
 1283 0224 FFF7FEFF 		bl	mousekey_off
 1284              	.LVL132:
 1285 0228 E8E7     		b	.L178
 1286              	.L107:
 406:tmk_core/common/action.c ****                         break;
 1287              		.loc 1 406 25 view .LVU364
 406:tmk_core/common/action.c ****                         break;
 1288              		.loc 1 406 36 is_stmt 0 view .LVU365
 1289 022a 6A4A     		ldr	r2, .L185
 1290 022c 0223     		movs	r3, #2
 1291 022e F6E7     		b	.L174
 1292              	.L108:
 409:tmk_core/common/action.c ****                         break;
 1293              		.loc 1 409 25 is_stmt 1 view .LVU366
 409:tmk_core/common/action.c ****                         break;
 1294              		.loc 1 409 36 is_stmt 0 view .LVU367
 1295 0230 684A     		ldr	r2, .L185
 1296 0232 0423     		movs	r3, #4
 1297 0234 F3E7     		b	.L174
 1298              	.L69:
 421:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1299              		.loc 1 421 13 is_stmt 1 view .LVU368
 421:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1300              		.loc 1 421 39 is_stmt 0 view .LVU369
 1301 0236 2304     		lsls	r3, r4, #16
 1302 0238 9B01     		lsls	r3, r3, #6
 421:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1303              		.loc 1 421 16 view .LVU370
 1304 023a 9B0F     		lsrs	r3, r3, #30
 1305 023c 21D1     		bne	.L110
 423:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1306              		.loc 1 423 17 is_stmt 1 view .LVU371
 423:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1307              		.loc 1 423 20 is_stmt 0 view .LVU372
 1308 023e 002D     		cmp	r5, #0
 1309 0240 00D0     		beq	.LCB1137
 1310 0242 45E7     		b	.L63	@long jump
 1311              	.LCB1137:
 1312              	.LBB38:
 424:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1313              		.loc 1 424 21 is_stmt 1 view .LVU373
 1314              	.LVL133:
 425:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1315              		.loc 1 425 21 view .LVU374
 424:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1316              		.loc 1 424 61 is_stmt 0 view .LVU375
 1317 0244 2306     		lsls	r3, r4, #24
 1318 0246 5B0F     		lsrs	r3, r3, #29
 425:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1319              		.loc 1 425 77 view .LVU376
 1320 0248 2007     		lsls	r0, r4, #28
 425:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1321              		.loc 1 425 84 view .LVU377
 1322 024a 9B00     		lsls	r3, r3, #2
 425:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1323              		.loc 1 425 44 view .LVU378
 1324 024c 000F     		lsrs	r0, r0, #28
 425:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1325              		.loc 1 425 35 view .LVU379
 1326 024e 9840     		lsls	r0, r0, r3
 1327              	.LVL134:
 426:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1328              		.loc 1 426 21 is_stmt 1 view .LVU380
 426:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1329              		.loc 1 426 104 is_stmt 0 view .LVU381
 1330 0250 E206     		lsls	r2, r4, #27
 1331 0252 02D5     		bpl	.L111
 426:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1332              		.loc 1 426 94 discriminator 1 view .LVU382
 1333 0254 0F35     		adds	r5, r5, #15
 1334 0256 9D40     		lsls	r5, r5, r3
 426:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1335              		.loc 1 426 104 discriminator 1 view .LVU383
 1336 0258 ED43     		mvns	r5, r5
 1337              	.L111:
 1338              	.LVL135:
 427:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1339              		.loc 1 427 21 is_stmt 1 discriminator 4 view .LVU384
 427:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1340              		.loc 1 427 47 is_stmt 0 discriminator 4 view .LVU385
 1341 025a 2405     		lsls	r4, r4, #20
 1342              	.LVL136:
 427:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1343              		.loc 1 427 47 discriminator 4 view .LVU386
 1344 025c A40F     		lsrs	r4, r4, #30
 1345 025e 2843     		orrs	r0, r5
 1346              	.LVL137:
 427:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1347              		.loc 1 427 47 discriminator 4 view .LVU387
 1348 0260 022C     		cmp	r4, #2
 1349 0262 08D0     		beq	.L112
 1350 0264 0AD8     		bhi	.L113
 1351 0266 012C     		cmp	r4, #1
 1352 0268 02D0     		beq	.L114
 429:tmk_core/common/action.c ****                             break;
 1353              		.loc 1 429 29 is_stmt 1 view .LVU388
 1354 026a FFF7FEFF 		bl	default_layer_and
 1355              	.LVL138:
 430:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1356              		.loc 1 430 29 view .LVU389
 1357 026e 2FE7     		b	.L63
 1358              	.L114:
 432:tmk_core/common/action.c ****                             break;
 1359              		.loc 1 432 29 view .LVU390
 1360 0270 FFF7FEFF 		bl	default_layer_or
 1361              	.LVL139:
 433:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1362              		.loc 1 433 29 view .LVU391
 1363 0274 2CE7     		b	.L63
 1364              	.L112:
 435:tmk_core/common/action.c ****                             break;
 1365              		.loc 1 435 29 view .LVU392
 1366 0276 FFF7FEFF 		bl	default_layer_xor
 1367              	.LVL140:
 436:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1368              		.loc 1 436 29 view .LVU393
 1369 027a 29E7     		b	.L63
 1370              	.L113:
 438:tmk_core/common/action.c ****                             break;
 1371              		.loc 1 438 29 view .LVU394
 1372 027c FFF7FEFF 		bl	default_layer_set
 1373              	.LVL141:
 439:tmk_core/common/action.c ****                     }
 1374              		.loc 1 439 29 view .LVU395
 1375 0280 26E7     		b	.L63
 1376              	.LVL142:
 1377              	.L110:
 439:tmk_core/common/action.c ****                     }
 1378              		.loc 1 439 29 is_stmt 0 view .LVU396
 1379              	.LBE38:
 444:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1380              		.loc 1 444 17 is_stmt 1 view .LVU397
 1381 0282 A205     		lsls	r2, r4, #22
 1382 0284 920F     		lsrs	r2, r2, #30
 1383 0286 D1B2     		uxtb	r1, r2
 1384 0288 0123     		movs	r3, #1
 444:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1385              		.loc 1 444 21 is_stmt 0 view .LVU398
 1386 028a 002D     		cmp	r5, #0
 1387 028c 1AD0     		beq	.L115
 444:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1388              		.loc 1 444 21 discriminator 1 view .LVU399
 1389 028e 1340     		ands	r3, r2
 1390              	.L116:
 444:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1391              		.loc 1 444 20 discriminator 4 view .LVU400
 1392 0290 002B     		cmp	r3, #0
 1393 0292 00D1     		bne	.LCB1223
 1394 0294 1CE7     		b	.L63	@long jump
 1395              	.LCB1223:
 1396              	.LBB39:
 445:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1397              		.loc 1 445 21 is_stmt 1 view .LVU401
 1398              	.LVL143:
 446:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1399              		.loc 1 446 21 view .LVU402
 445:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1400              		.loc 1 445 61 is_stmt 0 view .LVU403
 1401 0296 2206     		lsls	r2, r4, #24
 1402 0298 520F     		lsrs	r2, r2, #29
 446:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1403              		.loc 1 446 77 view .LVU404
 1404 029a 2007     		lsls	r0, r4, #28
 446:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1405              		.loc 1 446 84 view .LVU405
 1406 029c 9200     		lsls	r2, r2, #2
 446:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1407              		.loc 1 446 44 view .LVU406
 1408 029e 000F     		lsrs	r0, r0, #28
 446:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1409              		.loc 1 446 35 view .LVU407
 1410 02a0 9040     		lsls	r0, r0, r2
 1411              	.LVL144:
 447:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1412              		.loc 1 447 21 is_stmt 1 view .LVU408
 447:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1413              		.loc 1 447 104 is_stmt 0 view .LVU409
 1414 02a2 0023     		movs	r3, #0
 1415 02a4 E106     		lsls	r1, r4, #27
 1416 02a6 02D5     		bpl	.L117
 447:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1417              		.loc 1 447 94 discriminator 1 view .LVU410
 1418 02a8 0F33     		adds	r3, r3, #15
 1419 02aa 9340     		lsls	r3, r3, r2
 447:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1420              		.loc 1 447 104 discriminator 1 view .LVU411
 1421 02ac DB43     		mvns	r3, r3
 1422              	.L117:
 1423              	.LVL145:
 448:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1424              		.loc 1 448 21 is_stmt 1 discriminator 4 view .LVU412
 448:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1425              		.loc 1 448 47 is_stmt 0 discriminator 4 view .LVU413
 1426 02ae 2405     		lsls	r4, r4, #20
 1427              	.LVL146:
 448:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1428              		.loc 1 448 47 discriminator 4 view .LVU414
 1429 02b0 A40F     		lsrs	r4, r4, #30
 1430 02b2 1843     		orrs	r0, r3
 1431              	.LVL147:
 448:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1432              		.loc 1 448 47 discriminator 4 view .LVU415
 1433 02b4 022C     		cmp	r4, #2
 1434 02b6 0BD0     		beq	.L118
 1435 02b8 0DD8     		bhi	.L119
 1436 02ba 012C     		cmp	r4, #1
 1437 02bc 05D0     		beq	.L120
 450:tmk_core/common/action.c ****                             break;
 1438              		.loc 1 450 29 is_stmt 1 view .LVU416
 1439 02be FFF7FEFF 		bl	layer_and
 1440              	.LVL148:
 451:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1441              		.loc 1 451 29 view .LVU417
 1442 02c2 05E7     		b	.L63
 1443              	.LVL149:
 1444              	.L115:
 451:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1445              		.loc 1 451 29 is_stmt 0 view .LVU418
 1446              	.LBE39:
 444:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1447              		.loc 1 444 21 discriminator 2 view .LVU419
 1448 02c4 4908     		lsrs	r1, r1, #1
 1449 02c6 0B40     		ands	r3, r1
 1450 02c8 E2E7     		b	.L116
 1451              	.LVL150:
 1452              	.L120:
 1453              	.LBB40:
 453:tmk_core/common/action.c ****                             break;
 1454              		.loc 1 453 29 is_stmt 1 view .LVU420
 1455 02ca FFF7FEFF 		bl	layer_or
 1456              	.LVL151:
 454:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1457              		.loc 1 454 29 view .LVU421
 1458 02ce FFE6     		b	.L63
 1459              	.LVL152:
 1460              	.L118:
 456:tmk_core/common/action.c ****                             break;
 1461              		.loc 1 456 29 view .LVU422
 1462 02d0 FFF7FEFF 		bl	layer_xor
 1463              	.LVL153:
 457:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1464              		.loc 1 457 29 view .LVU423
 1465 02d4 FCE6     		b	.L63
 1466              	.LVL154:
 1467              	.L119:
 459:tmk_core/common/action.c ****                             break;
 1468              		.loc 1 459 29 view .LVU424
 1469 02d6 FFF7FEFF 		bl	layer_state_set
 1470              	.LVL155:
 460:tmk_core/common/action.c ****                     }
 1471              		.loc 1 460 29 view .LVU425
 1472 02da F9E6     		b	.L63
 1473              	.LVL156:
 1474              	.L68:
 460:tmk_core/common/action.c ****                     }
 1475              		.loc 1 460 29 is_stmt 0 view .LVU426
 1476              	.LBE40:
 466:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1477              		.loc 1 466 13 is_stmt 1 view .LVU427
 1478 02dc E6B2     		uxtb	r6, r4
 1479 02de 2405     		lsls	r4, r4, #20
 1480              	.LVL157:
 466:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1481              		.loc 1 466 13 is_stmt 0 view .LVU428
 1482 02e0 240F     		lsrs	r4, r4, #28
 466:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1483              		.loc 1 466 16 view .LVU429
 1484 02e2 002D     		cmp	r5, #0
 1485 02e4 04D0     		beq	.L121
 467:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 1486              		.loc 1 467 17 is_stmt 1 view .LVU430
 1487 02e6 2000     		movs	r0, r4
 1488 02e8 FFF7FEFF 		bl	layer_on
 1489              	.LVL158:
 468:tmk_core/common/action.c ****             } else {
 1490              		.loc 1 468 17 view .LVU431
 1491 02ec 3000     		movs	r0, r6
 1492 02ee 35E7     		b	.L180
 1493              	.L121:
 470:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 1494              		.loc 1 470 17 view .LVU432
 1495 02f0 3000     		movs	r0, r6
 1496 02f2 FFF7FEFF 		bl	unregister_mods
 1497              	.LVL159:
 471:tmk_core/common/action.c ****             }
 1498              		.loc 1 471 17 view .LVU433
 1499 02f6 2000     		movs	r0, r4
 1500              	.LVL160:
 1501              	.L176:
 558:tmk_core/common/action.c ****                         }
 1502              		.loc 1 558 29 is_stmt 0 view .LVU434
 1503 02f8 FFF7FEFF 		bl	layer_off
 1504              	.LVL161:
 1505 02fc E8E6     		b	.L63
 1506              	.L67:
 477:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 1507              		.loc 1 477 13 is_stmt 1 view .LVU435
 477:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 1508              		.loc 1 477 37 is_stmt 0 view .LVU436
 1509 02fe E7B2     		uxtb	r7, r4
 1510 0300 3800     		movs	r0, r7
 1511 0302 F038     		subs	r0, r0, #240
 1512 0304 0428     		cmp	r0, #4
 1513 0306 3ED8     		bhi	.L122
 1514 0308 FFF7FEFF 		bl	__gnu_thumb1_case_uqi
 1515              	.L124:
 1516 030c 03       		.byte	(.L128-.L124)/2
 1517 030d 11       		.byte	(.L127-.L124)/2
 1518 030e 18       		.byte	(.L126-.L124)/2
 1519 030f 1D       		.byte	(.L125-.L124)/2
 1520 0310 27       		.byte	(.L123-.L124)/2
 1521 0311 00       		.p2align 1
 1522              	.L128:
 480:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1523              		.loc 1 480 21 is_stmt 1 view .LVU437
 480:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1524              		.loc 1 480 24 is_stmt 0 view .LVU438
 1525 0312 002D     		cmp	r5, #0
 1526 0314 07D0     		beq	.L129
 481:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1527              		.loc 1 481 25 is_stmt 1 view .LVU439
 481:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1528              		.loc 1 481 28 is_stmt 0 view .LVU440
 1529 0316 042E     		cmp	r6, #4
 1530 0318 00D9     		bls	.LCB1368
 1531 031a D9E6     		b	.L63	@long jump
 1532              	.LCB1368:
 1533              	.L130:
 482:tmk_core/common/action.c ****                         }
 1534              		.loc 1 482 29 is_stmt 1 view .LVU441
 482:tmk_core/common/action.c ****                         }
 1535              		.loc 1 482 58 is_stmt 0 view .LVU442
 1536 031c E004     		lsls	r0, r4, #19
 482:tmk_core/common/action.c ****                         }
 1537              		.loc 1 482 29 view .LVU443
 1538 031e C00E     		lsrs	r0, r0, #27
 1539 0320 FFF7FEFF 		bl	layer_invert
 1540              	.LVL162:
 1541 0324 D4E6     		b	.L63
 1542              	.L129:
 485:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1543              		.loc 1 485 25 is_stmt 1 view .LVU444
 485:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1544              		.loc 1 485 28 is_stmt 0 view .LVU445
 1545 0326 052E     		cmp	r6, #5
 1546 0328 00D9     		bls	.LCB1381
 1547 032a D1E6     		b	.L63	@long jump
 1548              	.LCB1381:
 1549 032c F6E7     		b	.L130
 1550              	.L127:
 491:tmk_core/common/action.c ****                     break;
 1551              		.loc 1 491 21 is_stmt 1 view .LVU446
 1552 032e E004     		lsls	r0, r4, #19
 1553 0330 C00E     		lsrs	r0, r0, #27
 491:tmk_core/common/action.c ****                     break;
 1554              		.loc 1 491 68 is_stmt 0 view .LVU447
 1555 0332 002D     		cmp	r5, #0
 1556 0334 E0D0     		beq	.L176
 1557              	.L179:
 545:tmk_core/common/action.c ****                         }
 1558              		.loc 1 545 29 view .LVU448
 1559 0336 FFF7FEFF 		bl	layer_on
 1560              	.LVL163:
 1561 033a C9E6     		b	.L63
 1562              	.L126:
 494:tmk_core/common/action.c ****                     break;
 1563              		.loc 1 494 21 is_stmt 1 view .LVU449
 1564 033c E004     		lsls	r0, r4, #19
 1565 033e C00E     		lsrs	r0, r0, #27
 494:tmk_core/common/action.c ****                     break;
 1566              		.loc 1 494 69 is_stmt 0 view .LVU450
 1567 0340 002D     		cmp	r5, #0
 1568 0342 F8D0     		beq	.L179
 1569 0344 D8E7     		b	.L176
 1570              	.L125:
 497:tmk_core/common/action.c ****                     break;
 1571              		.loc 1 497 21 is_stmt 1 view .LVU451
 497:tmk_core/common/action.c ****                     break;
 1572              		.loc 1 497 70 is_stmt 0 view .LVU452
 1573 0346 002D     		cmp	r5, #0
 1574 0348 04D0     		beq	.L133
 497:tmk_core/common/action.c ****                     break;
 1575              		.loc 1 497 64 discriminator 1 view .LVU453
 1576 034a E004     		lsls	r0, r4, #19
 497:tmk_core/common/action.c ****                     break;
 1577              		.loc 1 497 37 discriminator 1 view .LVU454
 1578 034c C00E     		lsrs	r0, r0, #27
 1579 034e FFF7FEFF 		bl	layer_move
 1580              	.LVL164:
 1581 0352 BDE6     		b	.L63
 1582              	.L133:
 497:tmk_core/common/action.c ****                     break;
 1583              		.loc 1 497 72 discriminator 2 view .LVU455
 1584 0354 FFF7FEFF 		bl	layer_clear
 1585              	.LVL165:
 1586 0358 BAE6     		b	.L63
 1587              	.L123:
 525:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1588              		.loc 1 525 21 is_stmt 1 view .LVU456
 525:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1589              		.loc 1 525 24 is_stmt 0 view .LVU457
 1590 035a 002D     		cmp	r5, #0
 1591 035c 09D0     		beq	.L134
 526:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1592              		.loc 1 526 25 is_stmt 1 view .LVU458
 526:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1593              		.loc 1 526 50 is_stmt 0 view .LVU459
 1594 035e E404     		lsls	r4, r4, #19
 1595              	.LVL166:
 526:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1596              		.loc 1 526 25 view .LVU460
 1597 0360 E40E     		lsrs	r4, r4, #27
 1598 0362 2000     		movs	r0, r4
 1599 0364 FFF7FEFF 		bl	layer_on
 1600              	.LVL167:
 527:tmk_core/common/action.c ****                     } else {
 1601              		.loc 1 527 25 is_stmt 1 view .LVU461
 1602 0368 0321     		movs	r1, #3
 1603 036a 2000     		movs	r0, r4
 1604 036c FFF7FEFF 		bl	set_oneshot_layer
 1605              	.LVL168:
 1606 0370 AEE6     		b	.L63
 1607              	.LVL169:
 1608              	.L134:
 529:tmk_core/common/action.c ****                         if (tap_count > 1) {
 1609              		.loc 1 529 25 view .LVU462
 1610 0372 0120     		movs	r0, #1
 1611 0374 FFF7FEFF 		bl	clear_oneshot_layer_state
 1612              	.LVL170:
 530:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1613              		.loc 1 530 25 view .LVU463
 530:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1614              		.loc 1 530 28 is_stmt 0 view .LVU464
 1615 0378 012E     		cmp	r6, #1
 1616 037a 00D8     		bhi	.LCB1448
 1617 037c A8E6     		b	.L63	@long jump
 1618              	.LCB1448:
 531:tmk_core/common/action.c ****                         }
 1619              		.loc 1 531 29 is_stmt 1 view .LVU465
 1620 037e 0220     		movs	r0, #2
 1621 0380 FFF7FEFF 		bl	clear_oneshot_layer_state
 1622              	.LVL171:
 1623 0384 A4E6     		b	.L63
 1624              	.L122:
 539:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1625              		.loc 1 539 21 view .LVU466
 539:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1626              		.loc 1 539 24 is_stmt 0 view .LVU467
 1627 0386 002D     		cmp	r5, #0
 1628 0388 06D0     		beq	.L135
 540:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1629              		.loc 1 540 25 is_stmt 1 view .LVU468
 540:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1630              		.loc 1 540 28 is_stmt 0 view .LVU469
 1631 038a 002E     		cmp	r6, #0
 1632 038c 01D0     		beq	.L136
 541:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1633              		.loc 1 541 75 is_stmt 1 view .LVU470
 542:tmk_core/common/action.c ****                         } else {
 1634              		.loc 1 542 29 view .LVU471
 1635 038e 3800     		movs	r0, r7
 1636 0390 87E6     		b	.L182
 1637              	.L136:
 544:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1638              		.loc 1 544 76 view .LVU472
 545:tmk_core/common/action.c ****                         }
 1639              		.loc 1 545 29 view .LVU473
 545:tmk_core/common/action.c ****                         }
 1640              		.loc 1 545 54 is_stmt 0 view .LVU474
 1641 0392 E004     		lsls	r0, r4, #19
 545:tmk_core/common/action.c ****                         }
 1642              		.loc 1 545 29 view .LVU475
 1643 0394 C00E     		lsrs	r0, r0, #27
 1644 0396 CEE7     		b	.L179
 1645              	.L135:
 548:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1646              		.loc 1 548 25 is_stmt 1 view .LVU476
 548:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1647              		.loc 1 548 28 is_stmt 0 view .LVU477
 1648 0398 002E     		cmp	r6, #0
 1649 039a 08D0     		beq	.L137
 549:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1650              		.loc 1 549 77 is_stmt 1 view .LVU478
 550:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1651              		.loc 1 550 29 view .LVU479
 553:tmk_core/common/action.c ****                             }
 1652              		.loc 1 553 33 is_stmt 0 view .LVU480
 1653 039c 0120     		movs	r0, #1
 550:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1654              		.loc 1 550 32 view .LVU481
 1655 039e 392F     		cmp	r7, #57
 1656 03a0 01D1     		bne	.L175
 551:tmk_core/common/action.c ****                             } else {
 1657              		.loc 1 551 33 is_stmt 1 discriminator 1 view .LVU482
 551:tmk_core/common/action.c ****                             } else {
 1658              		.loc 1 551 33 discriminator 1 view .LVU483
 551:tmk_core/common/action.c ****                             } else {
 1659              		.loc 1 551 33 discriminator 1 view .LVU484
 1660 03a2 C820     		movs	r0, #200
 1661 03a4 8000     		lsls	r0, r0, #2
 1662              	.L175:
 553:tmk_core/common/action.c ****                             }
 1663              		.loc 1 553 33 is_stmt 0 discriminator 2 view .LVU485
 1664 03a6 FFF7FEFF 		bl	chThdSleep
 1665              	.LVL172:
 555:tmk_core/common/action.c ****                         } else {
 1666              		.loc 1 555 29 is_stmt 1 discriminator 2 view .LVU486
 1667 03aa 3800     		movs	r0, r7
 1668 03ac FFE6     		b	.L181
 1669              	.L137:
 557:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1670              		.loc 1 557 79 view .LVU487
 558:tmk_core/common/action.c ****                         }
 1671              		.loc 1 558 29 view .LVU488
 558:tmk_core/common/action.c ****                         }
 1672              		.loc 1 558 55 is_stmt 0 view .LVU489
 1673 03ae E004     		lsls	r0, r4, #19
 558:tmk_core/common/action.c ****                         }
 1674              		.loc 1 558 29 view .LVU490
 1675 03b0 C00E     		lsrs	r0, r0, #27
 1676 03b2 A1E7     		b	.L176
 1677              	.L66:
 569:tmk_core/common/action.c ****             break;
 1678              		.loc 1 569 13 is_stmt 1 view .LVU491
 569:tmk_core/common/action.c ****             break;
 1679              		.loc 1 569 83 is_stmt 0 view .LVU492
 1680 03b4 2205     		lsls	r2, r4, #20
 569:tmk_core/common/action.c ****             break;
 1681              		.loc 1 569 13 view .LVU493
 1682 03b6 120F     		lsrs	r2, r2, #28
 1683 03b8 E1B2     		uxtb	r1, r4
 1684              	.LVL173:
 569:tmk_core/common/action.c ****             break;
 1685              		.loc 1 569 13 view .LVU494
 1686 03ba 0198     		ldr	r0, [sp, #4]
 1687 03bc FFF7FEFF 		bl	action_get_macro
 1688              	.LVL174:
 1689 03c0 FFF7FEFF 		bl	action_macro_play
 1690              	.LVL175:
 570:tmk_core/common/action.c **** #endif
 1691              		.loc 1 570 13 is_stmt 1 view .LVU495
 1692 03c4 84E6     		b	.L63
 1693              	.LVL176:
 1694              	.L64:
 637:tmk_core/common/action.c ****             break;
 1695              		.loc 1 637 13 view .LVU496
 637:tmk_core/common/action.c ****             break;
 1696              		.loc 1 637 64 is_stmt 0 view .LVU497
 1697 03c6 2205     		lsls	r2, r4, #20
 637:tmk_core/common/action.c ****             break;
 1698              		.loc 1 637 13 view .LVU498
 1699 03c8 120F     		lsrs	r2, r2, #28
 1700 03ca E1B2     		uxtb	r1, r4
 1701              	.LVL177:
 637:tmk_core/common/action.c ****             break;
 1702              		.loc 1 637 13 view .LVU499
 1703 03cc 0198     		ldr	r0, [sp, #4]
 1704 03ce FFF7FEFF 		bl	action_function
 1705              	.LVL178:
 638:tmk_core/common/action.c **** #endif
 1706              		.loc 1 638 13 is_stmt 1 view .LVU500
 1707 03d2 7DE6     		b	.L63
 1708              	.L186:
 1709              		.align	2
 1710              	.L185:
 1711 03d4 00000000 		.word	.LANCHOR2
 1712              		.cfi_endproc
 1713              	.LFE201:
 1715              		.section	.text.process_record_handler,"ax",%progbits
 1716              		.align	1
 1717              		.global	process_record_handler
 1718              		.syntax unified
 1719              		.code	16
 1720              		.thumb_func
 1721              		.fpu softvfp
 1723              	process_record_handler:
 1724              	.LVL179:
 1725              	.LFB200:
 194:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 1726              		.loc 1 194 50 view -0
 1727              		.cfi_startproc
 1728              		@ args = 0, pretend = 0, frame = 0
 1729              		@ frame_needed = 0, uses_anonymous_args = 0
 195:tmk_core/common/action.c ****     dprint("ACTION: ");
 1730              		.loc 1 195 5 view .LVU502
 194:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 1731              		.loc 1 194 50 is_stmt 0 view .LVU503
 1732 0000 70B5     		push	{r4, r5, r6, lr}
 1733              		.cfi_def_cfa_offset 16
 1734              		.cfi_offset 4, -16
 1735              		.cfi_offset 5, -12
 1736              		.cfi_offset 6, -8
 1737              		.cfi_offset 14, -4
 194:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 1738              		.loc 1 194 50 view .LVU504
 1739 0002 0400     		movs	r4, r0
 195:tmk_core/common/action.c ****     dprint("ACTION: ");
 1740              		.loc 1 195 23 view .LVU505
 1741 0004 8078     		ldrb	r0, [r0, #2]
 1742              	.LVL180:
 195:tmk_core/common/action.c ****     dprint("ACTION: ");
 1743              		.loc 1 195 23 view .LVU506
 1744 0006 2188     		ldrh	r1, [r4]
 1745 0008 FFF7FEFF 		bl	store_or_get_action
 1746              	.LVL181:
 1747 000c 051C     		adds	r5, r0, #0
 1748              	.LVL182:
 196:tmk_core/common/action.c ****     debug_action(action);
 1749              		.loc 1 196 23 is_stmt 1 view .LVU507
 197:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1750              		.loc 1 197 5 view .LVU508
 892:tmk_core/common/action.c **** 
 893:tmk_core/common/action.c **** /** \brief Adds the given weak modifiers and sends a keyboard report immediately.
 894:tmk_core/common/action.c ****  *
 895:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 896:tmk_core/common/action.c ****  */
 897:tmk_core/common/action.c **** void register_weak_mods(uint8_t mods) {
 898:tmk_core/common/action.c ****     if (mods) {
 899:tmk_core/common/action.c ****         add_weak_mods(mods);
 900:tmk_core/common/action.c ****         send_keyboard_report();
 901:tmk_core/common/action.c ****     }
 902:tmk_core/common/action.c **** }
 903:tmk_core/common/action.c **** 
 904:tmk_core/common/action.c **** /** \brief Removes the given weak modifiers and sends a keyboard report immediately.
 905:tmk_core/common/action.c ****  *
 906:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 907:tmk_core/common/action.c ****  */
 908:tmk_core/common/action.c **** void unregister_weak_mods(uint8_t mods) {
 909:tmk_core/common/action.c ****     if (mods) {
 910:tmk_core/common/action.c ****         del_weak_mods(mods);
 911:tmk_core/common/action.c ****         send_keyboard_report();
 912:tmk_core/common/action.c ****     }
 913:tmk_core/common/action.c **** }
 914:tmk_core/common/action.c **** 
 915:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 916:tmk_core/common/action.c ****  *
 917:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 918:tmk_core/common/action.c ****  */
 919:tmk_core/common/action.c **** void clear_keyboard(void) {
 920:tmk_core/common/action.c ****     clear_mods();
 921:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 922:tmk_core/common/action.c **** }
 923:tmk_core/common/action.c **** 
 924:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 925:tmk_core/common/action.c ****  *
 926:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 927:tmk_core/common/action.c ****  */
 928:tmk_core/common/action.c **** void clear_keyboard_but_mods(void) {
 929:tmk_core/common/action.c ****     clear_keys();
 930:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 931:tmk_core/common/action.c **** }
 932:tmk_core/common/action.c **** 
 933:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 934:tmk_core/common/action.c ****  *
 935:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 936:tmk_core/common/action.c ****  */
 937:tmk_core/common/action.c **** void clear_keyboard_but_mods_and_keys() {
 938:tmk_core/common/action.c ****     clear_weak_mods();
 939:tmk_core/common/action.c ****     clear_macro_mods();
 940:tmk_core/common/action.c ****     send_keyboard_report();
 941:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 942:tmk_core/common/action.c ****     mousekey_clear();
 943:tmk_core/common/action.c ****     mousekey_send();
 944:tmk_core/common/action.c **** #endif
 945:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 946:tmk_core/common/action.c ****     host_system_send(0);
 947:tmk_core/common/action.c ****     host_consumer_send(0);
 948:tmk_core/common/action.c **** #endif
 949:tmk_core/common/action.c **** }
 950:tmk_core/common/action.c **** 
 951:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 952:tmk_core/common/action.c ****  *
 953:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 954:tmk_core/common/action.c ****  */
 955:tmk_core/common/action.c **** bool is_tap_key(keypos_t key) {
 956:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 957:tmk_core/common/action.c ****     return is_tap_action(action);
 958:tmk_core/common/action.c **** }
 959:tmk_core/common/action.c **** 
 960:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 961:tmk_core/common/action.c ****  *
 962:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 963:tmk_core/common/action.c ****  */
 964:tmk_core/common/action.c **** bool is_tap_action(action_t action) {
 965:tmk_core/common/action.c ****     switch (action.kind.id) {
 966:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 967:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 968:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 969:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 970:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 971:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 972:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 973:tmk_core/common/action.c ****                 case OP_ONESHOT:
 974:tmk_core/common/action.c ****                     return true;
 975:tmk_core/common/action.c ****             }
 976:tmk_core/common/action.c ****             return false;
 977:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 978:tmk_core/common/action.c ****             switch (action.swap.code) {
 979:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 980:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 981:tmk_core/common/action.c ****                     return true;
 982:tmk_core/common/action.c ****             }
 983:tmk_core/common/action.c ****             return false;
 984:tmk_core/common/action.c ****         case ACT_MACRO:
 985:tmk_core/common/action.c ****         case ACT_FUNCTION:
 986:tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) {
 987:tmk_core/common/action.c ****                 return true;
 988:tmk_core/common/action.c ****             }
 989:tmk_core/common/action.c ****             return false;
 990:tmk_core/common/action.c ****     }
 991:tmk_core/common/action.c ****     return false;
 992:tmk_core/common/action.c **** }
 993:tmk_core/common/action.c **** 
 994:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 995:tmk_core/common/action.c ****  *
 996:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 997:tmk_core/common/action.c ****  */
 998:tmk_core/common/action.c **** void debug_event(keyevent_t event) { dprintf("%04X%c(%u)", (event.key.row << 8 | event.key.col), (e
 999:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1000:tmk_core/common/action.c ****  *
1001:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1002:tmk_core/common/action.c ****  */
1003:tmk_core/common/action.c **** void debug_record(keyrecord_t record) {
1004:tmk_core/common/action.c ****     debug_event(record.event);
1005:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
1006:tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
1007:tmk_core/common/action.c **** #endif
1008:tmk_core/common/action.c **** }
1009:tmk_core/common/action.c **** 
1010:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1011:tmk_core/common/action.c ****  *
1012:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1013:tmk_core/common/action.c ****  */
1014:tmk_core/common/action.c **** void debug_action(action_t action) {
1015:tmk_core/common/action.c ****     switch (action.kind.id) {
 1751              		.loc 1 1015 5 view .LVU509
1016:tmk_core/common/action.c ****         case ACT_LMODS:
1017:tmk_core/common/action.c ****             dprint("ACT_LMODS");
1018:tmk_core/common/action.c ****             break;
1019:tmk_core/common/action.c ****         case ACT_RMODS:
1020:tmk_core/common/action.c ****             dprint("ACT_RMODS");
1021:tmk_core/common/action.c ****             break;
1022:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1023:tmk_core/common/action.c ****             dprint("ACT_LMODS_TAP");
1024:tmk_core/common/action.c ****             break;
1025:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1026:tmk_core/common/action.c ****             dprint("ACT_RMODS_TAP");
1027:tmk_core/common/action.c ****             break;
1028:tmk_core/common/action.c ****         case ACT_USAGE:
1029:tmk_core/common/action.c ****             dprint("ACT_USAGE");
1030:tmk_core/common/action.c ****             break;
1031:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
1032:tmk_core/common/action.c ****             dprint("ACT_MOUSEKEY");
1033:tmk_core/common/action.c ****             break;
1034:tmk_core/common/action.c ****         case ACT_LAYER:
1035:tmk_core/common/action.c ****             dprint("ACT_LAYER");
1036:tmk_core/common/action.c ****             break;
1037:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
1038:tmk_core/common/action.c ****             dprint("ACT_LAYER_MODS");
1039:tmk_core/common/action.c ****             break;
1040:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1041:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP");
1042:tmk_core/common/action.c ****             break;
1043:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1044:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP_EXT");
1045:tmk_core/common/action.c ****             break;
1046:tmk_core/common/action.c ****         case ACT_MACRO:
1047:tmk_core/common/action.c ****             dprint("ACT_MACRO");
1048:tmk_core/common/action.c ****             break;
1049:tmk_core/common/action.c ****         case ACT_FUNCTION:
1050:tmk_core/common/action.c ****             dprint("ACT_FUNCTION");
1051:tmk_core/common/action.c ****             break;
1052:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1053:tmk_core/common/action.c ****             dprint("ACT_SWAP_HANDS");
1054:tmk_core/common/action.c ****             break;
1055:tmk_core/common/action.c ****         default:
1056:tmk_core/common/action.c ****             dprint("UNKNOWN");
1057:tmk_core/common/action.c ****             break;
1058:tmk_core/common/action.c ****     }
1059:tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param >> 8, action.kind.param & 0xff);
 1752              		.loc 1 1059 75 view .LVU510
 199:tmk_core/common/action.c ****     layer_debug();
 1753              		.loc 1 199 29 view .LVU511
 200:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 1754              		.loc 1 200 5 view .LVU512
 1755 000e FFF7FEFF 		bl	layer_debug
 1756              	.LVL183:
 201:tmk_core/common/action.c ****     default_layer_debug();
 1757              		.loc 1 201 37 view .LVU513
 202:tmk_core/common/action.c **** #endif
 1758              		.loc 1 202 5 view .LVU514
 1759 0012 FFF7FEFF 		bl	default_layer_debug
 1760              	.LVL184:
 204:tmk_core/common/action.c **** 
 1761              		.loc 1 204 15 view .LVU515
 206:tmk_core/common/action.c **** }
 1762              		.loc 1 206 5 view .LVU516
 206:tmk_core/common/action.c **** }
 1763              		.loc 1 206 5 is_stmt 0 view .LVU517
 1764 0016 291C     		adds	r1, r5, #0
 1765 0018 2000     		movs	r0, r4
 1766 001a FFF7FEFF 		bl	process_action
 1767              	.LVL185:
 207:tmk_core/common/action.c **** 
 1768              		.loc 1 207 1 view .LVU518
 1769              		@ sp needed
 1770              	.LVL186:
 1771              	.LVL187:
 207:tmk_core/common/action.c **** 
 1772              		.loc 1 207 1 view .LVU519
 1773 001e 70BD     		pop	{r4, r5, r6, pc}
 1774              		.cfi_endproc
 1775              	.LFE200:
 1777              		.section	.text.process_record,"ax",%progbits
 1778              		.align	1
 1779              		.global	process_record
 1780              		.syntax unified
 1781              		.code	16
 1782              		.thumb_func
 1783              		.fpu softvfp
 1785              	process_record:
 1786              	.LVL188:
 1787              	.LFB199:
 183:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1788              		.loc 1 183 42 is_stmt 1 view -0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 8
 1791              		@ frame_needed = 0, uses_anonymous_args = 0
 184:tmk_core/common/action.c ****         return;
 1792              		.loc 1 184 5 view .LVU521
 183:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1793              		.loc 1 183 42 is_stmt 0 view .LVU522
 1794 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 1795              		.cfi_def_cfa_offset 24
 1796              		.cfi_offset 0, -24
 1797              		.cfi_offset 1, -20
 1798              		.cfi_offset 4, -16
 1799              		.cfi_offset 5, -12
 1800              		.cfi_offset 6, -8
 1801              		.cfi_offset 14, -4
 184:tmk_core/common/action.c ****         return;
 1802              		.loc 1 184 9 view .LVU523
 1803 0002 8688     		ldrh	r6, [r0, #4]
 1804 0004 01AD     		add	r5, sp, #4
 183:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1805              		.loc 1 183 42 view .LVU524
 1806 0006 0400     		movs	r4, r0
 1807 0008 0100     		movs	r1, r0
 1808 000a 0222     		movs	r2, #2
 1809 000c 2800     		movs	r0, r5
 1810              	.LVL189:
 183:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1811              		.loc 1 183 42 view .LVU525
 1812 000e FFF7FEFF 		bl	memcpy
 1813              	.LVL190:
 1814              	.LBB47:
 1815              	.LBI47:
 1816              		.loc 2 48 20 is_stmt 1 view .LVU526
 1817              	.LBB48:
 1818              		.loc 2 48 51 view .LVU527
 1819              		.loc 2 48 74 is_stmt 0 view .LVU528
 1820 0012 002E     		cmp	r6, #0
 1821 0014 0ED0     		beq	.L188
 1822              	.LBE48:
 1823              	.LBE47:
 184:tmk_core/common/action.c ****         return;
 1824              		.loc 1 184 8 view .LVU529
 1825 0016 2A88     		ldrh	r2, [r5]
 1826 0018 074B     		ldr	r3, .L195
 1827 001a 9A42     		cmp	r2, r3
 1828 001c 0AD0     		beq	.L188
 188:tmk_core/common/action.c **** 
 1829              		.loc 1 188 5 is_stmt 1 view .LVU530
 188:tmk_core/common/action.c **** 
 1830              		.loc 1 188 10 is_stmt 0 view .LVU531
 1831 001e 2000     		movs	r0, r4
 1832 0020 FFF7FEFF 		bl	process_record_quantum
 1833              	.LVL191:
 188:tmk_core/common/action.c **** 
 1834              		.loc 1 188 8 view .LVU532
 1835 0024 0028     		cmp	r0, #0
 1836 0026 05D0     		beq	.L188
 1837              	.LVL192:
 1838              	.LBB49:
 1839              	.LBI49:
 183:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1840              		.loc 1 183 6 is_stmt 1 view .LVU533
 1841              	.LBB50:
 190:tmk_core/common/action.c ****     post_process_record_quantum(record);
 1842              		.loc 1 190 5 view .LVU534
 1843 0028 2000     		movs	r0, r4
 1844 002a FFF7FEFF 		bl	process_record_handler
 1845              	.LVL193:
 191:tmk_core/common/action.c **** }
 1846              		.loc 1 191 5 view .LVU535
 1847 002e 2000     		movs	r0, r4
 1848 0030 FFF7FEFF 		bl	post_process_record_quantum
 1849              	.LVL194:
 1850              	.L188:
 191:tmk_core/common/action.c **** }
 1851              		.loc 1 191 5 is_stmt 0 view .LVU536
 1852              	.LBE50:
 1853              	.LBE49:
 192:tmk_core/common/action.c **** 
 1854              		.loc 1 192 1 view .LVU537
 1855              		@ sp needed
 1856              	.LVL195:
 192:tmk_core/common/action.c **** 
 1857              		.loc 1 192 1 view .LVU538
 1858 0034 73BD     		pop	{r0, r1, r4, r5, r6, pc}
 1859              	.L196:
 1860 0036 C046     		.align	2
 1861              	.L195:
 1862 0038 FFFF0000 		.word	65535
 1863              		.cfi_endproc
 1864              	.LFE199:
 1866              		.section	.text.process_record_nocache,"ax",%progbits
 1867              		.align	1
 1868              		.global	process_record_nocache
 1869              		.syntax unified
 1870              		.code	16
 1871              		.thumb_func
 1872              		.fpu softvfp
 1874              	process_record_nocache:
 1875              	.LVL196:
 1876              	.LFB195:
 143:tmk_core/common/action.c ****     disable_action_cache = true;
 1877              		.loc 1 143 50 is_stmt 1 view -0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 0
 1880              		@ frame_needed = 0, uses_anonymous_args = 0
 144:tmk_core/common/action.c ****     process_record(record);
 1881              		.loc 1 144 5 view .LVU540
 144:tmk_core/common/action.c ****     process_record(record);
 1882              		.loc 1 144 26 is_stmt 0 view .LVU541
 1883 0000 0123     		movs	r3, #1
 143:tmk_core/common/action.c ****     disable_action_cache = true;
 1884              		.loc 1 143 50 view .LVU542
 1885 0002 10B5     		push	{r4, lr}
 1886              		.cfi_def_cfa_offset 8
 1887              		.cfi_offset 4, -8
 1888              		.cfi_offset 14, -4
 144:tmk_core/common/action.c ****     process_record(record);
 1889              		.loc 1 144 26 view .LVU543
 1890 0004 034C     		ldr	r4, .L198
 147:tmk_core/common/action.c **** #else
 1891              		.loc 1 147 1 view .LVU544
 1892              		@ sp needed
 144:tmk_core/common/action.c ****     process_record(record);
 1893              		.loc 1 144 26 view .LVU545
 1894 0006 2370     		strb	r3, [r4]
 145:tmk_core/common/action.c ****     disable_action_cache = false;
 1895              		.loc 1 145 5 is_stmt 1 view .LVU546
 1896 0008 FFF7FEFF 		bl	process_record
 1897              	.LVL197:
 146:tmk_core/common/action.c **** }
 1898              		.loc 1 146 5 view .LVU547
 146:tmk_core/common/action.c **** }
 1899              		.loc 1 146 26 is_stmt 0 view .LVU548
 1900 000c 0023     		movs	r3, #0
 1901 000e 2370     		strb	r3, [r4]
 147:tmk_core/common/action.c **** #else
 1902              		.loc 1 147 1 view .LVU549
 1903 0010 10BD     		pop	{r4, pc}
 1904              	.L199:
 1905 0012 C046     		.align	2
 1906              	.L198:
 1907 0014 00000000 		.word	.LANCHOR3
 1908              		.cfi_endproc
 1909              	.LFE195:
 1911              		.section	.text.register_weak_mods,"ax",%progbits
 1912              		.align	1
 1913              		.global	register_weak_mods
 1914              		.syntax unified
 1915              		.code	16
 1916              		.thumb_func
 1917              		.fpu softvfp
 1919              	register_weak_mods:
 1920              	.LVL198:
 1921              	.LFB207:
 897:tmk_core/common/action.c ****     if (mods) {
 1922              		.loc 1 897 39 is_stmt 1 view -0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 0
 1925              		@ frame_needed = 0, uses_anonymous_args = 0
 898:tmk_core/common/action.c ****         add_weak_mods(mods);
 1926              		.loc 1 898 5 view .LVU551
 897:tmk_core/common/action.c ****     if (mods) {
 1927              		.loc 1 897 39 is_stmt 0 view .LVU552
 1928 0000 10B5     		push	{r4, lr}
 1929              		.cfi_def_cfa_offset 8
 1930              		.cfi_offset 4, -8
 1931              		.cfi_offset 14, -4
 898:tmk_core/common/action.c ****         add_weak_mods(mods);
 1932              		.loc 1 898 8 view .LVU553
 1933 0002 0028     		cmp	r0, #0
 1934 0004 03D0     		beq	.L200
 899:tmk_core/common/action.c ****         send_keyboard_report();
 1935              		.loc 1 899 9 is_stmt 1 view .LVU554
 1936 0006 FFF7FEFF 		bl	add_weak_mods
 1937              	.LVL199:
 900:tmk_core/common/action.c ****     }
 1938              		.loc 1 900 9 view .LVU555
 1939 000a FFF7FEFF 		bl	send_keyboard_report
 1940              	.LVL200:
 1941              	.L200:
 902:tmk_core/common/action.c **** 
 1942              		.loc 1 902 1 is_stmt 0 view .LVU556
 1943              		@ sp needed
 1944 000e 10BD     		pop	{r4, pc}
 1945              		.cfi_endproc
 1946              	.LFE207:
 1948              		.section	.text.unregister_weak_mods,"ax",%progbits
 1949              		.align	1
 1950              		.global	unregister_weak_mods
 1951              		.syntax unified
 1952              		.code	16
 1953              		.thumb_func
 1954              		.fpu softvfp
 1956              	unregister_weak_mods:
 1957              	.LVL201:
 1958              	.LFB208:
 908:tmk_core/common/action.c ****     if (mods) {
 1959              		.loc 1 908 41 is_stmt 1 view -0
 1960              		.cfi_startproc
 1961              		@ args = 0, pretend = 0, frame = 0
 1962              		@ frame_needed = 0, uses_anonymous_args = 0
 909:tmk_core/common/action.c ****         del_weak_mods(mods);
 1963              		.loc 1 909 5 view .LVU558
 908:tmk_core/common/action.c ****     if (mods) {
 1964              		.loc 1 908 41 is_stmt 0 view .LVU559
 1965 0000 10B5     		push	{r4, lr}
 1966              		.cfi_def_cfa_offset 8
 1967              		.cfi_offset 4, -8
 1968              		.cfi_offset 14, -4
 909:tmk_core/common/action.c ****         del_weak_mods(mods);
 1969              		.loc 1 909 8 view .LVU560
 1970 0002 0028     		cmp	r0, #0
 1971 0004 03D0     		beq	.L205
 910:tmk_core/common/action.c ****         send_keyboard_report();
 1972              		.loc 1 910 9 is_stmt 1 view .LVU561
 1973 0006 FFF7FEFF 		bl	del_weak_mods
 1974              	.LVL202:
 911:tmk_core/common/action.c ****     }
 1975              		.loc 1 911 9 view .LVU562
 1976 000a FFF7FEFF 		bl	send_keyboard_report
 1977              	.LVL203:
 1978              	.L205:
 913:tmk_core/common/action.c **** 
 1979              		.loc 1 913 1 is_stmt 0 view .LVU563
 1980              		@ sp needed
 1981 000e 10BD     		pop	{r4, pc}
 1982              		.cfi_endproc
 1983              	.LFE208:
 1985              		.section	.text.clear_keyboard_but_mods_and_keys,"ax",%progbits
 1986              		.align	1
 1987              		.global	clear_keyboard_but_mods_and_keys
 1988              		.syntax unified
 1989              		.code	16
 1990              		.thumb_func
 1991              		.fpu softvfp
 1993              	clear_keyboard_but_mods_and_keys:
 1994              	.LFB211:
 937:tmk_core/common/action.c ****     clear_weak_mods();
 1995              		.loc 1 937 41 is_stmt 1 view -0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 938:tmk_core/common/action.c ****     clear_macro_mods();
 1999              		.loc 1 938 5 view .LVU565
 937:tmk_core/common/action.c ****     clear_weak_mods();
 2000              		.loc 1 937 41 is_stmt 0 view .LVU566
 2001 0000 10B5     		push	{r4, lr}
 2002              		.cfi_def_cfa_offset 8
 2003              		.cfi_offset 4, -8
 2004              		.cfi_offset 14, -4
 938:tmk_core/common/action.c ****     clear_macro_mods();
 2005              		.loc 1 938 5 view .LVU567
 2006 0002 FFF7FEFF 		bl	clear_weak_mods
 2007              	.LVL204:
 939:tmk_core/common/action.c ****     send_keyboard_report();
 2008              		.loc 1 939 5 is_stmt 1 view .LVU568
 2009 0006 FFF7FEFF 		bl	clear_macro_mods
 2010              	.LVL205:
 940:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 2011              		.loc 1 940 5 view .LVU569
 2012 000a FFF7FEFF 		bl	send_keyboard_report
 2013              	.LVL206:
 942:tmk_core/common/action.c ****     mousekey_send();
 2014              		.loc 1 942 5 view .LVU570
 2015 000e FFF7FEFF 		bl	mousekey_clear
 2016              	.LVL207:
 943:tmk_core/common/action.c **** #endif
 2017              		.loc 1 943 5 view .LVU571
 2018 0012 FFF7FEFF 		bl	mousekey_send
 2019              	.LVL208:
 946:tmk_core/common/action.c ****     host_consumer_send(0);
 2020              		.loc 1 946 5 view .LVU572
 2021 0016 0020     		movs	r0, #0
 2022 0018 FFF7FEFF 		bl	host_system_send
 2023              	.LVL209:
 947:tmk_core/common/action.c **** #endif
 2024              		.loc 1 947 5 view .LVU573
 2025 001c 0020     		movs	r0, #0
 2026 001e FFF7FEFF 		bl	host_consumer_send
 2027              	.LVL210:
 949:tmk_core/common/action.c **** 
 2028              		.loc 1 949 1 is_stmt 0 view .LVU574
 2029              		@ sp needed
 2030 0022 10BD     		pop	{r4, pc}
 2031              		.cfi_endproc
 2032              	.LFE211:
 2034              		.section	.text.clear_keyboard_but_mods,"ax",%progbits
 2035              		.align	1
 2036              		.global	clear_keyboard_but_mods
 2037              		.syntax unified
 2038              		.code	16
 2039              		.thumb_func
 2040              		.fpu softvfp
 2042              	clear_keyboard_but_mods:
 2043              	.LFB210:
 928:tmk_core/common/action.c ****     clear_keys();
 2044              		.loc 1 928 36 is_stmt 1 view -0
 2045              		.cfi_startproc
 2046              		@ args = 0, pretend = 0, frame = 0
 2047              		@ frame_needed = 0, uses_anonymous_args = 0
 929:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 2048              		.loc 1 929 5 view .LVU576
 928:tmk_core/common/action.c ****     clear_keys();
 2049              		.loc 1 928 36 is_stmt 0 view .LVU577
 2050 0000 10B5     		push	{r4, lr}
 2051              		.cfi_def_cfa_offset 8
 2052              		.cfi_offset 4, -8
 2053              		.cfi_offset 14, -4
 929:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 2054              		.loc 1 929 5 view .LVU578
 2055 0002 FFF7FEFF 		bl	clear_keys
 2056              	.LVL211:
 930:tmk_core/common/action.c **** }
 2057              		.loc 1 930 5 is_stmt 1 view .LVU579
 931:tmk_core/common/action.c **** 
 2058              		.loc 1 931 1 is_stmt 0 view .LVU580
 2059              		@ sp needed
 930:tmk_core/common/action.c **** }
 2060              		.loc 1 930 5 view .LVU581
 2061 0006 FFF7FEFF 		bl	clear_keyboard_but_mods_and_keys
 2062              	.LVL212:
 931:tmk_core/common/action.c **** 
 2063              		.loc 1 931 1 view .LVU582
 2064 000a 10BD     		pop	{r4, pc}
 2065              		.cfi_endproc
 2066              	.LFE210:
 2068              		.section	.text.clear_keyboard,"ax",%progbits
 2069              		.align	1
 2070              		.global	clear_keyboard
 2071              		.syntax unified
 2072              		.code	16
 2073              		.thumb_func
 2074              		.fpu softvfp
 2076              	clear_keyboard:
 2077              	.LFB209:
 919:tmk_core/common/action.c ****     clear_mods();
 2078              		.loc 1 919 27 is_stmt 1 view -0
 2079              		.cfi_startproc
 2080              		@ args = 0, pretend = 0, frame = 0
 2081              		@ frame_needed = 0, uses_anonymous_args = 0
 920:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2082              		.loc 1 920 5 view .LVU584
 919:tmk_core/common/action.c ****     clear_mods();
 2083              		.loc 1 919 27 is_stmt 0 view .LVU585
 2084 0000 10B5     		push	{r4, lr}
 2085              		.cfi_def_cfa_offset 8
 2086              		.cfi_offset 4, -8
 2087              		.cfi_offset 14, -4
 920:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2088              		.loc 1 920 5 view .LVU586
 2089 0002 FFF7FEFF 		bl	clear_mods
 2090              	.LVL213:
 921:tmk_core/common/action.c **** }
 2091              		.loc 1 921 5 is_stmt 1 view .LVU587
 922:tmk_core/common/action.c **** 
 2092              		.loc 1 922 1 is_stmt 0 view .LVU588
 2093              		@ sp needed
 921:tmk_core/common/action.c **** }
 2094              		.loc 1 921 5 view .LVU589
 2095 0006 FFF7FEFF 		bl	clear_keyboard_but_mods
 2096              	.LVL214:
 922:tmk_core/common/action.c **** 
 2097              		.loc 1 922 1 view .LVU590
 2098 000a 10BD     		pop	{r4, pc}
 2099              		.cfi_endproc
 2100              	.LFE209:
 2102              		.section	.text.is_tap_action,"ax",%progbits
 2103              		.align	1
 2104              		.global	is_tap_action
 2105              		.syntax unified
 2106              		.code	16
 2107              		.thumb_func
 2108              		.fpu softvfp
 2110              	is_tap_action:
 2111              	.LVL215:
 2112              	.LFB213:
 964:tmk_core/common/action.c ****     switch (action.kind.id) {
 2113              		.loc 1 964 37 is_stmt 1 view -0
 2114              		.cfi_startproc
 2115              		@ args = 0, pretend = 0, frame = 0
 2116              		@ frame_needed = 0, uses_anonymous_args = 0
 964:tmk_core/common/action.c ****     switch (action.kind.id) {
 2117              		.loc 1 964 37 is_stmt 0 view .LVU592
 2118 0000 0121     		movs	r1, #1
 2119 0002 10B5     		push	{r4, lr}
 2120              		.cfi_def_cfa_offset 8
 2121              		.cfi_offset 4, -8
 2122              		.cfi_offset 14, -4
 2123 0004 0C00     		movs	r4, r1
 965:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2124              		.loc 1 965 24 view .LVU593
 2125 0006 0204     		lsls	r2, r0, #16
 2126 0008 120F     		lsrs	r2, r2, #28
 2127 000a 9440     		lsls	r4, r4, r2
 2128 000c 9022     		movs	r2, #144
 2129 000e 1202     		lsls	r2, r2, #8
 2130 0010 C3B2     		uxtb	r3, r0
 2131              	.LVL216:
 965:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2132              		.loc 1 965 5 is_stmt 1 view .LVU594
 2133 0012 2240     		ands	r2, r4
 2134 0014 18D1     		bne	.L214
 2135 0016 0E48     		ldr	r0, .L225
 2136              	.LVL217:
 965:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2137              		.loc 1 965 5 is_stmt 0 view .LVU595
 2138 0018 0442     		tst	r4, r0
 2139 001a 03D1     		bne	.L215
 2140 001c 4020     		movs	r0, #64
 2141 001e 2040     		ands	r0, r4
 2142 0020 0DD1     		bne	.L216
 2143              	.LVL218:
 2144              	.L217:
 992:tmk_core/common/action.c **** 
 2145              		.loc 1 992 1 view .LVU596
 2146              		@ sp needed
 2147 0022 10BD     		pop	{r4, pc}
 2148              	.LVL219:
 2149              	.L215:
 970:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2150              		.loc 1 970 13 is_stmt 1 view .LVU597
 974:tmk_core/common/action.c ****             }
 2151              		.loc 1 974 28 is_stmt 0 view .LVU598
 2152 0024 0800     		movs	r0, r1
 2153 0026 F02B     		cmp	r3, #240
 2154 0028 FBD0     		beq	.L217
 2155 002a 04D8     		bhi	.L218
 2156 002c E721     		movs	r1, #231
 2157 002e 9942     		cmp	r1, r3
 2158 0030 5241     		adcs	r2, r2, r2
 2159 0032 1000     		movs	r0, r2
 2160 0034 F5E7     		b	.L217
 2161              	.L218:
 976:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2162              		.loc 1 976 20 view .LVU599
 2163 0036 F43B     		subs	r3, r3, #244
 2164              	.LVL220:
 2165              	.L224:
 976:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2166              		.loc 1 976 20 view .LVU600
 2167 0038 5842     		rsbs	r0, r3, #0
 2168 003a 5841     		adcs	r0, r0, r3
 2169 003c F1E7     		b	.L217
 2170              	.LVL221:
 2171              	.L216:
 978:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2172              		.loc 1 978 13 is_stmt 1 view .LVU601
 974:tmk_core/common/action.c ****             }
 2173              		.loc 1 974 28 is_stmt 0 view .LVU602
 2174 003e 0800     		movs	r0, r1
 2175 0040 E72B     		cmp	r3, #231
 2176 0042 EED9     		bls	.L217
 976:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2177              		.loc 1 976 20 view .LVU603
 2178 0044 F13B     		subs	r3, r3, #241
 2179              	.LVL222:
 976:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2180              		.loc 1 976 20 view .LVU604
 2181 0046 F7E7     		b	.L224
 2182              	.LVL223:
 2183              	.L214:
 986:tmk_core/common/action.c ****                 return true;
 2184              		.loc 1 986 13 is_stmt 1 view .LVU605
 986:tmk_core/common/action.c ****                 return true;
 2185              		.loc 1 986 16 is_stmt 0 view .LVU606
 2186 0048 C00A     		lsrs	r0, r0, #11
 2187              	.LVL224:
 986:tmk_core/common/action.c ****                 return true;
 2188              		.loc 1 986 16 view .LVU607
 2189 004a 0840     		ands	r0, r1
 2190 004c E9E7     		b	.L217
 2191              	.L226:
 2192 004e C046     		.align	2
 2193              	.L225:
 2194 0050 0C0C0000 		.word	3084
 2195              		.cfi_endproc
 2196              	.LFE213:
 2198              		.section	.text.is_tap_key,"ax",%progbits
 2199              		.align	1
 2200              		.global	is_tap_key
 2201              		.syntax unified
 2202              		.code	16
 2203              		.thumb_func
 2204              		.fpu softvfp
 2206              	is_tap_key:
 2207              	.LFB212:
 955:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2208              		.loc 1 955 31 is_stmt 1 view -0
 2209              		.cfi_startproc
 2210              		@ args = 0, pretend = 0, frame = 8
 2211              		@ frame_needed = 0, uses_anonymous_args = 0
 956:tmk_core/common/action.c ****     return is_tap_action(action);
 2212              		.loc 1 956 5 view .LVU609
 955:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2213              		.loc 1 955 31 is_stmt 0 view .LVU610
 2214 0000 07B5     		push	{r0, r1, r2, lr}
 2215              		.cfi_def_cfa_offset 16
 2216              		.cfi_offset 0, -16
 2217              		.cfi_offset 1, -12
 2218              		.cfi_offset 2, -8
 2219              		.cfi_offset 14, -4
 955:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2220              		.loc 1 955 31 view .LVU611
 2221 0002 01AB     		add	r3, sp, #4
 2222 0004 1880     		strh	r0, [r3]
 956:tmk_core/common/action.c ****     return is_tap_action(action);
 2223              		.loc 1 956 23 view .LVU612
 2224 0006 0198     		ldr	r0, [sp, #4]
 2225 0008 FFF7FEFF 		bl	layer_switch_get_action
 2226              	.LVL225:
 957:tmk_core/common/action.c **** }
 2227              		.loc 1 957 5 is_stmt 1 view .LVU613
 957:tmk_core/common/action.c **** }
 2228              		.loc 1 957 12 is_stmt 0 view .LVU614
 2229 000c FFF7FEFF 		bl	is_tap_action
 2230              	.LVL226:
 958:tmk_core/common/action.c **** 
 2231              		.loc 1 958 1 view .LVU615
 2232              		@ sp needed
 2233 0010 0EBD     		pop	{r1, r2, r3, pc}
 2234              		.cfi_endproc
 2235              	.LFE212:
 2237              		.section	.text.debug_event,"ax",%progbits
 2238              		.align	1
 2239              		.global	debug_event
 2240              		.syntax unified
 2241              		.code	16
 2242              		.thumb_func
 2243              		.fpu softvfp
 2245              	debug_event:
 2246              	.LFB214:
 998:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2247              		.loc 1 998 36 is_stmt 1 view -0
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 8
 2250              		@ frame_needed = 0, uses_anonymous_args = 0
 2251              		@ link register save eliminated.
 998:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2252              		.loc 1 998 138 view .LVU617
 998:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2253              		.loc 1 998 36 is_stmt 0 view .LVU618
 2254 0000 82B0     		sub	sp, sp, #8
 2255              		.cfi_def_cfa_offset 8
 998:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2256              		.loc 1 998 1 view .LVU619
 2257 0002 02B0     		add	sp, sp, #8
 2258              		@ sp needed
 2259 0004 7047     		bx	lr
 2260              		.cfi_endproc
 2261              	.LFE214:
 2263              		.section	.text.debug_record,"ax",%progbits
 2264              		.align	1
 2265              		.global	debug_record
 2266              		.syntax unified
 2267              		.code	16
 2268              		.thumb_func
 2269              		.fpu softvfp
 2271              	debug_record:
 2272              	.LFB215:
1003:tmk_core/common/action.c ****     debug_event(record.event);
 2273              		.loc 1 1003 39 is_stmt 1 view -0
 2274              		.cfi_startproc
 2275              		@ args = 0, pretend = 0, frame = 8
 2276              		@ frame_needed = 0, uses_anonymous_args = 0
 2277              		@ link register save eliminated.
1004:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 2278              		.loc 1 1004 5 view .LVU621
 998:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2279              		.loc 1 998 138 view .LVU622
1006:tmk_core/common/action.c **** #endif
 2280              		.loc 1 1006 77 view .LVU623
1003:tmk_core/common/action.c ****     debug_event(record.event);
 2281              		.loc 1 1003 39 is_stmt 0 view .LVU624
 2282 0000 82B0     		sub	sp, sp, #8
 2283              		.cfi_def_cfa_offset 8
1008:tmk_core/common/action.c **** 
 2284              		.loc 1 1008 1 view .LVU625
 2285 0002 02B0     		add	sp, sp, #8
 2286              		@ sp needed
 2287 0004 7047     		bx	lr
 2288              		.cfi_endproc
 2289              	.LFE215:
 2291              		.section	.text.debug_action,"ax",%progbits
 2292              		.align	1
 2293              		.global	debug_action
 2294              		.syntax unified
 2295              		.code	16
 2296              		.thumb_func
 2297              		.fpu softvfp
 2299              	debug_action:
 2300              	.LVL227:
 2301              	.LFB216:
1014:tmk_core/common/action.c ****     switch (action.kind.id) {
 2302              		.loc 1 1014 36 is_stmt 1 view -0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 0
 2305              		@ frame_needed = 0, uses_anonymous_args = 0
 2306              		@ link register save eliminated.
1015:tmk_core/common/action.c ****         case ACT_LMODS:
 2307              		.loc 1 1015 5 view .LVU627
 2308              		.loc 1 1059 75 view .LVU628
1060:tmk_core/common/action.c **** }
 2309              		.loc 1 1060 1 is_stmt 0 view .LVU629
 2310              		@ sp needed
 2311 0000 7047     		bx	lr
 2312              		.cfi_endproc
 2313              	.LFE216:
 2315              		.global	disable_action_cache
 2316              		.global	tp_buttons
 2317              		.section	.bss.disable_action_cache,"aw",%nobits
 2318              		.set	.LANCHOR3,. + 0
 2321              	disable_action_cache:
 2322 0000 00       		.space	1
 2323              		.section	.bss.tp_buttons,"aw",%nobits
 2324              		.align	2
 2325              		.set	.LANCHOR2,. + 0
 2328              	tp_buttons:
 2329 0000 00000000 		.space	4
 2330              		.section	.rodata.CSWTCH.16,"a"
 2331              		.set	.LANCHOR0,. + 0
 2334              	CSWTCH.16:
 2335 0000 81       		.byte	-127
 2336 0001 82       		.byte	-126
 2337 0002 83       		.byte	-125
 2338              		.section	.rodata.CSWTCH.17,"a"
 2339              		.align	1
 2340              		.set	.LANCHOR1,. + 0
 2343              	CSWTCH.17:
 2344 0000 E200     		.short	226
 2345 0002 E900     		.short	233
 2346 0004 EA00     		.short	234
 2347 0006 B500     		.short	181
 2348 0008 B600     		.short	182
 2349 000a B700     		.short	183
 2350 000c CD00     		.short	205
 2351 000e 8301     		.short	387
 2352 0010 CC00     		.short	204
 2353 0012 8A01     		.short	394
 2354 0014 9201     		.short	402
 2355 0016 9401     		.short	404
 2356 0018 2102     		.short	545
 2357 001a 2302     		.short	547
 2358 001c 2402     		.short	548
 2359 001e 2502     		.short	549
 2360 0020 2602     		.short	550
 2361 0022 2702     		.short	551
 2362 0024 2A02     		.short	554
 2363 0026 B300     		.short	179
 2364 0028 B400     		.short	180
 2365 002a 6F00     		.short	111
 2366 002c 7000     		.short	112
 2367              		.text
 2368              	.Letext0:
 2369              		.file 4 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_
 2370              		.file 5 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdi
 2371              		.file 6 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\arm-none-eabi\\include\\stdint.h"
 2372              		.file 7 "tmk_core/common/keycode.h"
 2373              		.file 8 "c:\\msys64\\home\\kyleo\\qmk_utils\\gcc-arm-none-eabi\\lib\\gcc\\arm-none-eabi\\8.3.1\\in
 2374              		.file 9 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 2375              		.file 10 "./lib/chibios/os/rt/include/chsystypes.h"
 2376              		.file 11 "./lib/chibios/os/rt/include/chschd.h"
 2377              		.file 12 "./lib/chibios/os/rt/include/chtime.h"
 2378              		.file 13 "./lib/chibios/os/common/ext/ST/STM32F0xx/system_stm32f0xx.h"
 2379              		.file 14 "./lib/chibios/os/common/ext/ST/STM32F0xx/stm32f072xb.h"
 2380              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 2381              		.file 16 "./lib/chibios/os/common/ports/ARMCMx/chcore_v6m.h"
 2382              		.file 17 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 2383              		.file 18 "./lib/chibios/os/rt/include/chsem.h"
 2384              		.file 19 "./lib/chibios/os/rt/include/chmtx.h"
 2385              		.file 20 "./lib/chibios/os/rt/include/chsys.h"
 2386              		.file 21 "./lib/chibios/os/rt/include/chregistry.h"
 2387              		.file 22 "./lib/chibios/os/oslib/include/chmemcore.h"
 2388              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 2389              		.file 24 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/stm32_gpio.h"
 2390              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 2391              		.file 26 "./lib/chibios/os/hal/include/hal_i2c.h"
 2392              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 2393              		.file 28 "./lib/chibios/os/hal/include/hal_pwm.h"
 2394              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 2395              		.file 30 "./lib/chibios/os/hal/include/hal_spi.h"
 2396              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/SPIv2/hal_spi_lld.h"
 2397              		.file 32 "./lib/chibios/os/hal/include/hal_usb.h"
 2398              		.file 33 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 2399              		.file 34 "tmk_core/common/host.h"
 2400              		.file 35 "tmk_core/common/mousekey.h"
 2401              		.file 36 "tmk_core/common/command.h"
 2402              		.file 37 "tmk_core/common/action_code.h"
 2403              		.file 38 "tmk_core/common/action.h"
 2404              		.file 39 "tmk_core/common/action_layer.h"
 2405              		.file 40 "tmk_core/common/action_util.h"
 2406              		.file 41 "tmk_core/common/debug.h"
 2407              		.file 42 "./lib/chibios/os/rt/include/chthreads.h"
 2408              		.file 43 "tmk_core/common/led.h"
 2409              		.file 44 "tmk_core/common/action_macro.h"
 2410              		.file 45 "tmk_core/common/action_tapping.h"
 2411              		.file 46 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 action.c
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:16     .text.action_exec:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:24     .text.action_exec:00000000 action_exec
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:64     .text.process_record_quantum:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:71     .text.process_record_quantum:00000000 process_record_quantum
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:90     .text.post_process_record_quantum:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:97     .text.post_process_record_quantum:00000000 post_process_record_quantum
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:113    .text.process_record_tap_hint:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:120    .text.process_record_tap_hint:00000000 process_record_tap_hint
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:148    .text.register_code:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:155    .text.register_code:00000000 register_code
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:413    .text.register_code:000000f8 $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:422    .text.unregister_code:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:429    .text.unregister_code:00000000 unregister_code
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:607    .text.tap_code:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:614    .text.tap_code:00000000 tap_code
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:658    .text.register_mods:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:665    .text.register_mods:00000000 register_mods
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:695    .text.unregister_mods:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:702    .text.unregister_mods:00000000 unregister_mods
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:732    .text.process_action:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:739    .text.process_action:00000000 process_action
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:829    .text.process_action:0000004e $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:845    .text.process_action:0000006e $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1785   .text.process_record:00000000 process_record
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1516   .text.process_action:0000030c $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1711   .text.process_action:000003d4 $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1716   .text.process_record_handler:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1723   .text.process_record_handler:00000000 process_record_handler
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1778   .text.process_record:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1862   .text.process_record:00000038 $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1867   .text.process_record_nocache:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1874   .text.process_record_nocache:00000000 process_record_nocache
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1907   .text.process_record_nocache:00000014 $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1912   .text.register_weak_mods:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1919   .text.register_weak_mods:00000000 register_weak_mods
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1949   .text.unregister_weak_mods:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1956   .text.unregister_weak_mods:00000000 unregister_weak_mods
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1986   .text.clear_keyboard_but_mods_and_keys:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1993   .text.clear_keyboard_but_mods_and_keys:00000000 clear_keyboard_but_mods_and_keys
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2035   .text.clear_keyboard_but_mods:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2042   .text.clear_keyboard_but_mods:00000000 clear_keyboard_but_mods
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2069   .text.clear_keyboard:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2076   .text.clear_keyboard:00000000 clear_keyboard
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2103   .text.is_tap_action:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2110   .text.is_tap_action:00000000 is_tap_action
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2194   .text.is_tap_action:00000050 $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2199   .text.is_tap_key:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2206   .text.is_tap_key:00000000 is_tap_key
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2238   .text.debug_event:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2245   .text.debug_event:00000000 debug_event
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2264   .text.debug_record:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2271   .text.debug_record:00000000 debug_record
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2292   .text.debug_action:00000000 $t
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2299   .text.debug_action:00000000 debug_action
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2321   .bss.disable_action_cache:00000000 disable_action_cache
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2328   .bss.tp_buttons:00000000 tp_buttons
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2322   .bss.disable_action_cache:00000000 $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2324   .bss.tp_buttons:00000000 $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2334   .rodata.CSWTCH.16:00000000 CSWTCH.16
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2339   .rodata.CSWTCH.17:00000000 $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:2343   .rodata.CSWTCH.17:00000000 CSWTCH.17
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1521   .text.process_action:00000311 $d
C:\Users\kyleo\AppData\Local\Temp\ccljKxZB.s:1521   .text.process_action:00000312 $t

UNDEFINED SYMBOLS
action_tapping_process
layer_switch_get_action
host_keyboard_leds
add_key
send_keyboard_report
chThdSleep
del_key
command_proc
is_key_pressed
add_mods
host_system_send
host_consumer_send
mousekey_on
mousekey_send
keyboard_report
del_mods
mousekey_off
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__gnu_thumb1_case_uhi
add_weak_mods
led_set
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
get_oneshot_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_or
default_layer_xor
default_layer_set
layer_and
layer_or
layer_xor
layer_state_set
__gnu_thumb1_case_uqi
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
memcpy
clear_macro_mods
mousekey_clear
clear_keys
clear_mods
