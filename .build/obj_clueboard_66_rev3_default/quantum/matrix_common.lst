   1               		.file	"matrix_common.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init_user,"ax",@progbits
  11               		.weak	matrix_init_user
  13               	matrix_init_user:
  14               	.LFB9:
  15               		.file 1 "quantum/matrix_common.c"
   1:quantum/matrix_common.c **** #include "matrix.h"
   2:quantum/matrix_common.c **** #include "debounce.h"
   3:quantum/matrix_common.c **** #include "wait.h"
   4:quantum/matrix_common.c **** #include "print.h"
   5:quantum/matrix_common.c **** #include "debug.h"
   6:quantum/matrix_common.c **** 
   7:quantum/matrix_common.c **** #ifndef MATRIX_IO_DELAY
   8:quantum/matrix_common.c **** #    define MATRIX_IO_DELAY 30
   9:quantum/matrix_common.c **** #endif
  10:quantum/matrix_common.c **** 
  11:quantum/matrix_common.c **** /* matrix state(1:on, 0:off) */
  12:quantum/matrix_common.c **** matrix_row_t raw_matrix[MATRIX_ROWS];
  13:quantum/matrix_common.c **** matrix_row_t matrix[MATRIX_ROWS];
  14:quantum/matrix_common.c **** 
  15:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  16:quantum/matrix_common.c **** extern const matrix_row_t matrix_mask[];
  17:quantum/matrix_common.c **** #endif
  18:quantum/matrix_common.c **** 
  19:quantum/matrix_common.c **** // user-defined overridable functions
  20:quantum/matrix_common.c **** 
  21:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_kb(void) { matrix_init_user(); }
  22:quantum/matrix_common.c **** 
  23:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_kb(void) { matrix_scan_user(); }
  24:quantum/matrix_common.c **** 
  25:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_user(void) {}
  16               		.loc 1 25 51 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 25 52 view .LVU1
  23               	/* epilogue start */
  24               		.loc 1 25 1 is_stmt 0 view .LVU2
  25 0000 0895      		ret
  26               		.cfi_endproc
  27               	.LFE9:
  29               		.set	matrix_init_user.localalias.0,matrix_init_user
  30               		.section	.text.matrix_init_kb,"ax",@progbits
  31               		.weak	matrix_init_kb
  33               	matrix_init_kb:
  34               	.LFB7:
  21:quantum/matrix_common.c **** 
  35               		.loc 1 21 49 is_stmt 1 view -0
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  21:quantum/matrix_common.c **** 
  41               		.loc 1 21 51 view .LVU4
  42 0000 0C94 0000 		jmp matrix_init_user
  43               	.LVL0:
  44               		.cfi_endproc
  45               	.LFE7:
  47               		.section	.text.matrix_scan_user,"ax",@progbits
  48               		.weak	matrix_scan_user
  50               	matrix_scan_user:
  51               	.LFB24:
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  57               	/* epilogue start */
  58 0000 0895      		ret
  59               		.cfi_endproc
  60               	.LFE24:
  62               		.section	.text.matrix_scan_kb,"ax",@progbits
  63               		.weak	matrix_scan_kb
  65               	matrix_scan_kb:
  66               	.LFB8:
  23:quantum/matrix_common.c **** 
  67               		.loc 1 23 49 view -0
  68               		.cfi_startproc
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  23:quantum/matrix_common.c **** 
  73               		.loc 1 23 51 view .LVU6
  74 0000 0C94 0000 		jmp matrix_scan_user
  75               	.LVL1:
  76               		.cfi_endproc
  77               	.LFE8:
  79               		.section	.text.matrix_rows,"ax",@progbits
  80               	.global	matrix_rows
  82               	matrix_rows:
  83               	.LFB11:
  26:quantum/matrix_common.c **** 
  27:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_user(void) {}
  28:quantum/matrix_common.c **** 
  29:quantum/matrix_common.c **** // helper functions
  30:quantum/matrix_common.c **** 
  31:quantum/matrix_common.c **** inline uint8_t matrix_rows(void) { return MATRIX_ROWS; }
  84               		.loc 1 31 34 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  90               		.loc 1 31 36 view .LVU8
  91               		.loc 1 31 1 is_stmt 0 view .LVU9
  92 0000 8AE0      		ldi r24,lo8(10)
  93               	/* epilogue start */
  94 0002 0895      		ret
  95               		.cfi_endproc
  96               	.LFE11:
  98               		.section	.text.matrix_cols,"ax",@progbits
  99               	.global	matrix_cols
 101               	matrix_cols:
 102               	.LFB12:
  32:quantum/matrix_common.c **** 
  33:quantum/matrix_common.c **** inline uint8_t matrix_cols(void) { return MATRIX_COLS; }
 103               		.loc 1 33 34 is_stmt 1 view -0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
 109               		.loc 1 33 36 view .LVU11
 110               		.loc 1 33 1 is_stmt 0 view .LVU12
 111 0000 88E0      		ldi r24,lo8(8)
 112               	/* epilogue start */
 113 0002 0895      		ret
 114               		.cfi_endproc
 115               	.LFE12:
 117               		.section	.text.matrix_is_on,"ax",@progbits
 118               	.global	matrix_is_on
 120               	matrix_is_on:
 121               	.LVL2:
 122               	.LFB13:
  34:quantum/matrix_common.c **** 
  35:quantum/matrix_common.c **** inline bool matrix_is_on(uint8_t row, uint8_t col) { return (matrix[row] & ((matrix_row_t)1 << col)
 123               		.loc 1 35 52 is_stmt 1 view -0
 124               		.cfi_startproc
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 127               	/* stack size = 0 */
 128               	.L__stack_usage = 0
 129               		.loc 1 35 54 view .LVU14
 130               		.loc 1 35 68 is_stmt 0 view .LVU15
 131 0000 E82F      		mov r30,r24
 132 0002 F0E0      		ldi r31,0
 133 0004 E050      		subi r30,lo8(-(matrix))
 134 0006 F040      		sbci r31,hi8(-(matrix))
 135 0008 2081      		ld r18,Z
 136 000a 30E0      		ldi r19,0
 137               		.loc 1 35 93 view .LVU16
 138 000c 81E0      		ldi r24,lo8(1)
 139 000e 90E0      		ldi r25,0
 140               	.LVL3:
 141               		.loc 1 35 93 view .LVU17
 142 0010 00C0      		rjmp 2f
 143               		1:
 144 0012 880F      		lsl r24
 145 0014 991F      		rol r25
 146               		2:
 147 0016 6A95      		dec r22
 148 0018 02F4      		brpl 1b
 149               		.loc 1 35 74 view .LVU18
 150 001a 2823      		and r18,r24
 151 001c 3923      		and r19,r25
 152 001e 81E0      		ldi r24,lo8(1)
 153 0020 232B      		or r18,r19
 154 0022 01F4      		brne .L8
 155 0024 80E0      		ldi r24,0
 156               	.L8:
 157               	/* epilogue start */
 158               		.loc 1 35 1 view .LVU19
 159 0026 0895      		ret
 160               		.cfi_endproc
 161               	.LFE13:
 163               		.section	.text.matrix_get_row,"ax",@progbits
 164               	.global	matrix_get_row
 166               	matrix_get_row:
 167               	.LVL4:
 168               	.LFB14:
  36:quantum/matrix_common.c **** 
  37:quantum/matrix_common.c **** inline matrix_row_t matrix_get_row(uint8_t row) {
 169               		.loc 1 37 49 is_stmt 1 view -0
 170               		.cfi_startproc
 171               	/* prologue: function */
 172               	/* frame size = 0 */
 173               	/* stack size = 0 */
 174               	.L__stack_usage = 0
  38:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
  39:quantum/matrix_common.c ****     // switch blocker installed and the switch is always pressed.
  40:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  41:quantum/matrix_common.c ****     return matrix[row] & matrix_mask[row];
  42:quantum/matrix_common.c **** #else
  43:quantum/matrix_common.c ****     return matrix[row];
 175               		.loc 1 43 5 view .LVU21
 176               		.loc 1 43 18 is_stmt 0 view .LVU22
 177 0000 E82F      		mov r30,r24
 178 0002 F0E0      		ldi r31,0
 179 0004 E050      		subi r30,lo8(-(matrix))
 180 0006 F040      		sbci r31,hi8(-(matrix))
  44:quantum/matrix_common.c **** #endif
  45:quantum/matrix_common.c **** }
 181               		.loc 1 45 1 view .LVU23
 182 0008 8081      		ld r24,Z
 183               	.LVL5:
 184               	/* epilogue start */
 185               		.loc 1 45 1 view .LVU24
 186 000a 0895      		ret
 187               		.cfi_endproc
 188               	.LFE14:
 190               		.section	.text.matrix_is_modified,"ax",@progbits
 191               	.global	matrix_is_modified
 193               	matrix_is_modified:
 194               	.LFB15:
  46:quantum/matrix_common.c **** 
  47:quantum/matrix_common.c **** // Deprecated.
  48:quantum/matrix_common.c **** bool matrix_is_modified(void) {
 195               		.loc 1 48 31 is_stmt 1 view -0
 196               		.cfi_startproc
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 0 */
 200               	.L__stack_usage = 0
  49:quantum/matrix_common.c ****     if (debounce_active()) return false;
 201               		.loc 1 49 5 view .LVU26
 202               		.loc 1 49 9 is_stmt 0 view .LVU27
 203 0000 0E94 0000 		call debounce_active
 204               	.LVL6:
  50:quantum/matrix_common.c ****     return true;
  51:quantum/matrix_common.c **** }
 205               		.loc 1 51 1 view .LVU28
 206 0004 91E0      		ldi r25,lo8(1)
 207 0006 8927      		eor r24,r25
 208               	/* epilogue start */
 209 0008 0895      		ret
 210               		.cfi_endproc
 211               	.LFE15:
 213               		.section	.text.matrix_print,"ax",@progbits
 214               	.global	matrix_print
 216               	matrix_print:
 217               	.LFB16:
  52:quantum/matrix_common.c **** 
  53:quantum/matrix_common.c **** #if (MATRIX_COLS <= 8)
  54:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 01234567\n")
  55:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse8(matrix_get_row(row))
  56:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop(matrix_get_row(row))
  57:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 16)
  58:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF\n")
  59:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse16(matrix_get_row(row))
  60:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop16(matrix_get_row(row))
  61:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 32)
  62:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  63:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse32(matrix_get_row(row))
  64:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop32(matrix_get_row(row))
  65:quantum/matrix_common.c **** #endif
  66:quantum/matrix_common.c **** 
  67:quantum/matrix_common.c **** void matrix_print(void) {
 218               		.loc 1 67 25 is_stmt 1 view -0
 219               		.cfi_startproc
 220 0000 CF92      		push r12
 221               	.LCFI0:
 222               		.cfi_def_cfa_offset 3
 223               		.cfi_offset 12, -2
 224 0002 DF92      		push r13
 225               	.LCFI1:
 226               		.cfi_def_cfa_offset 4
 227               		.cfi_offset 13, -3
 228 0004 EF92      		push r14
 229               	.LCFI2:
 230               		.cfi_def_cfa_offset 5
 231               		.cfi_offset 14, -4
 232 0006 FF92      		push r15
 233               	.LCFI3:
 234               		.cfi_def_cfa_offset 6
 235               		.cfi_offset 15, -5
 236 0008 0F93      		push r16
 237               	.LCFI4:
 238               		.cfi_def_cfa_offset 7
 239               		.cfi_offset 16, -6
 240 000a 1F93      		push r17
 241               	.LCFI5:
 242               		.cfi_def_cfa_offset 8
 243               		.cfi_offset 17, -7
 244 000c CF93      		push r28
 245               	.LCFI6:
 246               		.cfi_def_cfa_offset 9
 247               		.cfi_offset 28, -8
 248 000e DF93      		push r29
 249               	.LCFI7:
 250               		.cfi_def_cfa_offset 10
 251               		.cfi_offset 29, -9
 252               	/* prologue: function */
 253               	/* frame size = 0 */
 254               	/* stack size = 8 */
 255               	.L__stack_usage = 8
  68:quantum/matrix_common.c ****     print_matrix_header();
 256               		.loc 1 68 5 view .LVU30
 257               	.LBB15:
 258               		.loc 1 68 5 view .LVU31
 259               		.loc 1 68 5 view .LVU32
 260               	.LBE15:
 261 0010 80E0      		ldi r24,lo8(__c.1959)
 262 0012 90E0      		ldi r25,hi8(__c.1959)
 263 0014 0E94 0000 		call xputs
  69:quantum/matrix_common.c **** 
  70:quantum/matrix_common.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 264               		.loc 1 70 5 view .LVU33
 265               	.LBB16:
 266               		.loc 1 70 10 view .LVU34
 267 0018 80E0      		ldi r24,lo8(matrix)
 268 001a E82E      		mov r14,r24
 269 001c 80E0      		ldi r24,hi8(matrix)
 270 001e F82E      		mov r15,r24
 271               	.LBE16:
  68:quantum/matrix_common.c ****     print_matrix_header();
 272               		.loc 1 68 5 is_stmt 0 view .LVU35
 273 0020 D0E0      		ldi r29,0
 274 0022 C0E0      		ldi r28,0
 275               	.LBB23:
  71:quantum/matrix_common.c ****         phex(row);
 276               		.loc 1 71 9 view .LVU36
 277 0024 90E0      		ldi r25,lo8(__c.1962)
 278 0026 C92E      		mov r12,r25
 279 0028 90E0      		ldi r25,hi8(__c.1962)
 280 002a D92E      		mov r13,r25
  72:quantum/matrix_common.c ****         print(": ");
  73:quantum/matrix_common.c ****         print_matrix_row(row);
 281               		.loc 1 73 9 view .LVU37
 282 002c 00E0      		ldi r16,lo8(__c.1966)
 283 002e 10E0      		ldi r17,hi8(__c.1966)
 284               	.L12:
  71:quantum/matrix_common.c ****         phex(row);
 285               		.loc 1 71 9 is_stmt 1 discriminator 3 view .LVU38
 286               	.LBB17:
  71:quantum/matrix_common.c ****         phex(row);
 287               		.loc 1 71 9 discriminator 3 view .LVU39
  71:quantum/matrix_common.c ****         phex(row);
 288               		.loc 1 71 9 discriminator 3 view .LVU40
 289               	.LBE17:
 290 0030 DF93      		push r29
 291               	.LCFI8:
 292               		.cfi_def_cfa_offset 11
 293 0032 CF93      		push r28
 294               	.LCFI9:
 295               		.cfi_def_cfa_offset 12
 296 0034 DF92      		push r13
 297               	.LCFI10:
 298               		.cfi_def_cfa_offset 13
 299 0036 CF92      		push r12
 300               	.LCFI11:
 301               		.cfi_def_cfa_offset 14
 302 0038 0E94 0000 		call __xprintf
  72:quantum/matrix_common.c ****         print(": ");
 303               		.loc 1 72 9 discriminator 3 view .LVU41
 304               	.LBB18:
  72:quantum/matrix_common.c ****         print(": ");
 305               		.loc 1 72 9 discriminator 3 view .LVU42
  72:quantum/matrix_common.c ****         print(": ");
 306               		.loc 1 72 9 discriminator 3 view .LVU43
 307               	.LBE18:
 308 003c 80E0      		ldi r24,lo8(__c.1964)
 309 003e 90E0      		ldi r25,hi8(__c.1964)
 310 0040 0E94 0000 		call xputs
 311               		.loc 1 73 9 discriminator 3 view .LVU44
 312               	.LBB19:
 313               	.LBI19:
  37:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 314               		.loc 1 37 21 discriminator 3 view .LVU45
 315               	.LBB20:
  43:quantum/matrix_common.c **** #endif
 316               		.loc 1 43 5 discriminator 3 view .LVU46
 317               	.LBE20:
 318               	.LBE19:
 319               		.loc 1 73 9 is_stmt 0 discriminator 3 view .LVU47
 320 0044 F701      		movw r30,r14
 321 0046 8191      		ld r24,Z+
 322 0048 7F01      		movw r14,r30
 323 004a 0E94 0000 		call bitrev
 324               	.LBB21:
 325               		.loc 1 73 9 is_stmt 1 discriminator 3 view .LVU48
 326               		.loc 1 73 9 discriminator 3 view .LVU49
 327               	.LBE21:
 328 004e 1F92      		push __zero_reg__
 329               	.LCFI12:
 330               		.cfi_def_cfa_offset 15
 331 0050 8F93      		push r24
 332               	.LCFI13:
 333               		.cfi_def_cfa_offset 16
 334 0052 1F93      		push r17
 335               	.LCFI14:
 336               		.cfi_def_cfa_offset 17
 337 0054 0F93      		push r16
 338               	.LCFI15:
 339               		.cfi_def_cfa_offset 18
 340 0056 0E94 0000 		call __xprintf
  74:quantum/matrix_common.c ****         print("\n");
 341               		.loc 1 74 9 discriminator 3 view .LVU50
 342               	.LBB22:
 343               		.loc 1 74 9 discriminator 3 view .LVU51
 344               		.loc 1 74 9 discriminator 3 view .LVU52
 345               	.LBE22:
 346 005a 80E0      		ldi r24,lo8(__c.1968)
 347 005c 90E0      		ldi r25,hi8(__c.1968)
 348 005e 0E94 0000 		call xputs
 349 0062 2196      		adiw r28,1
  70:quantum/matrix_common.c ****         phex(row);
 350               		.loc 1 70 5 is_stmt 0 discriminator 3 view .LVU53
 351 0064 8DB7      		in r24,__SP_L__
 352 0066 9EB7      		in r25,__SP_H__
 353 0068 0896      		adiw r24,8
 354 006a 0FB6      		in __tmp_reg__,__SREG__
 355 006c F894      		cli
 356 006e 9EBF      		out __SP_H__,r25
 357 0070 0FBE      		out __SREG__,__tmp_reg__
 358 0072 8DBF      		out __SP_L__,r24
 359               	.LCFI16:
 360               		.cfi_def_cfa_offset 10
 361 0074 CA30      		cpi r28,10
 362 0076 D105      		cpc r29,__zero_reg__
 363 0078 01F4      		brne .L12
 364               	/* epilogue start */
 365               	.LBE23:
  75:quantum/matrix_common.c ****     }
  76:quantum/matrix_common.c **** }
 366               		.loc 1 76 1 view .LVU54
 367 007a DF91      		pop r29
 368 007c CF91      		pop r28
 369 007e 1F91      		pop r17
 370 0080 0F91      		pop r16
 371 0082 FF90      		pop r15
 372 0084 EF90      		pop r14
 373 0086 DF90      		pop r13
 374 0088 CF90      		pop r12
 375 008a 0895      		ret
 376               		.cfi_endproc
 377               	.LFE16:
 379               		.section	.text.matrix_key_count,"ax",@progbits
 380               	.global	matrix_key_count
 382               	matrix_key_count:
 383               	.LFB17:
  77:quantum/matrix_common.c **** 
  78:quantum/matrix_common.c **** uint8_t matrix_key_count(void) {
 384               		.loc 1 78 32 is_stmt 1 view -0
 385               		.cfi_startproc
 386 0000 0F93      		push r16
 387               	.LCFI17:
 388               		.cfi_def_cfa_offset 3
 389               		.cfi_offset 16, -2
 390 0002 1F93      		push r17
 391               	.LCFI18:
 392               		.cfi_def_cfa_offset 4
 393               		.cfi_offset 17, -3
 394 0004 CF93      		push r28
 395               	.LCFI19:
 396               		.cfi_def_cfa_offset 5
 397               		.cfi_offset 28, -4
 398               	/* prologue: function */
 399               	/* frame size = 0 */
 400               	/* stack size = 3 */
 401               	.L__stack_usage = 3
  79:quantum/matrix_common.c ****     uint8_t count = 0;
 402               		.loc 1 79 5 view .LVU56
 403               	.LVL7:
  80:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 404               		.loc 1 80 5 view .LVU57
 405               	.LBB24:
 406               		.loc 1 80 10 view .LVU58
 407               		.loc 1 80 10 is_stmt 0 view .LVU59
 408 0006 00E0      		ldi r16,lo8(matrix)
 409 0008 10E0      		ldi r17,hi8(matrix)
 410               	.LBE24:
  79:quantum/matrix_common.c ****     uint8_t count = 0;
 411               		.loc 1 79 13 view .LVU60
 412 000a C0E0      		ldi r28,0
 413               	.LVL8:
 414               	.L15:
 415               	.LBB27:
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 416               		.loc 1 81 9 is_stmt 1 view .LVU61
 417               	.LBB25:
 418               	.LBI25:
  37:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 419               		.loc 1 37 21 view .LVU62
 420               	.LBB26:
  43:quantum/matrix_common.c **** #endif
 421               		.loc 1 43 5 view .LVU63
  43:quantum/matrix_common.c **** #endif
 422               		.loc 1 43 5 is_stmt 0 view .LVU64
 423               	.LBE26:
 424               	.LBE25:
 425               		.loc 1 81 18 view .LVU65
 426 000c F801      		movw r30,r16
 427 000e 8191      		ld r24,Z+
 428 0010 8F01      		movw r16,r30
 429               	.LVL9:
 430               		.loc 1 81 18 view .LVU66
 431 0012 0E94 0000 		call bitpop
 432               	.LVL10:
 433               		.loc 1 81 15 view .LVU67
 434 0016 C80F      		add r28,r24
 435               	.LVL11:
  80:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 436               		.loc 1 80 5 view .LVU68
 437 0018 F0E0      		ldi r31,hi8(matrix+10)
 438 001a 0030      		cpi r16,lo8(matrix+10)
 439 001c 1F07      		cpc r17,r31
 440 001e 01F4      		brne .L15
 441               	.LBE27:
  82:quantum/matrix_common.c ****     }
  83:quantum/matrix_common.c ****     return count;
 442               		.loc 1 83 5 is_stmt 1 view .LVU69
  84:quantum/matrix_common.c **** }
 443               		.loc 1 84 1 is_stmt 0 view .LVU70
 444 0020 8C2F      		mov r24,r28
 445               	/* epilogue start */
 446 0022 CF91      		pop r28
 447               	.LVL12:
 448               		.loc 1 84 1 view .LVU71
 449 0024 1F91      		pop r17
 450 0026 0F91      		pop r16
 451               	.LVL13:
 452               		.loc 1 84 1 view .LVU72
 453 0028 0895      		ret
 454               		.cfi_endproc
 455               	.LFE17:
 457               		.section	.text.matrix_io_delay,"ax",@progbits
 458               		.weak	matrix_io_delay
 460               	matrix_io_delay:
 461               	.LFB18:
  85:quantum/matrix_common.c **** 
  86:quantum/matrix_common.c **** __attribute__((weak)) void matrix_io_delay(void) { wait_us(MATRIX_IO_DELAY); }
 462               		.loc 1 86 50 is_stmt 1 view -0
 463               		.cfi_startproc
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 468               		.loc 1 86 52 view .LVU74
 469               	.LVL14:
 470               	.LBB28:
 471               	.LBI28:
 472               		.file 2 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h"
   1:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 473               		.loc 2 255 1 view .LVU75
 474               	.LBB29:
 256:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 475               		.loc 2 257 2 view .LVU76
 258:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 476               		.loc 2 261 2 view .LVU77
 262:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 477               		.loc 2 262 2 view .LVU78
 263:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 478               		.loc 2 263 2 view .LVU79
 264:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 479               		.loc 2 273 3 view .LVU80
 274:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\msys64\home\kyleo\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 480               		.loc 2 276 2 view .LVU81
 481 0000 80EA      		ldi r24,lo8(-96)
 482 0002 8A95      	1:	dec r24
 483 0004 01F4      		brne 1b
 484               	.LVL15:
 485               	/* epilogue start */
 486               		.loc 2 276 2 is_stmt 0 view .LVU82
 487               	.LBE29:
 488               	.LBE28:
 489               		.loc 1 86 1 view .LVU83
 490 0006 0895      		ret
 491               		.cfi_endproc
 492               	.LFE18:
 494               		.section	.text.matrix_init_custom,"ax",@progbits
 495               		.weak	matrix_init_custom
 497               	matrix_init_custom:
 498               	.LFB26:
 499               		.cfi_startproc
 500               	/* prologue: function */
 501               	/* frame size = 0 */
 502               	/* stack size = 0 */
 503               	.L__stack_usage = 0
 504               	/* epilogue start */
 505 0000 0895      		ret
 506               		.cfi_endproc
 507               	.LFE26:
 509               		.section	.text.matrix_scan_custom,"ax",@progbits
 510               		.weak	matrix_scan_custom
 512               	matrix_scan_custom:
 513               	.LVL16:
 514               	.LFB20:
  87:quantum/matrix_common.c **** 
  88:quantum/matrix_common.c **** // CUSTOM MATRIX 'LITE'
  89:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_custom(void) {}
  90:quantum/matrix_common.c **** 
  91:quantum/matrix_common.c **** __attribute__((weak)) bool matrix_scan_custom(matrix_row_t current_matrix[]) { return true; }
 515               		.loc 1 91 78 is_stmt 1 view -0
 516               		.cfi_startproc
 517               	/* prologue: function */
 518               	/* frame size = 0 */
 519               	/* stack size = 0 */
 520               	.L__stack_usage = 0
 521               		.loc 1 91 80 view .LVU85
 522               		.loc 1 91 1 is_stmt 0 view .LVU86
 523 0000 81E0      		ldi r24,lo8(1)
 524               	.LVL17:
 525               	/* epilogue start */
 526               		.loc 1 91 1 view .LVU87
 527 0002 0895      		ret
 528               		.cfi_endproc
 529               	.LFE20:
 531               		.section	.text.matrix_init,"ax",@progbits
 532               		.weak	matrix_init
 534               	matrix_init:
 535               	.LFB21:
  92:quantum/matrix_common.c **** 
  93:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init(void) {
 536               		.loc 1 93 46 is_stmt 1 view -0
 537               		.cfi_startproc
 538               	/* prologue: function */
 539               	/* frame size = 0 */
 540               	/* stack size = 0 */
 541               	.L__stack_usage = 0
  94:quantum/matrix_common.c ****     matrix_init_custom();
 542               		.loc 1 94 5 view .LVU89
 543 0000 0E94 0000 		call matrix_init_custom
 544               	.LVL18:
  95:quantum/matrix_common.c **** 
  96:quantum/matrix_common.c ****     // initialize matrix state: all keys off
  97:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 545               		.loc 1 97 5 view .LVU90
 546               	.LBB30:
 547               		.loc 1 97 10 view .LVU91
 548               		.loc 1 97 10 is_stmt 0 view .LVU92
 549 0004 E0E0      		ldi r30,lo8(raw_matrix)
 550 0006 F0E0      		ldi r31,hi8(raw_matrix)
 551 0008 A0E0      		ldi r26,lo8(matrix)
 552 000a B0E0      		ldi r27,hi8(matrix)
 553               	.LVL19:
 554               	.L21:
  98:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 555               		.loc 1 98 9 is_stmt 1 discriminator 3 view .LVU93
 556               		.loc 1 98 23 is_stmt 0 discriminator 3 view .LVU94
 557 000c 1192      		st Z+,__zero_reg__
 558               	.LVL20:
  99:quantum/matrix_common.c ****         matrix[i]     = 0;
 559               		.loc 1 99 9 is_stmt 1 discriminator 3 view .LVU95
 560               		.loc 1 99 23 is_stmt 0 discriminator 3 view .LVU96
 561 000e 1D92      		st X+,__zero_reg__
 562               	.LVL21:
  97:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 563               		.loc 1 97 5 discriminator 3 view .LVU97
 564 0010 80E0      		ldi r24,hi8(raw_matrix+10)
 565 0012 E030      		cpi r30,lo8(raw_matrix+10)
 566 0014 F807      		cpc r31,r24
 567 0016 01F4      		brne .L21
 568               	.LBE30:
 100:quantum/matrix_common.c ****     }
 101:quantum/matrix_common.c **** 
 102:quantum/matrix_common.c ****     debounce_init(MATRIX_ROWS);
 569               		.loc 1 102 5 is_stmt 1 view .LVU98
 570 0018 8AE0      		ldi r24,lo8(10)
 571 001a 0E94 0000 		call debounce_init
 572               	.LVL22:
 103:quantum/matrix_common.c **** 
 104:quantum/matrix_common.c ****     matrix_init_quantum();
 573               		.loc 1 104 5 view .LVU99
 574 001e 0C94 0000 		jmp matrix_init_quantum
 575               	.LVL23:
 576               		.cfi_endproc
 577               	.LFE21:
 579               		.section	.text.matrix_scan,"ax",@progbits
 580               		.weak	matrix_scan
 582               	matrix_scan:
 583               	.LFB22:
 105:quantum/matrix_common.c **** }
 106:quantum/matrix_common.c **** 
 107:quantum/matrix_common.c **** __attribute__((weak)) uint8_t matrix_scan(void) {
 584               		.loc 1 107 49 view -0
 585               		.cfi_startproc
 586 0000 CF93      		push r28
 587               	.LCFI20:
 588               		.cfi_def_cfa_offset 3
 589               		.cfi_offset 28, -2
 590               	/* prologue: function */
 591               	/* frame size = 0 */
 592               	/* stack size = 1 */
 593               	.L__stack_usage = 1
 108:quantum/matrix_common.c ****     bool changed = matrix_scan_custom(raw_matrix);
 594               		.loc 1 108 5 view .LVU101
 595               		.loc 1 108 20 is_stmt 0 view .LVU102
 596 0002 80E0      		ldi r24,lo8(raw_matrix)
 597 0004 90E0      		ldi r25,hi8(raw_matrix)
 598 0006 0E94 0000 		call matrix_scan_custom
 599               	.LVL24:
 600 000a C82F      		mov r28,r24
 601               	.LVL25:
 109:quantum/matrix_common.c **** 
 110:quantum/matrix_common.c ****     debounce(raw_matrix, matrix, MATRIX_ROWS, changed);
 602               		.loc 1 110 5 is_stmt 1 view .LVU103
 603 000c 282F      		mov r18,r24
 604 000e 4AE0      		ldi r20,lo8(10)
 605 0010 60E0      		ldi r22,lo8(matrix)
 606 0012 70E0      		ldi r23,hi8(matrix)
 607 0014 80E0      		ldi r24,lo8(raw_matrix)
 608 0016 90E0      		ldi r25,hi8(raw_matrix)
 609               	.LVL26:
 610               		.loc 1 110 5 is_stmt 0 view .LVU104
 611 0018 0E94 0000 		call debounce
 612               	.LVL27:
 111:quantum/matrix_common.c **** 
 112:quantum/matrix_common.c ****     matrix_scan_quantum();
 613               		.loc 1 112 5 is_stmt 1 view .LVU105
 614 001c 0E94 0000 		call matrix_scan_quantum
 615               	.LVL28:
 113:quantum/matrix_common.c ****     return changed;
 616               		.loc 1 113 5 view .LVU106
 114:quantum/matrix_common.c **** }
 617               		.loc 1 114 1 is_stmt 0 view .LVU107
 618 0020 8C2F      		mov r24,r28
 619               	/* epilogue start */
 620 0022 CF91      		pop r28
 621               	.LVL29:
 622               		.loc 1 114 1 view .LVU108
 623 0024 0895      		ret
 624               		.cfi_endproc
 625               	.LFE22:
 627               		.section	.progmem.data.__c.1968,"a"
 630               	__c.1968:
 631 0000 0A00      		.string	"\n"
 632               		.section	.progmem.data.__c.1966,"a"
 635               	__c.1966:
 636 0000 2530 3862 		.string	"%08b"
 636      00
 637               		.section	.progmem.data.__c.1964,"a"
 640               	__c.1964:
 641 0000 3A20 00   		.string	": "
 642               		.section	.progmem.data.__c.1962,"a"
 645               	__c.1962:
 646 0000 2530 3258 		.string	"%02X"
 646      00
 647               		.section	.progmem.data.__c.1959,"a"
 650               	__c.1959:
 651 0000 0A72 2F63 		.string	"\nr/c 01234567\n"
 651      2030 3132 
 651      3334 3536 
 651      370A 00
 652               		.comm	matrix,10,1
 653               		.comm	raw_matrix,10,1
 654               		.text
 655               	.Letext0:
 656               		.file 3 "c:\\msys64\\home\\kyleo\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 657               		.file 4 "tmk_core/common/matrix.h"
 658               		.file 5 "tmk_core/common/debug.h"
 659               		.file 6 "tmk_core/common/avr/xprintf.h"
 660               		.file 7 "quantum/debounce.h"
 661               		.file 8 "tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 matrix_common.c
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:2      *ABS*:0000003e __SP_H__
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:3      *ABS*:0000003d __SP_L__
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:4      *ABS*:0000003f __SREG__
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:6      *ABS*:00000001 __zero_reg__
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:13     .text.matrix_init_user:00000000 matrix_init_user
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:13     .text.matrix_init_user:00000000 matrix_init_user.localalias.0
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:33     .text.matrix_init_kb:00000000 matrix_init_kb
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:50     .text.matrix_scan_user:00000000 matrix_scan_user
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:65     .text.matrix_scan_kb:00000000 matrix_scan_kb
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:82     .text.matrix_rows:00000000 matrix_rows
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:101    .text.matrix_cols:00000000 matrix_cols
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:120    .text.matrix_is_on:00000000 matrix_is_on
                            *COM*:0000000a matrix
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:166    .text.matrix_get_row:00000000 matrix_get_row
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:193    .text.matrix_is_modified:00000000 matrix_is_modified
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:216    .text.matrix_print:00000000 matrix_print
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:650    .progmem.data.__c.1959:00000000 __c.1959
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:645    .progmem.data.__c.1962:00000000 __c.1962
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:635    .progmem.data.__c.1966:00000000 __c.1966
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:640    .progmem.data.__c.1964:00000000 __c.1964
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:630    .progmem.data.__c.1968:00000000 __c.1968
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:382    .text.matrix_key_count:00000000 matrix_key_count
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:460    .text.matrix_io_delay:00000000 matrix_io_delay
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:497    .text.matrix_init_custom:00000000 matrix_init_custom
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:512    .text.matrix_scan_custom:00000000 matrix_scan_custom
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:534    .text.matrix_init:00000000 matrix_init
                            *COM*:0000000a raw_matrix
C:\Users\kyleo\AppData\Local\Temp\cc3HAMoo.s:582    .text.matrix_scan:00000000 matrix_scan

UNDEFINED SYMBOLS
debounce_active
xputs
__xprintf
bitrev
bitpop
debounce_init
matrix_init_quantum
debounce
matrix_scan_quantum
__do_clear_bss
